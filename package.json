{
  "name": "vscode-cfml",
  "displayName": "CFML",
  "description": "CFML language",
  "version": "0.5.3",
  "preview": true,
  "author": "KamasamaK",
  "publisher": "KamasamaK",
  "license": "MIT",
  "engines": {
    "vscode": "^1.62.3"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/KamasamaK/vscode-cfml.git"
  },
  "bugs": {
    "url": "https://github.com/KamasamaK/vscode-cfml/issues"
  },
  "categories": [
    "Programming Languages"
  ],
  "keywords": [
    "cfml",
    "coldfusion",
    "lucee"
  ],
  "activationEvents": [
    "onLanguage:cfml",
    "workspaceContains:**/*.cfm",
    "workspaceContains:**/*.cfml",
    "workspaceContains:**/*.cfc"
  ],
  "icon": "images/icon.png",
  "main": "./out/cfmlMain",
  "contributes": {
    "languages": [
      {
        "id": "cfml",
        "aliases": [
          "CFML",
          "cfml"
        ],
        "extensions": [
          ".cfml",
          ".cfm",
          ".cfc"
        ],
        "configuration": "./language-configuration.json"
      }
    ],
    "grammars": [
      {
        "language": "cfml",
        "scopeName": "embedding.cfml",
        "path": "./syntaxes/cfml.tmLanguage.json",
        "embeddedLanguages": {
          "source.css": "css",
          "meta.embedded.block.css": "css",
          "source.js": "javascript",
          "meta.embedded.block.js": "javascript",
          "meta.embedded.line.js": "javascript",
          "source.sql": "sql",
          "meta.embedded.block.sql": "sql",
          "meta.tag.cfml": "cfml",
          "constant.character.escape.hash.cfml": "cfml",
          "punctuation.definition.template-expression.begin.cfml": "cfml",
          "meta.embedded.line.cfml": "cfml",
          "meta.embedded.block.cfml": "cfml",
          "punctuation.definition.template-expression.end.cfml": "cfml"
        }
      }
    ],
    "configuration": {
      "type": "object",
      "title": "CFML Configuration",
      "properties": {
        "cfml.globalDefinitions.source": {
          "type": "string",
          "description": "The source of the global definitions.",
          "enum": [
            "cfdocs"
          ],
          "default": "cfdocs",
          "scope": "window"
        },
        "cfml.cfDocs.source": {
          "type": "string",
          "description": "Indicates the source location type to be used for CFDocs. Remote is GitHub repo. Local is based on cfml.cfDocs.localPath.",
          "markdownDescription": "Indicates the source location type to be used for CFDocs. Remote is GitHub repo. Local is based on `cfml.cfDocs.localPath`.",
          "enum": [
            "remote",
            "local"
          ],
          "enumDescriptions": [
            "Retrieve resources remotely from GitHub.",
            "Retrieve resources locally using cfml.cfDocs.localPath."
          ],
          "markdownEnumDescription": [
            "Retrieve resources remotely from GitHub.",
            "Retrieve resources locally using `cfml.cfDocs.localPath`."
          ],
          "default": "remote",
          "scope": "window"
        },
        "cfml.cfDocs.localPath": {
          "type": [
            "string",
            "null"
          ],
          "description": "Physical path to the data/language directory of CFDocs.",
          "default": null,
          "scope": "machine-overridable"
        },
        "cfml.hover.enable": {
          "type": "boolean",
          "description": "Whether hover is enabled for CFML entities.",
          "default": true,
          "scope": "resource"
        },
        "cfml.hover.html.enable": {
          "type": "boolean",
          "description": "Whether hover is enabled for HTML entities.",
          "default": true,
          "scope": "resource"
        },
        "cfml.hover.css.enable": {
          "type": "boolean",
          "description": "Whether hover is enabled for CSS entities.",
          "default": true,
          "scope": "resource"
        },
        "cfml.signature.enable": {
          "type": "boolean",
          "description": "Whether signature help is enabled.",
          "default": true,
          "scope": "resource"
        },
        "cfml.suggest.enable": {
          "type": "boolean",
          "description": "Whether completion help is enabled.",
          "default": true,
          "scope": "resource"
        },
        "cfml.suggest.snippets.enable": {
          "type": "boolean",
          "description": "Whether snippets are part of completion help.",
          "default": true,
          "scope": "resource"
        },
        "cfml.suggest.snippets.exclude": {
          "type": "array",
          "description": "Set of snippet keys you would like excluded from suggestions.",
          "items": {
            "type": "string"
          },
          "default": [],
          "scope": "resource"
        },
        "cfml.suggest.globalFunctions.enable": {
          "type": "boolean",
          "description": "Whether global functions are part of completion help.",
          "default": true,
          "scope": "resource"
        },
        "cfml.suggest.globalFunctions.firstLetterCase": {
          "type": "string",
          "description": "What case should be used for the first letter of global function suggestions.",
          "enum": [
            "unchanged",
            "lower",
            "upper"
          ],
          "enumDescriptions": [
            "Leaves the name unchanged from source",
            "Lowercases the first letter",
            "Uppercases the first letter"
          ],
          "default": "default",
          "scope": "resource"
        },
        "cfml.suggest.globalTags.enable": {
          "type": "boolean",
          "description": "Whether global tags are part of completion help.",
          "default": true,
          "scope": "resource"
        },
        "cfml.suggest.globalTags.attributes.quoteType": {
          "type": "string",
          "enum": [
            "none",
            "double",
            "single"
          ],
          "enumDescriptions": [
            "Adds no quotes for attribute value",
            "Adds two double quotes for attribute value",
            "Adds two single quotes for attribute value"
          ],
          "default": "double",
          "description": "Which quote type to use when completing attribute suggestion.",
          "scope": "resource"
        },
        "cfml.suggest.globalTags.attributes.defaultValue": {
          "type": "boolean",
          "description": "Whether to populate the default value for an attribute if it has one.",
          "default": false,
          "scope": "resource"
        },
        "cfml.suggest.globalTags.includeAttributes.setType": {
          "type": "string",
          "description": "What set of attributes to include when global tag suggestion is selected",
          "default": "none",
          "enum": [
            "none",
            "required",
            "all"
          ],
          "enumDescriptions": [
            "Adds no attributes on completion of global tags",
            "Adds required attributes on completion of global tags",
            "Adds all attributes on completion of global tags"
          ],
          "scope": "resource"
        },
        "cfml.suggest.globalTags.includeAttributes.custom": {
          "type": "object",
          "description": "A custom set of attributes to include for given tags when suggestion is selected. This setting overrides the set type.",
          "default": {},
          "patternProperties": {
            "^cf[a-z0-9_]+$": {
              "description": "The tag name and its attribute overrides",
              "type": "array",
              "minItems": 0,
              "items": {
                "title": "Attribute",
                "description": "The attribute information",
                "type": "object",
                "properties": {
                  "name": {
                    "title": "Attribute name",
                    "description": "The name of the attribute to include",
                    "type": "string"
                  },
                  "value": {
                    "title": "Attribute value",
                    "description": "The default value of the attribute",
                    "type": "string",
                    "default": ""
                  }
                },
                "required": [
                  "name"
                ]
              },
              "default": []
            }
          },
          "additionalProperties": false,
          "scope": "resource"
        },
        "cfml.suggest.htmlTags.enable": {
          "type": "boolean",
          "description": "Whether HTML tags are part of completion help.",
          "default": true,
          "scope": "resource"
        },
        "cfml.suggest.htmlTags.attributes.quoteType": {
          "type": "string",
          "enum": [
            "none",
            "double",
            "single"
          ],
          "enumDescriptions": [
            "Adds no quotes for attribute value",
            "Adds two double quotes for attribute value",
            "Adds two single quotes for attribute value"
          ],
          "default": "double",
          "description": "Which quote type to use when completing attribute suggestion.",
          "scope": "resource"
        },
        "cfml.suggest.css.enable": {
          "type": "boolean",
          "description": "Whether CSS properties and values are part of completion help.",
          "default": true,
          "scope": "resource"
        },
        "cfml.definition.enable": {
          "type": "boolean",
          "description": "Whether providing definitions is enabled.",
          "default": true,
          "scope": "resource"
        },
        "cfml.definition.userFunctions.search.enable": {
          "type": "boolean",
          "description": "Whether to search for matching functions throughout the workspace when a reliable match cannot be determined.",
          "default": false,
          "scope": "resource"
        },
        "cfml.indexComponents.enable": {
          "type": "boolean",
          "description": "Whether to index all components in workspace. This is done on each startup and is required for multiple features to work properly.",
          "default": true,
          "scope": "window"
        },
        "cfml.autoCloseTags.enable": {
          "type": "boolean",
          "markdownDescription": "Whether to enable auto-closing tags for CFML. This uses the third-party extension `auto-close-tag`. This is only checked and set on startup.",
          "default": true,
          "scope": "window"
        },
        "cfml.autoCloseTags.configurationTarget": {
          "type": "string",
          "description": "Auto-configuration target for auto-closing tags.",
          "enum": [
            "Global",
            "Workspace"
          ],
          "default": "Global",
          "scope": "window"
        },
        "cfml.docBlock.gap": {
          "type": "boolean",
          "default": true,
          "description": "Whether there should be a gap between the hint and other tags in a docblock",
          "scope": "resource"
        },
        "cfml.docBlock.extra": {
          "type": "array",
          "default": [],
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the tag"
              },
              "default": {
                "type": "string",
                "default": "",
                "description": "The default value for the tag"
              },
              "types": {
                "type": "array",
                "description": "The types of structures to which this tag will be applied",
                "items": {
                  "type": "string",
                  "enum": [
                    "component",
                    "function",
                    "property",
                    "interface"
                  ]
                }
              }
            },
            "required": [
              "name"
            ]
          },
          "description": "Extra tags you wish to include in every DocBlock",
          "scope": "resource"
        },
        "cfml.engine.name": {
          "type": "string",
          "description": "Name of the CFML engine against which to filter.",
          "enum": [
            "coldfusion",
            "lucee",
            "railo",
            "openbd"
          ],
          "scope": "window"
        },
        "cfml.engine.version": {
          "type": "string",
          "pattern": "^((0|[1-9]\\d*)(\\.(0|[1-9]\\d*)(\\.(0|[1-9]\\d*))?)?)?$",
          "description": "Version of the CFML engine against which to filter. SemVer format is preferred.",
          "scope": "window"
        },
        "cfml.mappings": {
          "type": "array",
          "default": [],
          "items": {
            "type": "object",
            "properties": {
              "logicalPath": {
                "type": "string",
                "default": "",
                "description": "The logical path to which the directory path is mapped. Must start with a /."
              },
              "directoryPath": {
                "type": "string",
                "default": "",
                "description": "The path to the actual directory that will be mapped. Can be a physical path or relative to the workspace root."
              },
              "isPhysicalDirectoryPath": {
                "type": "boolean",
                "default": true,
                "description": "Whether directoryPath refers to a physical path or one relative to the workspace root"
              }
            },
            "required": [
              "logicalPath",
              "directoryPath"
            ]
          },
          "description": "Represents CFML mappings from logicalPath to directoryPath.",
          "scope": "resource"
        }
      }
    },
    "configurationDefaults": {
      "[cfml]": {
        "editor.suggest.snippetsPreventQuickSuggestions": false
      }
    },
    "commands": [
      {
        "command": "cfml.refreshGlobalDefinitionCache",
        "category": "CFML",
        "title": "Refresh cache for global definitions"
      },
      {
        "command": "cfml.refreshWorkspaceDefinitionCache",
        "category": "CFML",
        "title": "Refresh cache for workspace definitions"
      },
      {
        "command": "cfml.toggleLineComment",
        "category": "CFML",
        "title": "Toggle CFML line comment"
      },
      {
        "command": "cfml.toggleBlockComment",
        "category": "CFML",
        "title": "Toggle CFML block comment"
      },
      {
        "command": "cfml.openActiveApplicationFile",
        "category": "CFML",
        "title": "Open Application file for currently active document"
      },
      {
        "command": "cfml.goToMatchingTag",
        "category": "CFML",
        "title": "Go to Matching Tag"
      },
      {
        "command": "cfml.openCfDocs",
        "category": "CFML",
        "title": "Open CFDocs page"
      },
      {
        "command": "cfml.openEngineDocs",
        "category": "CFML",
        "title": "Open CFML engine docs page"
      },
      {
        "command": "cfml.foldAllFunctions",
        "category": "CFML",
        "title": "Fold all functions in active editor"
      }
    ],
    "keybindings": [
      {
        "command": "cfml.toggleLineComment",
        "key": "ctrl+/",
        "mac": "cmd+/",
        "when": "editorTextFocus && !editorReadonly && editorLangId == cfml"
      },
      {
        "command": "cfml.toggleBlockComment",
        "key": "shift+alt+a",
        "mac": "shift+alt+a",
        "when": "editorTextFocus && !editorReadonly && editorLangId == cfml"
      }
    ],
    "jsonValidation": [
      {
        "fileMatch": "server*.json",
        "url": "./resources/schemas/server.schema.json"
      }
    ]
  },
  "scripts": {
    "clean": "rimraf out *.vsix",
    "build": "tsc -p ./",
    "rebuild": "npm run clean && npm run build",
    "watch": "tsc -watch -p ./",
    "pack": "vsce package",
    "lint": "tslint -p tsconfig.json -t verbose",
    "vscode:prepublish": "npm run build"
  },
  "dependencies": {
    "@octokit/rest": "~16.15.1",
    "findup-sync": "2.0.0",
    "html-entities": "~1.2.1",
    "request": "~2.88.2",
    "semver": "^5.5.1",
    "trie-prefix-tree": "1.5.1",
    "vscode-css-languageservice": "3.0.13-next.12",
    "vscode-html-languageservice": "2.1.11-next.11"
  },
  "devDependencies": {
    "@types/findup-sync": "2.0.0",
    "@types/html-entities": "~1.2.16",
    "@types/node": "~14.14.45",
    "@types/request": "~2.48.7",
    "@types/semver": "~5.5.0",
    "@types/vscode": "~1.62.0",
    "rimraf": "^3.0.2",
    "tslint": "^6.1.3",
    "typescript": "^3.9.10",
    "typescript-tslint-plugin": "^1.0.1",
    "vsce": "^2.5.3"
  }
}
