{
  "name": "CFML",
  "scopeName": "embedding.cfml",
  "patterns": [
    {
      "begin": "(?i)(?=^\\s*(/\\*|//|import\\b|(component|abstract\\s*component|final\\s*component|interface)(\\s+|{)))",
      "contentName": "source.cfml.script",
      "end": "(?=not)possible",
      "patterns": [
        {
          "include": "#source-cfml-script"
        }
      ]
    },
    {
      "include": "#source-cfml-tag-comments"
    },
    {
      "begin": "(?i)(?=<cf(component|interface)\\b)",
      "contentName": "source.cfml",
      "end": "(?=not)possible",
      "patterns": [
        {
          "include": "#cfcomponent"
        },
        {
          "include": "#cfinterface"
        }
      ]
    },
    {
      "begin": "(?=\\S)",
      "contentName": "text.html.cfml",
      "end": "(?=not)possible",
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "include": "#text-html-cfml"
        }
      ]
    }
  ],
  "repository": {
    "text-html-cfml-character-reference": {
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "name": "constant.character.character-reference.html",
          "begin": "&(?=([a-zA-Z0-9]+|#\\d+|#[xX][0-9a-fA-F]+);)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.character-reference.begin.html"
            }
          },
          "end": ";",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.character-reference.end.html"
            }
          },
          "patterns": [
            {
              "name": "entity.name.character-reference.numeric.html",
              "match": "(?<=&)#(\\d+|[xX][0-9a-fA-F]+)(?=;)"
            },
            {
              "name": "entity.name.character-reference.name.html",
              "match": "(?<=&)[a-zA-Z0-9]+(?=;)"
            }
          ]
        },
        {
          "name": "invalid.illegal.bad-ampersand.html",
          "match": "&"
        }
      ]
    },
    "source-cfml-script-support-call": {
      "patterns": [
        {
          "name": "meta.function-call.support.cfml meta.function-call.support.createcomponent.cfml",
          "begin": "(?i)\\b(createobject)(\\()(?=(?:\\s*type\\s*=)?\\s*[\"']component[\"']\\s*,)",
          "beginCaptures": {
            "1": {
              "name": "support.function.cfml"
            },
            "2": {
              "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.begin.cfml"
            }
          },
          "contentName": "meta.function-call.parameters.support.cfml",
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "punctuation.separator.function-call.support.cfml",
              "match": ","
            },
            {
              "include": "#source-cfml-script-support-call-parameter"
            },
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        },
        {
          "name": "meta.function-call.support.cfml meta.function-call.support.createjavaobject.cfml",
          "begin": "(?i)\\b(createobject)\\s*(\\()(?=(?:\\s*type\\s*=)?\\s*[\"']java[\"']\\s*,)",
          "beginCaptures": {
            "1": {
              "name": "support.function.cfml"
            },
            "2": {
              "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.begin.cfml"
            }
          },
          "contentName": "meta.function-call.parameters.support.cfml",
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "punctuation.separator.function-call.support.cfml",
              "match": ","
            },
            {
              "include": "#source-cfml-script-support-call-parameter"
            },
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        },
        {
          "name": "meta.function-call.support.cfml",
          "begin": "(?i)\\b(queryexecute)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "support.function.cfml"
            },
            "2": {
              "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.begin.cfml"
            }
          },
          "contentName": "meta.function-call.parameters.support.cfml",
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.end.cfml"
            }
          },
          "patterns": [
            {
              "begin": "(?i)(?<=queryexecute\\()",
              "end": "(?=[,)])",
              "patterns": [
                {
                  "include": "#source-cfml-script-sql-string"
                },
                {
                  "include": "#source-cfml-script-queryexecute-parameter"
                },
                {
                  "include": "#source-cfml-script-support-call-parameter"
                },
                {
                  "include": "#source-cfml-script-expressions"
                }
              ]
            },
            {
              "name": "punctuation.separator.function-call.support.cfml",
              "match": ","
            },
            {
              "include": "#source-cfml-script-queryexecute-parameter"
            },
            {
              "include": "#source-cfml-script-support-call-parameter"
            },
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        },
        {
          "name": "meta.function-call.support.cfml",
          "begin": "(?x)\\b\n(?i:\n    (abs|acos|addsoaprequestheader\n    |addsoapresponseheader|ajaxlink|ajaxonload|applicationstarttime|applicationstop\n    |array(?:append|avg|clear|contains|containsnocase|delete|deleteat|deletenocase|each\n    |every|filter|find|findall|findallnocase|findnocase|first|indexexists|insertat|isdefined\n    |isempty|last|len|map|max|median|merge|mid|min|new|prepend|reduce|resize|reverse\n    |set|slice|some|sort|sum|swap|tolist|tostruct)?|asc|asin|atn|beat|binarydecode|binaryencode|bitand|bitmaskclear|bitmaskread|bitmaskset\n    |bitnot|bitor|bitshln|bitshrn|bitxor|booleanformat|bundleinfo|cache(?:clear|count|delete|get|getall\n    |getallids|getdefaultcachename|getmetadata|getproperties|getsession|idexists|keyexists\n    |put|regionexists|regionnew|regionremove|remove|removeall|setproperties)|callstackdump|callstackget|canonicalize\n    |ceiling|cfusion_decrypt|cfusion_encrypt|charsetdecode|charsetencode|chr|cjustify\n    |collectioneach|collectionevery|collectionfilter|collectionmap|collectionreduce|collectionsome\n    |compare|comparenocase|component(?:cacheclear\n    |cachelist|info)|compress|contractpath|cos|create(?:date|datetime|dynamicproxy|guid|object|odbcdate|odbcdatetime\n    |odbctime|time|timespan|uniqueid|uuid)|date(?:add|compare|convert|diff|format|part\n    |timeformat)|entity(?:delete|load|loadbyexample|loadbypk|merge|namearray|namelist\n    |new|reload|save|toquery)|csrfgeneratetoken|csrfverifytoken\n    |ctcacheclear|ctcachelist|datasourceflushmetacache|day|dayofweek|dayofweekasstring\n    |dayofweekshortasstring|dayofyear|daysinmonth|daysinyear|de|decimalformat|decodeforhtml\n    |decodefromurl|decrementvalue|decrypt|decryptbinary|deleteclientvariable|deserialize\n    |deserializejson|deserializexml|directorycopy|directorycreate|directorydelete|directoryexists\n    |directorylist|directoryrename|directorysize|dollarformat|dotnettocftype|duplicate\n    |each|echo|empty|encodeforcss|encodefordn|encodeforhtml|encodeforhtmlattribute|encodeforjavascript\n    |encodeforldap|encodeforurl|encodeforxml|encodeforxmlattribute|encodeforxpath|encrypt\n    |encryptbinary|esapidecode|esapiencode|evaluate|exp|expandpath|extract|file(?:append\n    |close|copy|delete|exists|getmimetype|iseof|move|open\n    |read|readbinary|readline|seek|setaccessmode|setattribute\n    |setlastmodified|skipbytes|upload|uploadall|write|writeline)\n    |find|findnocase|findoneof|firstdayofmonth|fix|floor|formatbasen|generatepbkdfkey\n    |generatesecretkey|get(?:applicationmetadata|applicationsettings|authuser\n    |basetagdata|basetaglist|basetemplatepath|builtinfunction|canonicalpath|classpath\n    |clientvariableslist|componentmetadata|contextroot|cpuusage|currentcontext|currenttemplatepath\n    |directoryfrompath|encoding|exception|filefrompath|fileinfo|freespace|functioncalledname\n    |functiondata|functionkeywords|functionlist|gatewayhelper|httprequestdata|httptimestring\n    |locale|localedisplayname|localeinfo|localhostip|luceeid\n    |memoryusage|metadata|metricdata|numericdate|pagecontext|printerinfo|printerlist\n    |profilesections|profilestring|readableimageformats|safehtml|soaprequest|soaprequestheader\n    |soapresponse|soapresponseheader|systemfreememory|systemtotalmemory|tagdata|taglist\n    |tempdirectory|tempfile|tickcount|timezone|timezoneinfo|token|totalspace\n    |userroles|variable|vfsmetadata|writeableimageformats)|hash|hash40|hmac|hour|htmlcodeformat|htmleditformat|htmlparse\n    |iif|image(?:addborder|blur|clearrect\n    |copy|createcaptcha|crop|drawarc|drawbeveledrect|drawcubiccurve|drawimage|drawline\n    |drawlines|drawoval|drawpoint|drawquadraticcurve|drawrect|drawroundrect|drawtext\n    |filter|filtercolormap|filtercurves|filterkernel|filterwarpgrid|flip|fonts|formats\n    |getblob|getbufferedimage|getexifmetadata|getexiftag|getheight|getiptcmetadata|getiptctag\n    |getmetadata|getwidth|grayscale|info|makecolortransparent|maketranslucent|negative\n    |new|overlay|paste|read|readbase64|resize|rotate|rotatedrawingaxis|scaletofit|setantialiasing\n    |setbackgroundcolor|setdrawingalpha|setdrawingcolor|setdrawingstroke|setdrawingtransparency\n    |sharpen|shear|sheardrawingaxis|translate|translatedrawingaxis|write|writebase64\n    |xordrawingmode)|incrementvalue|inputbasen|insert|int|invalidateoauthaccesstoken|invoke|is(?:array|binary|boolean|closure|customfunction|date|dateobject|ddx|debugmode\n    |defined|empty|fileobject|image|imagefile|instanceof|ipinrange|ipv6|json|leapyear\n    |localhost|notmap|null|numeric|numericdate|object|pdfarchive|pdffile|pdfobject|query|safehtml\n    |simplevalue|soaprequest|spreadsheetfile|spreadsheetobject|struct|userinanyrole|userinrole\n    |userloggedin|valid|validoauthaccesstoken|videofile|wddx|xml|xmlattribute|xmldoc\n    |xmlelem|xmlnode|xmlroot|zipfile)|javacast\n    |jsstringformat|lcase|left|len|list(?:append|avg|changedelims|compact|contains\n    |containsnocase|deleteat|each|every|filter|find|findnocase|first|getat|indexexists\n    |insertat|itemtrim|last|len|map|prepend|qualify|reduce|removeduplicates|rest|setat\n    |some|sort|toarray|trim|valuecount|valuecountnocase)|ljustify|location|log|log10|lscurrencyformat|lsdateformat\n    |lsdatetimeformat|lsdayofweek|lseurocurrencyformat|lsiscurrency|lsisdate|lsisnumeric\n    |lsnumberformat|lsparsecurrency|lsparsedatetime|lsparseeurocurrency|lsparsenumber\n    |lstimeformat|lsweek|ltrim|max|metaphone|mid|millisecond|min|minute|month|monthasstring\n    |monthshortasstring|newline|now|nowserver|nullvalue|numberformat|object(?:equals|load|save)|onapplicationend\n    |onapplicationstart|onerror|onmissingmethod|onmissingtemplate|onrequest|onrequestend\n    |onrequeststart|onserverstart|onsessionend|onsessionstart|orm(?:clearsession\n    |closeallsessions|closesession|evictcollection|evictentity|evictqueries|executequery\n    |flush|flushall|getsession|getsessionfactory|index|indexpurge|reload|search|searchoffline)\n    |pagepoolclear|pagepoollist|paragraphformat\n    |parsedatetime|parsenumber|pi|precisionevaluate|preservesinglequotes\n    |quarter|query(?:addcolumn|addrow|columnarray|columncount|columndata|columnexists|columnlist\n    |convertforgrid|currentrow|deletecolumn|deleterow|each|every|execute|filter|getcell\n    |getresult|getrow|keyexists|map|new|recordcount|reduce|rowdata|setcell|slice|some|sort)?|quotedvaluelist|rand|randomize|randrange|reescape|refind|refindnocase\n    |releasecomobject|rematch|rematchnocase|removecachedquery|removechars|render|repeatstring\n    |replace(?:list\n    |listnocase|nocase)?|rereplace|rereplacenocase|restdeleteapplication|restinitapplication|restsetresponse\n    |reverse|right|rjustify|round|rtrim|second|sendgatewaymessage|serialize|serializejson\n    |serializexml|sessiongetmetadata|sessioninvalidate|sessionrotate|sessionstarttime\n    |setencoding|setlocale|setprofilestring|settimezone|setvariable|sgn|sin|sizeof|sleep\n    |soundex|spanexcluding|spanincluding|spreadsheet(?:addautofilter|addcolumn|addfreezepane|addimage|addinfo|addpagebreaks\n    |addrow|addrows|addsplitpane|createsheet|deletecolumn|deletecolumns|deleterow|deleterows\n    |formatcell|formatcellrange|formatcolumn|formatcolumns|formatrow|formatrows|getcellcomment\n    |getcellformula|getcellvalue|getcolumncount|info|mergecells|new|read|readbinary|removesheet|setactivesheet\n    |setactivesheetnumber|setcellcomment|setcellformula|setcellvalue|setcolumnwidth|setfooter\n    |setheader|setrowheight|shiftcolumns|shiftrows|write)|sqr|sslcertificateinstall|sslcertificatelist\n    |store(?:addacl|getacl|getmetadata\n    |setacl|setmetadata)|stringlen|stripcr|struct(?:append|clear|copy|count|delete|each|every|filter|find\n    |findkey|findvalue|get|insert|isempty|keyarray|keyexists|keylist|keytranslate|map\n    |new|reduce|some|sort|update)|systemcacheclear|systemoutput|tan|threadjoin|threadterminate|throw\n    |timeformat|to(?:base64|binary|numeric|script|string)|trace|transaction(?:commit\n    |rollback|setsavepoint)|trim|truefalseformat|ucase|ucfirst|unserializejava|url(?:decode|encode|encodedformat|sessionformat)|val|valuearray\n    |valuelist|verifyclient|week|wrap|writebody|writedump|writelog|writeoutput|wsgetallchannels\n    |wsgetsubscribers|wspublish|wssendmessage|xml(?:childpos\n    |elemnew|format|getnodetype|new|parse|search|transform|validate)|year|yesnoformat)\n  )\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "support.function.cfml"
            },
            "2": {
              "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.begin.cfml"
            }
          },
          "contentName": "meta.function-call.parameters.support.cfml",
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "punctuation.separator.function-call.support.cfml",
              "match": ","
            },
            {
              "include": "#source-cfml-script-support-call-parameter"
            },
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        },
        {
          "name": "meta.function-call.support.cfml",
          "begin": "(?i)\\b(getk2serverdoccount|getk2serverdoccountlimit|gettemplatepath|isk2serverabroker|isk2serverdoccountexceeded|isk2serveronline|parameterexists)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "support.function.cfml invalid.deprecated.function.cfml"
            },
            "2": {
              "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.begin.cfml"
            }
          },
          "contentName": "meta.function-call.parameters.support.cfml",
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "punctuation.separator.function-call.support.cfml",
              "match": ","
            },
            {
              "include": "#source-cfml-script-support-call-parameter"
            },
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        }
      ]
    },
    "source-cfml-script-variable": {
      "patterns": [
        {
          "include": "#source-cfml-script-cfml-scopes"
        },
        {
          "name": "entity.name.class.cfml",
          "match": "[_$a-zA-Z][$\\w.]*(?=\\s*::)"
        },
        {
          "name": "variable.other.struct.cfml",
          "match": "[_$a-zA-Z][$\\w]*(?=\\s*[\\[\\.])"
        },
        {
          "name": "variable.other.constant.cfml",
          "match": "\\b[A-Z][_$\\dA-Z]*\\b"
        },
        {
          "name": "variable.other.readwrite.cfml",
          "match": "[_$a-zA-Z][$\\w]*"
        }
      ]
    },
    "source-cfml-script-struct-literal-function-keys": {
      "patterns": [
        {
          "name": "meta.function.declaration.cfml meta.struct-literal.key.cfml string.quoted.single.cfml",
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.cfml"
            }
          },
          "contentName": "entity.name.function.cfml",
          "end": "(')(?!')",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "constant.character.escape.quote.cfml",
              "match": "''"
            },
            {
              "include": "#source-cfml-script-hash-delimiters"
            }
          ]
        },
        {
          "name": "meta.function.declaration.cfml meta.struct-literal.key.cfml string.quoted.double.cfml",
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.cfml"
            }
          },
          "contentName": "entity.name.function.cfml",
          "end": "(\")(?!\")",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "constant.character.escape.quote.cfml",
              "match": "\"\""
            },
            {
              "include": "#source-cfml-script-hash-delimiters"
            }
          ]
        },
        {
          "name": "meta.function.declaration.cfml meta.struct-literal.key.cfml entity.name.function.cfml",
          "match": "[_$a-zA-Z][$\\w]*"
        },
        {
          "name": "meta.function.declaration.cfml punctuation.separator.key-value.cfml",
          "match": "(=|:)"
        }
      ]
    },
    "text-html-cfml-cfoutput-tag-stuff": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#text-html-cfml-cfoutput-tag-id-attribute"
        },
        {
          "include": "#text-html-cfml-cfoutput-tag-style-attribute"
        },
        {
          "include": "#text-html-cfml-cfoutput-tag-generic-attribute"
        },
        {
          "include": "#text-html-cfml-cfoutput-string-double-quoted"
        },
        {
          "include": "#text-html-cfml-cfoutput-string-single-quoted"
        },
        {
          "include": "#text-html-cfml-unquoted-attribute"
        }
      ]
    },
    "source-sql": {
      "comment": "https://github.com/Microsoft/vscode/commit/e9d793eb3330e16031afc16d8c47f233923e6ddd",
      "patterns": [
        {
          "name": "keyword.other.sql",
          "match": "\\b(?i)(abort|abort_after_wait|absent|absolute|accent_sensitivity|acceptable_cursopt|acp|action|activation|address|admin|aes_128|aes_192|aes_256|affinity|after|aggregate|algorithm|all_constraints|all_errormsgs|all_indexes|all_levels|all_results|allow_connections|allow_dup_row|allow_encrypted_value_modifications|allow_page_locks|allow_row_locks|allow_snapshot_isolation|altercolumn|always|anonymous|ansi_defaults|ansi_null_default|ansi_null_dflt_off|ansi_null_dflt_on|ansi_nulls|ansi_padding|ansi_warnings|appdomain|append|application|apply|arithabort|arithignore|assembly|asymmetric|asynchronous_commit|at|atan2|atomic|attach|attach_force_rebuild_log|attach_rebuild_log|audit|auth_realm|authentication|auto|auto_cleanup|auto_close|auto_create_statistics|auto_shrink|auto_update_statistics|auto_update_statistics_async|automated_backup_preference |automatic|autopilot|availability|availability_mode|backup_priority|base64|basic|batches|batchsize|before|bigint|binary|binding|bit|block|blocksize|bmk|broker|broker_instance|bucket_count|buffer|buffercount|bulk_logged|by|call|caller|card|case|cast|catalog|catch|cert|certificate|change_retention|change_tracking|change_tracking_context|changes|char|character|character_set|check_expiration|check_policy|checkconstraints|checkindex|checkpoint|cleanup_policy|clear|clear_port|codepage|collection|column_encryption_key|column_master_key|columnstore|columnstore_archive|colv_80_to_100|colv_100_to_80|commit_differential_base|committed|compatibility_level|compress_all_row_groups|compression|compression_delay|concat_null_yields_null|concatenate|configuration|connect|continue_after_error|contract|contract_name|control|conversation|conversation_group_id|conversation_handle|copy|copy_only|count_rows|counter|create|credential|cross|cryptographic|cryptographic_provider|cube|cursor_close_on_commit|cursor_default|data|data_compression|data_flush_interval_seconds|data_mirroring|data_purity|data_source|database|database_name|database_snapshot|datafiletype|date_correlation_optimization|date|datefirst|dateformat|date_format|datetime|datetime2|datetimeoffset|days|db_chaining|dbid|dbidexec|dbo_only|deadlock_priority|dec|decimal|declare|decrypt|decrypt_a|decryption|default_database|default_language|default_logon_domain|default_schema|definition|delay|delayed_durability|delimitedtext|density_vector|dependent|des|description|desired_state|desx|differential|digest|disable|disable_broker|disable_def_cnst_chk|disabled|disk|distribution|drop|drop_existing|dts_buffers|dump|durability|dynamic|edition|elements|else|emergency|empty|enable|enable_broker|enabled|encoding|encrypted|encrypted_value|encryption|encryption_type|end|endpoint|endpoint_url|enhancedintegrity|entry|error_broker_conversations|errorfile|estimateonly|event|exec|executable|exists|expand|expiredate|expiry_date|explicit|external_access|failover|failover_mode|failure_condition_level|fast|fast_forward|fastfirstrow|federated_service_account|field_terminator|fieldterminator|file|filelistonly|filegroup|filename|filestream|filestream_log|filestream_on|filetable|file_format|filter|fips_flagger|fire_triggers|first|firstrow|float|flush_interval_seconds|fmtonly|following|force|force_failover_allow_data_loss|force_service_allow_data_loss|forced|forceplan|formatfile|format_options|format_type|formsof|forward_only|free_cursors|free_exec_context|fullscan|fulltext|fulltextall|fulltextkey|function|generated|get|geography|geometry|global|go|governor|guid|hadoop|hardening|hash|hashed|header_limit|headeronly|health_check_timeout|hidden|hierarchyid|histogram|histogram_steps|hits_cursors|hits_exec_context|hours|http|identity_value|if|ifnull|ignore_constraints|ignore_dup_key|ignore_dup_row|ignore_triggers|image|immediate|implicit_transactions|include|include_null_values|inflectional|init|initiator|insensitive|insert|instead|int|integer|integrated|intermediate|interval_length_minutes|into|inuse_cursors|inuse_exec_context|io|is|isabout|iso_week|isolation|job_tracker_location|json|keep|keep_nulls|keep_replication|keepdefaults|keepfixed|keepidentity|keepnulls|kerberos|key|key_path|key_source|key_store_provider_name|keyset|kilobytes_per_batch|labelonly|langid|language|last|lastrow|legacy_cardinality_estimation|length|level|lifetime|lineage_80_to_100|lineage_100_to_80|listener_ip|listener_port|load|loadhistory|lob_compaction|local|local_service_name|locate|location|lock_escalation|lock_timeout|lockres|login|login_type|loop|manual|mark_in_use_for_removal|masked|master|max_queue_readers|max_duration|max_outstanding_io_per_volume|maxdop|maxerrors|maxlength|maxtransfersize|max_plans_per_query|max_storage_size_mb|mediadescription|medianame|mediapassword|memogroup|memory_optimized|merge|message|message_forward_size|message_forwarding|microsecond|millisecond|minutes|mirror_address|misses_cursors|misses_exec_context|mixed|modify|money|move|multi_user|must_change|name|namespace|nanosecond|native|native_compilation|nchar|ncharacter|never|new_account|new_broker|newname|next|no|no_browsetable|no_checksum|no_compression|no_infomsgs|no_triggers|no_truncate|nocount|noexec|noexpand|noformat|noinit|nolock|nonatomic|nondurable|none|norecompute|norecovery|noreset|norewind|noskip|not|notification|nounload|now|nowait|ntext|ntlm|numeric|numeric_roundabort|nvarchar|object|objid|oem|offline|old_account|online|operation_mode|openjson|optimistic|option|orc|out|outer|output|over|override|owner|ownership|pad_index|page|page_checksum|page_verify|pagecount|paglock|param|parameter_sniffing|parameter_type_expansion|parameterization|parquet|parseonly|partial|partition|partner|password|path|pause|percentage|permission_set|persisted|period|physical_only|plan_forcing_mode|policy|pool|population|ports|preceding|precision|predicate|presume_abort|primary|primary_role|print|prior|priority |priority_level|private|procedure_name|profile|provider|query_capture_mode|query_governor_cost_limit|query_optimizer_hotfixes|query_store|queue|quoted_identifier|range|raw|rcfile|rc2|rc4|rc4_128|rdbms|read_committed_snapshot|read|read_only|read_write|readcommitted|readcommittedlock|readonly|readpast|readuncommitted|readwrite|real|rebuild|receive|recmodel_70backcomp|recompile|recovery|recursive|recursive_triggers|redo_queue|reject_sample_value|reject_type|reject_value|relative|remote|remote_data_archive|remote_proc_transactions|remote_service_name|remove|removed_cursors|removed_exec_context|reorganize|repeat|repeatable|repeatableread|replica|replicated|replnick_100_to_80|replnickarray_80_to_100|replnickarray_100_to_80|required|required_cursopt|resample|reset|resource|resource_manager_location|restart|restore|restricted_user|resume|retaindays|retention|return|rewind|rewindonly|returns|robust|role|rollup|root|round_robin|route|row|rowdump|rowlock|row_terminator|rows|rows_per_batch|rowsets_only|rowterminator|rowversion|rsa_1024|rsa_2048|rsa_3072|rsa_4096|rsa_512|safe|safety|sample|schemabinding|scoped|scroll|scroll_locks|sddl|secexpr|secondary|secondary_only|secondary_role|secret|security|securityaudit|selective|self|send|sent|sequence|serde_method|serializable|server|service|service_broker|service_name|service_objective|session_timeout|session|sessions|seterror|setopts|sets|shard_map_manager|shard_map_name|sharded|shared_memory|show_statistics|showplan_all|showplan_text|showplan_xml|showplan_xml_with_recompile|shrinkdb|sid|signature|simple|single_blob|single_clob|single_nclob|single_user|singleton|site|size_based_cleanup_mode|skip|smalldatetime|smallint|smallmoney|snapshot|snapshot_import|snapshotrestorephase|soap|softnuma|sort_in_tempdb|sorted_data|sorted_data_reorg|spatial|sql|sql_bigint|sql_binary|sql_bit|sql_char|sql_date|sql_decimal|sql_double|sql_float|sql_guid|sql_handle|sql_longvarbinary|sql_longvarchar|sql_numeric|sql_real|sql_smallint|sql_time|sql_timestamp|sql_tinyint|sql_tsi_day|sql_tsi_frac_second|sql_tsi_hour|sql_tsi_minute|sql_tsi_month|sql_tsi_quarter|sql_tsi_second|sql_tsi_week|sql_tsi_year|sql_type_date|sql_type_time|sql_type_timestamp|sql_varbinary|sql_varchar|sql_variant|sql_wchar|sql_wlongvarchar|ssl|ssl_port|standard|standby|start|start_date|started|stat_header|state|statement|static|statistics|statistics_incremental|statistics_norecompute|statistics_only|statman|stats_stream|status|stop|stop_on_error|stopat|stopatmark|stopbeforemark|stoplist|stopped|string_delimiter|subject|supplemental_logging|supported|suspend|symmetric|synchronous_commit|synonym|sysname|system|system_time|system_versioning|table|tableresults|tablock|tablockx|take|tape|target|target_index|target_partition|tcp|temporal_history_retention|text|textimage_on|then|thesaurus|throw|time|timeout|timestamp|tinyint|to|top|torn_page_detection|track_columns_updated|tran|transaction|transfer|triple_des|triple_des_3key|trustworthy|try|tsql|type|type_desc|type_warning|tzoffset|uid|unbounded|uncommitted|uniqueidentifier|unlimited|unload|unlock|unsafe|updlock|url|use|useplan|useroptions|use_type_default|using|utcdatetime|valid_xml|validation|value|values|varbinary|varchar|verbose|verifyonly|version|view_metadata|virtual_device|visiblity|webmethod|weekday|weight|well_formed_xml|when|widechar|widechar_ansi|widenative|windows|with|within|witness|without|without_array_wrapper|workload|wsdl|xact_abort|xlock|xml|xmlschema|xquery|xsinil|zone)\\b"
        },
        {
          "include": "#source-sql-comments"
        },
        {
          "name": "meta.create.sql",
          "match": "(?i:^\\s*(create(?:\\s+or\\s+replace)?)\\s+(aggregate|conversion|database|domain|function|group|(?:unique\\s+)?index|language|operator class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view)\\s+)(['\"`]?)(\\w+)\\3",
          "captures": {
            "1": {
              "name": "keyword.other.create.sql"
            },
            "2": {
              "name": "keyword.other.sql"
            },
            "4": {
              "name": "entity.name.function.sql"
            }
          }
        },
        {
          "name": "meta.drop.sql",
          "match": "(?i:^\\s*(drop)\\s+(aggregate|conversion|database|domain|function|group|index|language|operator class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view))",
          "captures": {
            "1": {
              "name": "keyword.other.create.sql"
            },
            "2": {
              "name": "keyword.other.sql"
            }
          }
        },
        {
          "name": "meta.drop.sql",
          "match": "(?i:\\s*(drop)\\s+(table)\\s+(\\w+)(\\s+cascade)?\\b)",
          "captures": {
            "1": {
              "name": "keyword.other.create.sql"
            },
            "2": {
              "name": "keyword.other.table.sql"
            },
            "3": {
              "name": "entity.name.function.sql"
            },
            "4": {
              "name": "keyword.other.cascade.sql"
            }
          }
        },
        {
          "name": "meta.alter.sql",
          "match": "(?i:^\\s*(alter)\\s+(aggregate|conversion|database|domain|function|group|index|language|operator class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view)\\s+)",
          "captures": {
            "1": {
              "name": "keyword.other.create.sql"
            },
            "2": {
              "name": "keyword.other.table.sql"
            }
          }
        },
        {
          "match": "(?xi)\n\n\t\t\t\t# normal stuff, capture 1\n\t\t\t\t \\b(bigint|bigserial|bit|boolean|box|bytea|cidr|circle|date|double\\sprecision|inet|int|integer|line|lseg|macaddr|money|oid|path|point|polygon|real|serial|smallint|sysdate|text)\\b\n\n\t\t\t\t# numeric suffix, capture 2 + 3i\n\t\t\t\t|\\b(bit\\svarying|character\\s(?:varying)?|tinyint|var\\schar|float|interval)\\((\\d+)\\)\n\n\t\t\t\t# optional numeric suffix, capture 4 + 5i\n\t\t\t\t|\\b(char|number|varchar\\d?)\\b(?:\\((\\d+)\\))?\n\n\t\t\t\t# special case, capture 6 + 7i + 8i\n\t\t\t\t|\\b(numeric|decimal)\\b(?:\\((\\d+),(\\d+)\\))?\n\n\t\t\t\t# special case, captures 9, 10i, 11\n\t\t\t\t|\\b(times?)\\b(?:\\((\\d+)\\))?(\\swith(?:out)?\\stime\\szone\\b)?\n\n\t\t\t\t# special case, captures 12, 13, 14i, 15\n\t\t\t\t|\\b(timestamp)(?:(s|tz))?\\b(?:\\((\\d+)\\))?(\\s(with|without)\\stime\\szone\\b)?\n\n\t\t\t",
          "captures": {
            "1": {
              "name": "storage.type.sql"
            },
            "2": {
              "name": "storage.type.sql"
            },
            "3": {
              "name": "constant.numeric.sql"
            },
            "4": {
              "name": "storage.type.sql"
            },
            "5": {
              "name": "constant.numeric.sql"
            },
            "6": {
              "name": "storage.type.sql"
            },
            "7": {
              "name": "constant.numeric.sql"
            },
            "8": {
              "name": "constant.numeric.sql"
            },
            "9": {
              "name": "storage.type.sql"
            },
            "10": {
              "name": "constant.numeric.sql"
            },
            "11": {
              "name": "storage.type.sql"
            },
            "12": {
              "name": "storage.type.sql"
            },
            "13": {
              "name": "storage.type.sql"
            },
            "14": {
              "name": "constant.numeric.sql"
            },
            "15": {
              "name": "storage.type.sql"
            }
          }
        },
        {
          "name": "storage.modifier.sql",
          "match": "(?i:\\b((?:primary|foreign)\\s+key|references|on\\s+delete(\\s+cascade)?|check|constraint)\\b)"
        },
        {
          "name": "constant.numeric.sql",
          "match": "\\b\\d+\\b"
        },
        {
          "name": "keyword.other.DML.sql",
          "match": "(?i:\\b(select(\\s+distinct)?|insert\\s+(ignore\\s+)?into|update|delete|from|set|where|group\\s+by|or|like|and|between|union(\\s+all)?|intersect|(except|minus)|having|order\\s+by|limit|offset|(inner|cross)\\s+join|join|straight_join|(left|right|full)(\\s+outer)?\\s+join|natural(\\s+((left|right)(\\s+outer)?|inner))?\\s+join|fetch(\\s+(next|prior|first|last|absolute|relative))?)\\b)"
        },
        {
          "name": "keyword.other.DDL.create.II.sql",
          "match": "(?i:\\b(on|off|(is\\s+(not\\s+)?)?null)\\b)"
        },
        {
          "name": "keyword.other.DML.II.sql",
          "match": "(?i:\\b(values|execute|openquery)\\b)"
        },
        {
          "name": "keyword.other.LUW.sql",
          "match": "(?i:\\b(begin(\\s+work)?|start\\s+transaction|commit(\\s+work)?|rollback(\\s+work)?)\\b)"
        },
        {
          "name": "keyword.other.authorization.sql",
          "match": "(?i:\\b(grant(\\swith\\sgrant\\soption)?|revoke)\\b)"
        },
        {
          "name": "keyword.other.data-integrity.sql",
          "match": "(?i:\\bin\\b)"
        },
        {
          "name": "keyword.other.object-comments.sql",
          "match": "(?i:^\\s*(comment\\s+on\\s+(table|column|aggregate|constraint|database|domain|function|index|operator|rule|schema|sequence|trigger|type|view))\\s+.*?\\s+(is)\\s+)"
        },
        {
          "name": "keyword.other.alias.sql",
          "match": "(?i)\\bAS\\b"
        },
        {
          "name": "keyword.other.order.sql",
          "match": "(?i)\\b(DESC|ASC)\\b"
        },
        {
          "name": "keyword.operator.star.sql",
          "match": "\\*"
        },
        {
          "name": "keyword.operator.comparison.sql",
          "match": "[!<>]?=|<>|<|>"
        },
        {
          "name": "keyword.operator.math.sql",
          "match": "-|\\+|/"
        },
        {
          "name": "keyword.operator.concatenator.sql",
          "match": "\\|\\|"
        },
        {
          "comment": "List of SQL99 built-in functions from http://www.oreilly.com/catalog/sqlnut/chapter/ch04.html",
          "name": "support.function.scalar.sql",
          "match": "(?i)\\b(CURRENT_(DATE|TIME(STAMP)?|USER)|(SESSION|SYSTEM)_USER)\\b"
        },
        {
          "comment": "List of SQL99 built-in functions from http://www.oreilly.com/catalog/sqlnut/chapter/ch04.html",
          "name": "support.function.aggregate.sql",
          "match": "(?i)\\b(AVG|COUNT|MIN|MAX|SUM)(?=\\s*\\()"
        },
        {
          "name": "support.function.string.sql",
          "match": "(?i)\\b(CONCATENATE|CONVERT|LOWER|SUBSTRING|TRANSLATE|TRIM|UPPER)\\b"
        },
        {
          "name": "support.function.other.sql",
          "match": "(?i)\\b[a-z_@][a-z0-9_$@]*(?=\\s*\\()\\b"
        },
        {
          "match": "\\b(\\w+?)\\.(\\.)?(\\w+)\\b",
          "captures": {
            "1": {
              "name": "constant.other.database-name.sql"
            },
            "3": {
              "name": "constant.other.table-name.sql"
            }
          }
        },
        {
          "include": "#source-sql-strings"
        },
        {
          "include": "#source-sql-regexps"
        },
        {
          "comment": "Allow for special ↩ behavior",
          "name": "meta.block.sql",
          "match": "(\\()(\\))",
          "captures": {
            "1": {
              "name": "punctuation.section.scope.begin.sql"
            },
            "2": {
              "name": "punctuation.section.scope.end.sql"
            }
          }
        }
      ]
    },
    "source-sql-comments": {
      "comment": "Does not terminate properly when embedded in CFML string",
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "begin": "(^[ \\t]+)?(?=--)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.sql"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "name": "comment.line.double-dash.sql",
              "begin": "--",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.sql"
                }
              },
              "end": "\\n"
            }
          ]
        },
        {
          "name": "comment.block.sql",
          "begin": "/\\*",
          "end": "\\*/|(?=</cfquery)",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.sql"
            }
          }
        }
      ]
    },
    "source-sql-strings": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "name": "string.quoted.single.sql",
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.sql"
            }
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.sql"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-sql-string_escape"
            }
          ]
        },
        {
          "name": "string.quoted.other.backtick.sql",
          "begin": "`",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.sql"
            }
          },
          "end": "`",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.sql"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-sql-string_escape"
            }
          ]
        },
        {
          "name": "string.quoted.double.sql",
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.sql"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.sql"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-sql-string_interpolation"
            }
          ]
        },
        {
          "name": "string.other.quoted.brackets.sql",
          "begin": "%\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.sql"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.sql"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-sql-string_interpolation"
            }
          ]
        }
      ]
    },
    "source-sql-string_escape": {
      "name": "constant.character.escape.sql",
      "match": "\\\\."
    },
    "source-sql-string_interpolation": {
      "captures": {
        "1": {
          "name": "punctuation.definition.string.begin.sql"
        },
        "3": {
          "name": "punctuation.definition.string.end.sql"
        }
      },
      "name": "string.interpolated.sql",
      "match": "(#\\{)([^\\}]*)(\\})"
    },
    "source-sql-regexps": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "name": "string.regexp.sql",
          "begin": "/(?=\\S.*/)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.sql"
            }
          },
          "end": "/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.sql"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-sql-string_interpolation"
            },
            {
              "name": "constant.character.escape.slash.sql",
              "match": "\\\\/"
            }
          ]
        },
        {
          "comment": "We should probably handle nested bracket pairs!?! -- Allan",
          "name": "string.regexp.modr.sql",
          "begin": "%r\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.sql"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.sql"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-sql-string_interpolation"
            }
          ]
        }
      ]
    },
    "source-js": {
      "comment": "https://github.com/Microsoft/vscode/commit/7c5c8d59db0c34b49e8ad47a120ebf01744529ba",
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "include": "#source-js-statements"
        }
      ]
    },
    "source-js-statements": {
      "patterns": [
        {
          "include": "#source-js-string"
        },
        {
          "include": "#source-js-template"
        },
        {
          "include": "#source-js-comment"
        },
        {
          "include": "#source-js-declaration"
        },
        {
          "include": "#source-js-control-statement"
        },
        {
          "include": "#source-js-after-operator-block-as-object-literal"
        },
        {
          "include": "#source-js-decl-block"
        },
        {
          "include": "#source-js-expression"
        },
        {
          "include": "#source-js-punctuation-semicolon"
        }
      ]
    },
    "source-js-declaration": {
      "patterns": [
        {
          "include": "#source-js-decorator"
        },
        {
          "include": "#source-js-var-expr"
        },
        {
          "include": "#source-js-function-declaration"
        },
        {
          "include": "#source-js-class-declaration"
        },
        {
          "include": "#source-js-interface-declaration"
        },
        {
          "include": "#source-js-enum-declaration"
        },
        {
          "include": "#source-js-namespace-declaration"
        },
        {
          "include": "#source-js-type-alias-declaration"
        },
        {
          "include": "#source-js-import-equals-declaration"
        },
        {
          "include": "#source-js-import-declaration"
        },
        {
          "include": "#source-js-export-declaration"
        }
      ]
    },
    "source-js-control-statement": {
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "include": "#source-js-switch-statement"
        },
        {
          "include": "#source-js-for-loop"
        },
        {
          "name": "keyword.control.trycatch.js",
          "match": "(?<!\\.|\\$)\\b(catch|finally|throw|try)\\b(?!\\$|\\.)"
        },
        {
          "name": "keyword.control.loop.js",
          "match": "(?<!\\.|\\$)\\b(break|continue|do|goto|while)\\b(?!\\$|\\.)"
        },
        {
          "name": "keyword.control.flow.js",
          "match": "(?<!\\.|\\$)\\b(return)\\b(?!\\$|\\.)"
        },
        {
          "name": "keyword.control.switch.js",
          "match": "(?<!\\.|\\$)\\b(case|default|switch)\\b(?!\\$|\\.)"
        },
        {
          "name": "keyword.control.conditional.js",
          "match": "(?<!\\.|\\$)\\b(else|if)\\b(?!\\$|\\.)"
        },
        {
          "name": "keyword.control.with.js",
          "match": "(?<!\\.|\\$)\\b(with)\\b(?!\\$|\\.)"
        },
        {
          "name": "keyword.other.debugger.js",
          "match": "(?<!\\.|\\$)\\b(debugger)\\b(?!\\$|\\.)"
        },
        {
          "name": "storage.modifier.js",
          "match": "(?<!\\.|\\$)\\b(declare)\\b(?!\\$|\\.)"
        }
      ]
    },
    "source-js-switch-statement": {
      "name": "switch-statement.expr.js",
      "begin": "(?<!\\.|\\$)(?=\\bswitch\\s*\\()",
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.js"
        }
      },
      "patterns": [
        {
          "name": "switch-expression.expr.js",
          "begin": "(?<!\\.|\\$)\\b(switch)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.switch.js"
            },
            "2": {
              "name": "meta.brace.round.js"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.js"
            }
          },
          "patterns": [
            {
              "include": "#source-js-expression"
            }
          ]
        },
        {
          "name": "switch-block.expr.js",
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.block.js"
            }
          },
          "end": "(?=\\})",
          "patterns": [
            {
              "name": "case-clause.expr.js",
              "begin": "(?<!\\.|\\$)\\b(case|default(?=:))\\b(?!\\$|\\.)",
              "beginCaptures": {
                "1": {
                  "name": "keyword.control.switch.js"
                }
              },
              "end": ":",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.section.case-statement.js"
                }
              },
              "patterns": [
                {
                  "include": "#source-js-expression"
                }
              ]
            },
            {
              "include": "#source-js-statements"
            }
          ]
        }
      ]
    },
    "source-js-for-loop": {
      "begin": "(?<!\\.|\\$)\\b(for)(?:\\s+(await))?\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.loop.js"
        },
        "2": {
          "name": "keyword.control.loop.js"
        },
        "3": {
          "name": "meta.brace.round.js"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#source-js-var-expr"
        },
        {
          "include": "#source-js-expression"
        },
        {
          "include": "#source-js-punctuation-semicolon"
        }
      ]
    },
    "source-js-expression": {
      "patterns": [
        {
          "include": "#source-js-expressionWithoutIdentifiers"
        },
        {
          "include": "#source-js-identifiers"
        },
        {
          "include": "#source-js-expressionPunctuations"
        }
      ]
    },
    "source-js-expressionWithoutIdentifiers": {
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "include": "#source-js-string"
        },
        {
          "include": "#source-js-regex"
        },
        {
          "include": "#source-js-template"
        },
        {
          "include": "#source-js-comment"
        },
        {
          "include": "#source-js-function-expression"
        },
        {
          "include": "#source-js-class-expression"
        },
        {
          "include": "#source-js-arrow-function"
        },
        {
          "include": "#source-js-ternary-expression"
        },
        {
          "include": "#source-js-new-expr"
        },
        {
          "include": "#source-js-object-literal"
        },
        {
          "include": "#source-js-expression-operators"
        },
        {
          "include": "#source-js-function-call"
        },
        {
          "include": "#source-js-literal"
        },
        {
          "include": "#source-js-support-objects"
        },
        {
          "include": "#source-js-paren-expression"
        }
      ]
    },
    "source-js-expressionPunctuations": {
      "patterns": [
        {
          "include": "#source-js-punctuation-comma"
        },
        {
          "include": "#source-js-punctuation-accessor"
        }
      ]
    },
    "source-js-decorator": {
      "name": "meta.decorator.js",
      "begin": "(?<!\\.|\\$)\\@",
      "beginCaptures": {
        "0": {
          "name": "punctuation.decorator.js"
        }
      },
      "end": "(?=\\s)",
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "include": "#source-js-expression"
        }
      ]
    },
    "source-js-var-expr": {
      "name": "meta.var.expr.js",
      "begin": "(?<!\\.|\\$)(?:(\\bexport)\\s+)?\\b(var|let|const(?!\\s+enum\\b))\\b(?!\\$|\\.)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.export.js"
        },
        "2": {
          "name": "storage.type.js"
        }
      },
      "end": "(?=$|^|;|}|(\\s+(of|in)\\s+))",
      "patterns": [
        {
          "include": "#source-js-destructuring-variable"
        },
        {
          "include": "#source-js-var-single-variable"
        },
        {
          "include": "#source-js-variable-initializer"
        },
        {
          "include": "#source-js-comment"
        },
        {
          "begin": "(,)\\s*(?!\\S)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.separator.comma.js"
            }
          },
          "end": "(?<!,)((?==|;|}|(\\s+(of|in)\\s+)|^\\s*$))|((?<=\\S)(?=\\s*$))",
          "patterns": [
            {
              "include": "#source-js-comment"
            },
            {
              "include": "#source-js-destructuring-variable"
            },
            {
              "include": "#source-js-var-single-variable"
            },
            {
              "include": "#source-js-punctuation-comma"
            }
          ]
        },
        {
          "include": "#source-js-punctuation-comma"
        }
      ]
    },
    "source-js-var-single-variable": {
      "patterns": [
        {
          "name": "meta.var-single-variable.expr.js",
          "begin": "(?x)([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    # sure shot arrow functions even if => is on new line\n(\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                 # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                            # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                        # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))([^=<>]|=[^<])*\\>)*>\\s*)?                                                           # typeparameters\n  \\(\\s*([_$[:alpha:]\\{\\[]([^()]|\\((\\s*[^()]*)?\\))*)?\\)                          # parameteres\n  (\\s*:\\s*([^<>\\(\\)]|\\<[^<>]+\\>|\\([^\\(\\)]+\\))+)?                                # return type\n  \\s*=>                                                                         # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>\n(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)))",
          "beginCaptures": {
            "1": {
              "name": "meta.definition.variable.js entity.name.function.js"
            }
          },
          "end": "(?=$|^|[;,=}]|(\\s+(of|in)\\s+))",
          "patterns": [
            {
              "include": "#source-js-var-single-variable-type-annotation"
            }
          ]
        },
        {
          "name": "meta.var-single-variable.expr.js",
          "begin": "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])",
          "beginCaptures": {
            "1": {
              "name": "meta.definition.variable.js variable.other.constant.js"
            }
          },
          "end": "(?=$|^|[;,=}]|(\\s+(of|in)\\s+))",
          "patterns": [
            {
              "include": "#source-js-var-single-variable-type-annotation"
            }
          ]
        },
        {
          "name": "meta.var-single-variable.expr.js",
          "begin": "([_$[:alpha:]][_$[:alnum:]]*)",
          "beginCaptures": {
            "1": {
              "name": "meta.definition.variable.js variable.other.readwrite.js"
            }
          },
          "end": "(?=$|^|[;,=}]|(\\s+(of|in)\\s+))",
          "patterns": [
            {
              "include": "#source-js-var-single-variable-type-annotation"
            }
          ]
        }
      ]
    },
    "source-js-var-single-variable-type-annotation": {
      "patterns": [
        {
          "include": "#source-js-type-annotation"
        },
        {
          "include": "#source-js-string"
        },
        {
          "include": "#source-js-comment"
        }
      ]
    },
    "source-js-variable-initializer": {
      "patterns": [
        {
          "begin": "(?<!=|!)(=)(?!=)(?=\\s*\\S)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.assignment.js"
            }
          },
          "end": "(?=$|^|[,);}\\]])",
          "patterns": [
            {
              "include": "#source-js-expression"
            }
          ]
        },
        {
          "begin": "(?<!=|!)(=)(?!=)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.assignment.js"
            }
          },
          "end": "(?=[,);}\\]])|(?=^\\s*$)|(?<=\\S)(?<!=)(?=\\s*$)",
          "patterns": [
            {
              "include": "#source-js-expression"
            }
          ]
        }
      ]
    },
    "source-js-function-declaration": {
      "name": "meta.function.js",
      "begin": "(?<!\\.|\\$)\\b(?:(export)\\s+)?(?:(async)\\s+)?(function\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.export.js"
        },
        "2": {
          "name": "storage.modifier.async.js"
        },
        "3": {
          "name": "storage.type.function.js"
        },
        "4": {
          "name": "keyword.generator.asterisk.js"
        },
        "5": {
          "name": "meta.definition.function.js entity.name.function.js"
        }
      },
      "end": "(?=$|^|;)|(?<=\\})",
      "patterns": [
        {
          "include": "#source-js-function-body"
        }
      ]
    },
    "source-js-function-expression": {
      "name": "meta.function.expression.js",
      "begin": "(?<!\\.|\\$)\\b(?:(async)\\s+)?(function\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.async.js"
        },
        "2": {
          "name": "storage.type.function.js"
        },
        "3": {
          "name": "keyword.generator.asterisk.js"
        },
        "4": {
          "name": "meta.definition.function.js entity.name.function.js"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#source-js-function-body"
        }
      ]
    },
    "source-js-function-body": {
      "patterns": [
        {
          "include": "#source-js-comment"
        },
        {
          "include": "#source-js-type-parameters"
        },
        {
          "include": "#source-js-function-parameters"
        },
        {
          "include": "#source-js-return-type"
        },
        {
          "include": "#source-js-decl-block"
        }
      ]
    },
    "source-js-function-parameters": {
      "name": "meta.parameters.js",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.parameters.begin.js"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.parameters.end.js"
        }
      },
      "patterns": [
        {
          "include": "#source-js-comment"
        },
        {
          "include": "#source-js-decorator"
        },
        {
          "include": "#source-js-destructuring-parameter"
        },
        {
          "include": "#source-js-parameter-name"
        },
        {
          "include": "#source-js-type-annotation"
        },
        {
          "include": "#source-js-variable-initializer"
        },
        {
          "name": "punctuation.separator.parameter.js",
          "match": ","
        }
      ]
    },
    "source-js-parameter-name": {
      "patterns": [
        {
          "match": "\\s*\\b(public|protected|private|readonly)(?=\\s+(public|protected|private|readonly)\\s+)",
          "captures": {
            "1": {
              "name": "storage.modifier.js"
            }
          }
        },
        {
          "match": "(?x)(?:\\s*\\b(public|private|protected|readonly)\\s+)?(\\.\\.\\.)?\\s*(?<!=|:)(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\s*(\\??)(?=\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    # sure shot arrow functions even if => is on new line\n(\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                 # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                            # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                        # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))([^=<>]|=[^<])*\\>)*>\\s*)?                                                           # typeparameters\n  \\(\\s*([_$[:alpha:]\\{\\[]([^()]|\\((\\s*[^()]*)?\\))*)?\\)                          # parameteres\n  (\\s*:\\s*([^<>\\(\\)]|\\<[^<>]+\\>|\\([^\\(\\)]+\\))+)?                                # return type\n  \\s*=>                                                                         # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>\n(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)))",
          "captures": {
            "1": {
              "name": "storage.modifier.js"
            },
            "2": {
              "name": "keyword.operator.rest.js"
            },
            "3": {
              "name": "entity.name.function.js variable.language.this.js"
            },
            "4": {
              "name": "entity.name.function.js"
            },
            "5": {
              "name": "keyword.operator.optional.js"
            }
          }
        },
        {
          "match": "(?:\\s*\\b(public|private|protected|readonly)\\s+)?(\\.\\.\\.)?\\s*(?<!=|:)(?:((?<!\\.|\\$)\\bthis\\b(?!\\.|\\$))|([_$[:alpha:]][_$[:alnum:]]*))\\s*(\\??)",
          "captures": {
            "1": {
              "name": "storage.modifier.js"
            },
            "2": {
              "name": "keyword.operator.rest.js"
            },
            "3": {
              "name": "variable.parameter.js variable.language.this.js"
            },
            "4": {
              "name": "variable.parameter.js"
            },
            "5": {
              "name": "keyword.operator.optional.js"
            }
          }
        }
      ]
    },
    "source-js-arrow-function": {
      "patterns": [
        {
          "name": "meta.arrow.js",
          "match": "(?:(?<!\\.|\\$)(\\basync)\\s+)?([_$[:alpha:]][_$[:alnum:]]*)\\s*(?==>)",
          "captures": {
            "1": {
              "name": "storage.modifier.async.js"
            },
            "2": {
              "name": "variable.parameter.js"
            }
          }
        },
        {
          "name": "meta.arrow.js",
          "begin": "(?x) (?:\n  (?<!\\.|\\$)(\\basync)\n)? ((?<![})!\\]])\\s*\n  (?=\n    # sure shot arrow functions even if => is on new line\n(\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                 # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                            # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                        # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))([^=<>]|=[^<])*\\>)*>\\s*)?                                                           # typeparameters\n  \\(\\s*([_$[:alpha:]\\{\\[]([^()]|\\((\\s*[^()]*)?\\))*)?\\)                          # parameteres\n  (\\s*:\\s*([^<>\\(\\)]|\\<[^<>]+\\>|\\([^\\(\\)]+\\))+)?                                # return type\n  \\s*=>                                                                         # arrow operator\n)\n  )\n)",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.async.js"
            }
          },
          "end": "(?==>|\\{|(^\\s*(export|function|class|interface|let|var|const|import|enum|namespace|module|type|abstract|declare)\\s+))",
          "patterns": [
            {
              "include": "#source-js-comment"
            },
            {
              "include": "#source-js-type-parameters"
            },
            {
              "include": "#source-js-function-parameters"
            },
            {
              "include": "#source-js-arrow-return-type"
            }
          ]
        },
        {
          "name": "meta.arrow.js",
          "begin": "=>",
          "beginCaptures": {
            "0": {
              "name": "storage.type.function.arrow.js"
            }
          },
          "end": "(?<=\\}|\\S)(?<!=>)|((?!\\{)(?=\\S))",
          "patterns": [
            {
              "include": "#source-js-decl-block"
            },
            {
              "include": "#source-js-expression"
            }
          ]
        }
      ]
    },
    "source-js-docblock": {
      "patterns": [
        {
          "match": "(?x)\n((@)(?:access|api))\n\\s+\n(private|protected|public)\n\\b",
          "captures": {
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.block.tag.jsdoc"
            },
            "3": {
              "name": "constant.language.access-type.jsdoc"
            }
          }
        },
        {
          "match": "(?x)\n((@)author)\n\\s+\n(\n  [^@\\s<>*/]\n  (?:[^@<>*/]|\\*[^/])*\n)\n(?:\n  \\s*\n  (<)\n  ([^>\\s]+)\n  (>)\n)?",
          "captures": {
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.block.tag.jsdoc"
            },
            "3": {
              "name": "entity.name.type.instance.jsdoc"
            },
            "4": {
              "name": "punctuation.definition.bracket.angle.begin.jsdoc"
            },
            "5": {
              "name": "constant.other.email.link.underline.jsdoc"
            },
            "6": {
              "name": "punctuation.definition.bracket.angle.end.jsdoc"
            }
          }
        },
        {
          "match": "(?x)\n((@)borrows) \\s+\n((?:[^@\\s*/]|\\*[^/])+)    # <that namepath>\n\\s+ (as) \\s+              # as\n((?:[^@\\s*/]|\\*[^/])+)    # <this namepath>",
          "captures": {
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.block.tag.jsdoc"
            },
            "3": {
              "name": "entity.name.type.instance.jsdoc"
            },
            "4": {
              "name": "keyword.operator.control.jsdoc"
            },
            "5": {
              "name": "entity.name.type.instance.jsdoc"
            }
          }
        },
        {
          "name": "meta.example.jsdoc",
          "begin": "((@)example)\\s+",
          "end": "(?=@|\\*/)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.block.tag.jsdoc"
            }
          },
          "patterns": [
            {
              "match": "^\\s\\*\\s+"
            },
            {
              "begin": "\\G(<)caption(>)",
              "beginCaptures": {
                "0": {
                  "name": "entity.name.tag.inline.jsdoc"
                },
                "1": {
                  "name": "punctuation.definition.bracket.angle.begin.jsdoc"
                },
                "2": {
                  "name": "punctuation.definition.bracket.angle.end.jsdoc"
                }
              },
              "contentName": "constant.other.description.jsdoc",
              "end": "(</)caption(>)|(?=\\*/)",
              "endCaptures": {
                "0": {
                  "name": "entity.name.tag.inline.jsdoc"
                },
                "1": {
                  "name": "punctuation.definition.bracket.angle.begin.jsdoc"
                },
                "2": {
                  "name": "punctuation.definition.bracket.angle.end.jsdoc"
                }
              }
            },
            {
              "match": "[^\\s@*](?:[^*]|\\*[^/])*",
              "captures": {
                "0": {
                  "name": "source.embedded.js"
                }
              }
            }
          ]
        },
        {
          "match": "(?x) ((@)kind) \\s+ (class|constant|event|external|file|function|member|mixin|module|namespace|typedef) \\b",
          "captures": {
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.block.tag.jsdoc"
            },
            "3": {
              "name": "constant.language.symbol-type.jsdoc"
            }
          }
        },
        {
          "match": "(?x)\n((@)see)\n\\s+\n(?:\n  # URL\n  (\n    (?=https?://)\n    (?:[^\\s*]|\\*[^/])+\n  )\n  |\n  # JSDoc namepath\n  (\n    (?!\n      # Avoid matching bare URIs (also acceptable as links)\n      https?://\n      |\n      # Avoid matching {@inline tags}; we match those below\n      (?:\\[[^\\[\\]]*\\])? # Possible description [preceding]{@tag}\n      {@(?:link|linkcode|linkplain|tutorial)\\b\n    )\n    # Matched namepath\n    (?:[^@\\s*/]|\\*[^/])+\n  )\n)",
          "captures": {
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.block.tag.jsdoc"
            },
            "3": {
              "name": "variable.other.link.underline.jsdoc"
            },
            "4": {
              "name": "entity.name.type.instance.jsdoc"
            }
          }
        },
        {
          "match": "(?x)\n((@)template)\n\\s+\n# One or more valid identifiers\n(\n  [A-Za-z_$]         # First character: non-numeric word character\n  [\\w$.\\[\\]]*        # Rest of identifier\n  (?:                # Possible list of additional identifiers\n    \\s* , \\s*\n    [A-Za-z_$]\n    [\\w$.\\[\\]]*\n  )*\n)",
          "captures": {
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.block.tag.jsdoc"
            },
            "3": {
              "name": "variable.other.jsdoc"
            }
          }
        },
        {
          "match": "(?x)\n(\n  (@)\n  (?:arg|argument|const|constant|member|namespace|param|var)\n)\n\\s+\n(\n  [A-Za-z_$]\n  [\\w$.\\[\\]]*\n)",
          "captures": {
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.block.tag.jsdoc"
            },
            "3": {
              "name": "variable.other.jsdoc"
            }
          }
        },
        {
          "begin": "((@)typedef)\\s+(?={)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.block.tag.jsdoc"
            }
          },
          "end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
          "patterns": [
            {
              "include": "#source-js-jsdoctype"
            },
            {
              "name": "entity.name.type.instance.jsdoc",
              "match": "(?:[^@\\s*/]|\\*[^/])+"
            }
          ]
        },
        {
          "begin": "((@)(?:arg|argument|const|constant|member|namespace|param|prop|property|var))\\s+(?={)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.block.tag.jsdoc"
            }
          },
          "end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
          "patterns": [
            {
              "include": "#source-js-jsdoctype"
            },
            {
              "name": "variable.other.jsdoc",
              "match": "([A-Za-z_$][\\w$.\\[\\]]*)"
            },
            {
              "name": "variable.other.jsdoc",
              "match": "(?x)\n(\\[)\\s*\n[\\w$]+\n(?:\n  (?:\\[\\])?                                        # Foo[ ].bar properties within an array\n  \\.                                                # Foo.Bar namespaced parameter\n  [\\w$]+\n)*\n(?:\n  \\s*\n  (=)                                                # [foo=bar] Default parameter value\n  \\s*\n  (\n    # The inner regexes are to stop the match early at */ and to not stop at escaped quotes\n    (?>\n      \"(?:(?:\\*(?!/))|(?:\\\\(?!\"))|[^*\\\\])*?\" |                      # [foo=\"bar\"] Double-quoted\n      '(?:(?:\\*(?!/))|(?:\\\\(?!'))|[^*\\\\])*?' |                      # [foo='bar'] Single-quoted\n      \\[ (?:(?:\\*(?!/))|[^*])*? \\] |                                # [foo=[1,2]] Array literal\n      (?:(?:\\*(?!/))|\\s(?!\\s*\\])|\\[.*?(?:\\]|(?=\\*/))|[^*\\s\\[\\]])*   # Everything else\n    )*\n  )\n)?\n\\s*(?:(\\])((?:[^*\\s]|\\*[^\\s/])+)?|(?=\\*/))",
              "captures": {
                "1": {
                  "name": "punctuation.definition.optional-value.begin.bracket.square.jsdoc"
                },
                "2": {
                  "name": "keyword.operator.assignment.jsdoc"
                },
                "3": {
                  "name": "source.embedded.js"
                },
                "4": {
                  "name": "punctuation.definition.optional-value.end.bracket.square.jsdoc"
                },
                "5": {
                  "name": "invalid.illegal.syntax.jsdoc"
                }
              }
            }
          ]
        },
        {
          "begin": "(?x)\n(\n  (@)\n  (?:define|enum|exception|export|extends|lends|implements|modifies\n  |namespace|private|protected|returns?|suppress|this|throws|type\n  |yields?)\n)\n\\s+(?={)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.block.tag.jsdoc"
            }
          },
          "end": "(?=\\s|\\*/|[^{}\\[\\]A-Za-z_$])",
          "patterns": [
            {
              "include": "#source-js-jsdoctype"
            }
          ]
        },
        {
          "match": "(?x)\n(\n  (@)\n  (?:alias|augments|callback|constructs|emits|event|fires|exports?\n  |extends|external|function|func|host|lends|listens|interface|memberof!?\n  |method|module|mixes|mixin|name|requires|see|this|typedef|uses)\n)\n\\s+\n(\n  (?:\n    [^{}@\\s*] | \\*[^/]\n  )+\n)",
          "captures": {
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.block.tag.jsdoc"
            },
            "3": {
              "name": "entity.name.type.instance.jsdoc"
            }
          }
        },
        {
          "begin": "((@)(?:default(?:value)?|license|version))\\s+(([''\"]))",
          "beginCaptures": {
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.block.tag.jsdoc"
            },
            "3": {
              "name": "variable.other.jsdoc"
            },
            "4": {
              "name": "punctuation.definition.string.begin.jsdoc"
            }
          },
          "contentName": "variable.other.jsdoc",
          "end": "(\\3)|(?=$|\\*/)",
          "endCaptures": {
            "0": {
              "name": "variable.other.jsdoc"
            },
            "1": {
              "name": "punctuation.definition.string.end.jsdoc"
            }
          }
        },
        {
          "match": "((@)(?:default(?:value)?|license|tutorial|variation|version))\\s+([^\\s*]+)",
          "captures": {
            "1": {
              "name": "storage.type.class.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.block.tag.jsdoc"
            },
            "3": {
              "name": "variable.other.jsdoc"
            }
          }
        },
        {
          "name": "storage.type.class.jsdoc",
          "match": "(?x) (@) (?:abstract|access|alias|api|arg|argument|async|attribute|augments|author|beta|borrows|bubbles |callback|chainable|class|classdesc|code|config|const|constant|constructor|constructs|copyright |default|defaultvalue|define|deprecated|desc|description|dict|emits|enum|event|example|exception |exports?|extends|extension(?:_?for)?|external|externs|file|fileoverview|final|fires|for|func |function|generator|global|hideconstructor|host|ignore|implements|implicitCast|inherit[Dd]oc |inner|instance|interface|internal|kind|lends|license|listens|main|member|memberof!?|method |mixes|mixins?|modifies|module|name|namespace|noalias|nocollapse|nocompile|nosideeffects |override|overview|package|param|polymer(?:Behavior)?|preserve|private|prop|property|protected |public|read[Oo]nly|record|require[ds]|returns?|see|since|static|struct|submodule|summary |suppress|template|this|throws|todo|tutorial|type|typedef|unrestricted|uses|var|variation |version|virtual|writeOnce|yields?) \\b",
          "captures": {
            "1": {
              "name": "punctuation.definition.block.tag.jsdoc"
            }
          }
        },
        {
          "include": "#source-js-inline-tags"
        }
      ]
    },
    "source-js-brackets": {
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "begin": "{",
          "end": "}|(?=\\*/)",
          "patterns": [
            {
              "include": "#source-js-brackets"
            }
          ]
        },
        {
          "begin": "\\[",
          "end": "\\]|(?=\\*/)",
          "patterns": [
            {
              "include": "#source-js-brackets"
            }
          ]
        }
      ]
    },
    "source-js-inline-tags": {
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "name": "constant.other.description.jsdoc",
          "match": "(\\[)[^\\]]+(\\])(?={@(?:link|linkcode|linkplain|tutorial))",
          "captures": {
            "1": {
              "name": "punctuation.definition.bracket.square.begin.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.bracket.square.end.jsdoc"
            }
          }
        },
        {
          "name": "entity.name.type.instance.jsdoc",
          "begin": "({)((@)(?:link(?:code|plain)?|tutorial))\\s*",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.bracket.curly.begin.jsdoc"
            },
            "2": {
              "name": "storage.type.class.jsdoc"
            },
            "3": {
              "name": "punctuation.definition.inline.tag.jsdoc"
            }
          },
          "end": "}|(?=\\*/)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.bracket.curly.end.jsdoc"
            }
          },
          "patterns": [
            {
              "match": "\\G((?=https?://)(?:[^|}\\s*]|\\*[/])+)(\\|)?",
              "captures": {
                "1": {
                  "name": "variable.other.link.underline.jsdoc"
                },
                "2": {
                  "name": "punctuation.separator.pipe.jsdoc"
                }
              }
            },
            {
              "match": "\\G((?:[^{}@\\s|*]|\\*[^/])+)(\\|)?",
              "captures": {
                "1": {
                  "name": "variable.other.description.jsdoc"
                },
                "2": {
                  "name": "punctuation.separator.pipe.jsdoc"
                }
              }
            }
          ]
        }
      ]
    },
    "source-js-jsdoctype": {
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "name": "invalid.illegal.type.jsdoc",
          "match": "\\G{(?:[^}*]|\\*[^/}])+$"
        },
        {
          "begin": "\\G({)",
          "beginCaptures": {
            "0": {
              "name": "entity.name.type.instance.jsdoc"
            },
            "1": {
              "name": "punctuation.definition.bracket.curly.begin.jsdoc"
            }
          },
          "contentName": "entity.name.type.instance.jsdoc",
          "end": "((}))\\s*|(?=\\*/)",
          "endCaptures": {
            "1": {
              "name": "entity.name.type.instance.jsdoc"
            },
            "2": {
              "name": "punctuation.definition.bracket.curly.end.jsdoc"
            }
          },
          "patterns": [
            {
              "include": "#source-js-brackets"
            }
          ]
        }
      ]
    },
    "source-js-decl-block": {
      "name": "meta.block.js",
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.block.js"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.js"
        }
      },
      "patterns": [
        {
          "include": "#source-js-statements"
        }
      ]
    },
    "source-js-after-operator-block-as-object-literal": {
      "name": "meta.objectliteral.js",
      "begin": "(?<=[=(,\\[?+!]|await|return|yield|throw|in|of|typeof|&&|\\|\\||\\*)\\s*(\\{)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.block.js"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.js"
        }
      },
      "patterns": [
        {
          "include": "#source-js-object-member"
        }
      ]
    },
    "source-js-object-literal": {
      "name": "meta.objectliteral.js",
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.block.js"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.js"
        }
      },
      "patterns": [
        {
          "include": "#source-js-object-member"
        }
      ]
    },
    "source-js-object-member": {
      "patterns": [
        {
          "include": "#source-js-comment"
        },
        {
          "include": "#source-js-object-literal-method-declaration"
        },
        {
          "name": "meta.object.member.js meta.object-literal.key.js",
          "begin": "(?=\\[)",
          "end": "(?=:)",
          "patterns": [
            {
              "include": "#source-js-array-literal"
            }
          ]
        },
        {
          "name": "meta.object.member.js meta.object-literal.key.js",
          "begin": "(?=[\\'\\\"])",
          "end": "(?=:)",
          "patterns": [
            {
              "include": "#source-js-string"
            }
          ]
        },
        {
          "name": "meta.object.member.js",
          "match": "(?![_$[:alpha:]])([[:digit:]]+)\\s*(?=:)",
          "captures": {
            "0": {
              "name": "meta.object-literal.key.js"
            },
            "1": {
              "name": "constant.numeric.decimal.js"
            }
          }
        },
        {
          "name": "meta.object.member.js",
          "match": "(?x)(?:([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=:\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    # sure shot arrow functions even if => is on new line\n(\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                 # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                            # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                        # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))([^=<>]|=[^<])*\\>)*>\\s*)?                                                           # typeparameters\n  \\(\\s*([_$[:alpha:]\\{\\[]([^()]|\\((\\s*[^()]*)?\\))*)?\\)                          # parameteres\n  (\\s*:\\s*([^<>\\(\\)]|\\<[^<>]+\\>|\\([^\\(\\)]+\\))+)?                                # return type\n  \\s*=>                                                                         # arrow operator\n)\n  ))\n)))",
          "captures": {
            "0": {
              "name": "meta.object-literal.key.js"
            },
            "1": {
              "name": "entity.name.function.js"
            }
          }
        },
        {
          "name": "meta.object.member.js",
          "match": "(?:[_$[:alpha:]][_$[:alnum:]]*)\\s*(?=:)",
          "captures": {
            "0": {
              "name": "meta.object-literal.key.js"
            }
          }
        },
        {
          "name": "meta.object.member.js",
          "begin": "\\.\\.\\.",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.spread.js"
            }
          },
          "end": "(?=,|\\})",
          "patterns": [
            {
              "include": "#source-js-expression"
            }
          ]
        },
        {
          "name": "meta.object.member.js",
          "match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=,|\\}|$)",
          "captures": {
            "1": {
              "name": "variable.other.readwrite.js"
            }
          }
        },
        {
          "name": "meta.object.member.js",
          "begin": "(?=[_$[:alpha:]][_$[:alnum:]]*\\s*=)",
          "end": "(?=,|\\}|$)",
          "patterns": [
            {
              "include": "#source-js-expression"
            }
          ]
        },
        {
          "name": "meta.object.member.js",
          "begin": ":",
          "beginCaptures": {
            "0": {
              "name": "meta.object-literal.key.js punctuation.separator.key-value.js"
            }
          },
          "end": "(?=,|\\})",
          "patterns": [
            {
              "include": "#source-js-expression"
            }
          ]
        },
        {
          "include": "#source-js-punctuation-comma"
        }
      ]
    },
    "source-js-ternary-expression": {
      "begin": "(\\?)",
      "beginCaptures": {
        "0": {
          "name": "keyword.operator.ternary.js"
        }
      },
      "end": "(:)",
      "endCaptures": {
        "0": {
          "name": "keyword.operator.ternary.js"
        }
      },
      "patterns": [
        {
          "include": "#source-js-expression"
        }
      ]
    },
    "source-js-function-call": {
      "begin": "(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\.\\s*)*|(\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*)\\s*(<\\s*(([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))([^<>\\(]|(\\([^\\(\\)]*\\))|\\<\\s*(([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))([^<>\\(]|(\\([^\\(\\)]*\\)))*\\>)*>\\s*)?\\()",
      "end": "(?<=\\))(?!(([_$[:alpha:]][_$[:alnum:]]*\\s*\\.\\s*)*|(\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*)\\s*(<\\s*(([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))([^<>\\(]|(\\([^\\(\\)]*\\))|\\<\\s*(([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))([^<>\\(]|(\\([^\\(\\)]*\\)))*\\>)*>\\s*)?\\()",
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "name": "meta.function-call.js",
          "begin": "(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\.\\s*)*|(\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*))",
          "end": "(?=\\s*(<\\s*(([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))([^<>\\(]|(\\([^\\(\\)]*\\))|\\<\\s*(([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))([^<>\\(]|(\\([^\\(\\)]*\\)))*\\>)*>\\s*)?\\()",
          "patterns": [
            {
              "include": "#source-js-literal"
            },
            {
              "include": "#source-js-support-objects"
            },
            {
              "include": "#source-js-object-identifiers"
            },
            {
              "include": "#source-js-punctuation-accessor"
            },
            {
              "name": "keyword.operator.expression.import.js",
              "match": "(?![\\.\\$])\\bimport(?=\\s*[\\(]\\s*[\\\"\\'\\`])"
            },
            {
              "name": "entity.name.function.js",
              "match": "([_$[:alpha:]][_$[:alnum:]]*)"
            }
          ]
        },
        {
          "include": "#source-js-comment"
        },
        {
          "name": "meta.type.parameters.js",
          "begin": "\\<",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.typeparameters.begin.js"
            }
          },
          "end": "\\>",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.typeparameters.end.js"
            }
          },
          "patterns": [
            {
              "include": "#source-js-type"
            },
            {
              "include": "#source-js-punctuation-comma"
            }
          ]
        },
        {
          "include": "#source-js-paren-expression"
        }
      ]
    },
    "source-js-new-expr": {
      "name": "new.expr.js",
      "begin": "(?<!\\.|\\$)\\b(new)\\b(?!\\$|\\.)",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.new.js"
        }
      },
      "end": "(?<=\\))|(?=[;),}\\]]|$|((?<!\\.|\\$)\\bnew\\b(?!\\$|\\.))|((?<!\\.|\\$)\\bfunction((\\s+[_$[:alpha:]][_$[:alnum:]]*)|(\\s*[\\(]))))",
      "patterns": [
        {
          "include": "#source-js-paren-expression"
        },
        {
          "include": "#source-js-class-declaration"
        },
        {
          "include": "#source-js-type"
        }
      ]
    },
    "source-js-paren-expression": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.round.js"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "include": "#source-js-expression"
        },
        {
          "include": "#source-js-punctuation-comma"
        }
      ]
    },
    "source-js-expression-operators": {
      "patterns": [
        {
          "name": "keyword.control.flow.js",
          "match": "(?<!\\.|\\$)\\b(await)\\b(?!\\$|\\.)"
        },
        {
          "match": "(?<!\\.|\\$)\\b(yield)\\b(?!\\$|\\.)(?:\\s*(\\*))?",
          "captures": {
            "1": {
              "name": "keyword.control.flow.js"
            },
            "2": {
              "name": "keyword.generator.asterisk.js"
            }
          }
        },
        {
          "name": "keyword.operator.expression.delete.js",
          "match": "(?<!\\.|\\$)\\bdelete\\b(?!\\$|\\.)"
        },
        {
          "name": "keyword.operator.expression.in.js",
          "match": "(?<!\\.|\\$)\\bin\\b(?!\\$|\\.)"
        },
        {
          "name": "keyword.operator.expression.of.js",
          "match": "(?<!\\.|\\$)\\bof\\b(?!\\$|\\.)"
        },
        {
          "name": "keyword.operator.expression.instanceof.js",
          "match": "(?<!\\.|\\$)\\binstanceof\\b(?!\\$|\\.)"
        },
        {
          "name": "keyword.operator.new.js",
          "match": "(?<!\\.|\\$)\\bnew\\b(?!\\$|\\.)"
        },
        {
          "include": "#source-js-typeof-operator"
        },
        {
          "name": "keyword.operator.expression.void.js",
          "match": "(?<!\\.|\\$)\\bvoid\\b(?!\\$|\\.)"
        },
        {
          "begin": "(?<!\\.|\\$)\\b(as)\\s+",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.as.js"
            }
          },
          "end": "(?=$|^|[;,:})\\]]|((?<!\\.|\\$)\\b(as)\\s+))",
          "patterns": [
            {
              "include": "#source-js-type"
            }
          ]
        },
        {
          "name": "keyword.operator.spread.js",
          "match": "\\.\\.\\."
        },
        {
          "name": "keyword.operator.assignment.compound.js",
          "match": "\\*=|(?<!\\()/=|%=|\\+=|\\-="
        },
        {
          "name": "keyword.operator.assignment.compound.bitwise.js",
          "match": "\\&=|\\^=|<<=|>>=|>>>=|\\|="
        },
        {
          "name": "keyword.operator.bitwise.shift.js",
          "match": "<<|>>>|>>"
        },
        {
          "name": "keyword.operator.comparison.js",
          "match": "===|!==|==|!="
        },
        {
          "name": "keyword.operator.relational.js",
          "match": "<=|>=|<>|<|>"
        },
        {
          "name": "keyword.operator.logical.js",
          "match": "\\!|&&|\\|\\|"
        },
        {
          "name": "keyword.operator.bitwise.js",
          "match": "\\&|~|\\^|\\|"
        },
        {
          "name": "keyword.operator.assignment.js",
          "match": "\\="
        },
        {
          "name": "keyword.operator.decrement.js",
          "match": "--"
        },
        {
          "name": "keyword.operator.increment.js",
          "match": "\\+\\+"
        },
        {
          "name": "keyword.operator.arithmetic.js",
          "match": "%|\\*|/|-|\\+"
        },
        {
          "match": "(?<=[_$[:alnum:])])\\s*(/)(?![/*])",
          "captures": {
            "1": {
              "name": "keyword.operator.arithmetic.js"
            }
          }
        }
      ]
    },
    "source-js-typeof-operator": {
      "name": "keyword.operator.expression.typeof.js",
      "match": "(?<!\\.|\\$)\\btypeof\\b(?!\\$|\\.)"
    },
    "source-js-literal": {
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "include": "#source-js-numeric-literal"
        },
        {
          "include": "#source-js-boolean-literal"
        },
        {
          "include": "#source-js-null-literal"
        },
        {
          "include": "#source-js-undefined-literal"
        },
        {
          "include": "#source-js-numericConstant-literal"
        },
        {
          "include": "#source-js-array-literal"
        },
        {
          "include": "#source-js-this-literal"
        },
        {
          "include": "#source-js-super-literal"
        }
      ]
    },
    "source-js-array-literal": {
      "name": "meta.array.literal.js",
      "begin": "\\[",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.square.js"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "meta.brace.square.js"
        }
      },
      "patterns": [
        {
          "include": "#source-js-expression"
        },
        {
          "include": "#source-js-punctuation-comma"
        }
      ]
    },
    "source-js-numeric-literal": {
      "patterns": [
        {
          "name": "constant.numeric.hex.js",
          "match": "\\b(?<!\\$)0(x|X)[0-9a-fA-F]+\\b(?!\\$)"
        },
        {
          "name": "constant.numeric.binary.js",
          "match": "\\b(?<!\\$)0(b|B)[01]+\\b(?!\\$)"
        },
        {
          "name": "constant.numeric.octal.js",
          "match": "\\b(?<!\\$)0(o|O)?[0-7]+\\b(?!\\$)"
        },
        {
          "match": "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9]+(\\.)[0-9]+[eE][+-]?[0-9]+\\b)| # 1.1E+3\n  (?:\\b[0-9]+(\\.)[eE][+-]?[0-9]+\\b)|       # 1.E+3\n  (?:\\B(\\.)[0-9]+[eE][+-]?[0-9]+\\b)|       # .1E+3\n  (?:\\b[0-9]+[eE][+-]?[0-9]+\\b)|           # 1E+3\n  (?:\\b[0-9]+(\\.)[0-9]+\\b)|                # 1.1\n  (?:\\b[0-9]+(\\.)\\B)|                      # 1.\n  (?:\\B(\\.)[0-9]+\\b)|                      # .1\n  (?:\\b[0-9]+\\b(?!\\.))                     # 1\n)(?!\\$)",
          "captures": {
            "0": {
              "name": "constant.numeric.decimal.js"
            },
            "1": {
              "name": "meta.delimiter.decimal.period.js"
            },
            "2": {
              "name": "meta.delimiter.decimal.period.js"
            },
            "3": {
              "name": "meta.delimiter.decimal.period.js"
            },
            "4": {
              "name": "meta.delimiter.decimal.period.js"
            },
            "5": {
              "name": "meta.delimiter.decimal.period.js"
            },
            "6": {
              "name": "meta.delimiter.decimal.period.js"
            }
          }
        }
      ]
    },
    "source-js-boolean-literal": {
      "patterns": [
        {
          "name": "constant.language.boolean.true.js",
          "match": "(?<!\\.|\\$)\\btrue\\b(?!\\$)"
        },
        {
          "name": "constant.language.boolean.false.js",
          "match": "(?<!\\.|\\$)\\bfalse\\b(?!\\$)"
        }
      ]
    },
    "source-js-null-literal": {
      "name": "constant.language.null.js",
      "match": "(?<!\\.|\\$)\\bnull\\b(?!\\$)"
    },
    "source-js-this-literal": {
      "name": "variable.language.this.js",
      "match": "(?<!\\$)((?<=\\.\\.\\.)|(?<!\\.))\\bthis\\b(?!\\$)"
    },
    "source-js-super-literal": {
      "name": "variable.language.super.js",
      "match": "(?<!\\.|\\$)\\bsuper\\b(?!\\$)"
    },
    "source-js-undefined-literal": {
      "name": "constant.language.undefined.js",
      "match": "(?<!\\.|\\$)\\bundefined\\b(?!\\$)"
    },
    "source-js-numericConstant-literal": {
      "patterns": [
        {
          "name": "constant.language.nan.js",
          "match": "(?<!\\.|\\$)\\bNaN\\b(?!\\$)"
        },
        {
          "name": "constant.language.infinity.js",
          "match": "(?<!\\.|\\$)\\bInfinity\\b(?!\\$)"
        }
      ]
    },
    "source-js-support-objects": {
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "name": "variable.language.arguments.js",
          "match": "(?<!\\.|\\$)\\b(arguments)\\b(?!\\$)"
        },
        {
          "name": "support.class.builtin.js",
          "match": "(?x)(?<!\\.|\\$)\\b(Array|ArrayBuffer|Atomics|Boolean|DataView|Date|Float32Array|Float64Array|Function|Generator\n  |GeneratorFunction|Int8Array|Int16Array|Int32Array|Intl|Map|Number|Object|Promise|Proxy\n  |Reflect|RegExp|Set|SharedArrayBuffer|SIMD|String|Symbol|TypedArray\n  |Uint8Array|Uint16Array|Uint32Array|Uint8ClampedArray|WeakMap|WeakSet)\\b(?!\\$)"
        },
        {
          "name": "support.class.error.js",
          "match": "(?<!\\.|\\$)\\b((Eval|Internal|Range|Reference|Syntax|Type|URI)?Error)\\b(?!\\$)"
        },
        {
          "name": "support.function.js",
          "match": "(?x)(?<!\\.|\\$)\\b(clear(Interval|Timeout)|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|\n  isFinite|isNaN|parseFloat|parseInt|require|set(Interval|Timeout)|super|unescape|uneval)(?=\\s*\\()"
        },
        {
          "match": "(?x)(?<!\\.|\\$)\\b(Math)(?:\\s*(\\.)\\s*(?:\n  (abs|acos|acosh|asin|asinh|atan|atan2|atanh|cbrt|ceil|clz32|cos|cosh|exp|\n  expm1|floor|fround|hypot|imul|log|log10|log1p|log2|max|min|pow|random|\n  round|sign|sin|sinh|sqrt|tan|tanh|trunc)\n  |\n  (E|LN10|LN2|LOG10E|LOG2E|PI|SQRT1_2|SQRT2)))?\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "support.constant.math.js"
            },
            "2": {
              "name": "punctuation.accessor.js"
            },
            "3": {
              "name": "support.function.math.js"
            },
            "4": {
              "name": "support.constant.property.math.js"
            }
          }
        },
        {
          "match": "(?x)(?<!\\.|\\$)\\b(console)(?:\\s*(\\.)\\s*(\n  assert|clear|count|debug|dir|error|group|groupCollapsed|groupEnd|info|log\n  |profile|profileEnd|table|time|timeEnd|timeStamp|trace|warn))?\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "support.class.console.js"
            },
            "2": {
              "name": "punctuation.accessor.js"
            },
            "3": {
              "name": "support.function.console.js"
            }
          }
        },
        {
          "match": "(?<!\\.|\\$)\\b(JSON)(?:\\s*(\\.)\\s*(parse|stringify))?\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "support.constant.json.js"
            },
            "2": {
              "name": "punctuation.accessor.js"
            },
            "3": {
              "name": "support.function.json.js"
            }
          }
        },
        {
          "match": "(?x) (\\.) \\s* (?:\n  (constructor|length|prototype|__proto__)\n  |\n  (EPSILON|MAX_SAFE_INTEGER|MAX_VALUE|MIN_SAFE_INTEGER|MIN_VALUE|NEGATIVE_INFINITY|POSITIVE_INFINITY))\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "punctuation.accessor.js"
            },
            "2": {
              "name": "support.variable.property.js"
            },
            "3": {
              "name": "support.constant.js"
            }
          }
        },
        {
          "match": "(?x) (?<!\\.|\\$) \\b (?:\n  (document|event|navigator|performance|screen|window)\n  |\n  (AnalyserNode|ArrayBufferView|Attr|AudioBuffer|AudioBufferSourceNode|AudioContext|AudioDestinationNode|AudioListener\n  |AudioNode|AudioParam|BatteryManager|BeforeUnloadEvent|BiquadFilterNode|Blob|BufferSource|ByteString|CSS|CSSConditionRule\n  |CSSCounterStyleRule|CSSGroupingRule|CSSMatrix|CSSMediaRule|CSSPageRule|CSSPrimitiveValue|CSSRule|CSSRuleList|CSSStyleDeclaration\n  |CSSStyleRule|CSSStyleSheet|CSSSupportsRule|CSSValue|CSSValueList|CanvasGradient|CanvasImageSource|CanvasPattern\n  |CanvasRenderingContext2D|ChannelMergerNode|ChannelSplitterNode|CharacterData|ChromeWorker|CloseEvent|Comment|CompositionEvent\n  |Console|ConvolverNode|Coordinates|Credential|CredentialsContainer|Crypto|CryptoKey|CustomEvent|DOMError|DOMException\n  |DOMHighResTimeStamp|DOMImplementation|DOMString|DOMStringList|DOMStringMap|DOMTimeStamp|DOMTokenList|DataTransfer\n  |DataTransferItem|DataTransferItemList|DedicatedWorkerGlobalScope|DelayNode|DeviceProximityEvent|DirectoryEntry\n  |DirectoryEntrySync|DirectoryReader|DirectoryReaderSync|Document|DocumentFragment|DocumentTouch|DocumentType|DragEvent\n  |DynamicsCompressorNode|Element|Entry|EntrySync|ErrorEvent|Event|EventListener|EventSource|EventTarget|FederatedCredential\n  |FetchEvent|File|FileEntry|FileEntrySync|FileException|FileList|FileReader|FileReaderSync|FileSystem|FileSystemSync\n  |FontFace|FormData|GainNode|Gamepad|GamepadButton|GamepadEvent|Geolocation|GlobalEventHandlers|HTMLAnchorElement\n  |HTMLAreaElement|HTMLAudioElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement\n  |HTMLCollection|HTMLContentElement|HTMLDListElement|HTMLDataElement|HTMLDataListElement|HTMLDialogElement|HTMLDivElement\n  |HTMLDocument|HTMLElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormControlsCollection|HTMLFormElement\n  |HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement\n  |HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMediaElement\n  |HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement\n  |HTMLOptionsCollection|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement\n  |HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement\n  |HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement\n  |HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTimeElement|HTMLTitleElement|HTMLTrackElement\n  |HTMLUListElement|HTMLUnknownElement|HTMLVideoElement|HashChangeEvent|History|IDBCursor|IDBCursorWithValue|IDBDatabase\n  |IDBEnvironment|IDBFactory|IDBIndex|IDBKeyRange|IDBMutableFile|IDBObjectStore|IDBOpenDBRequest|IDBRequest|IDBTransaction\n  |IDBVersionChangeEvent|IIRFilterNode|IdentityManager|ImageBitmap|ImageBitmapFactories|ImageData|Index|InputDeviceCapabilities\n  |InputEvent|InstallEvent|InstallTrigger|KeyboardEvent|LinkStyle|LocalFileSystem|LocalFileSystemSync|Location|MIDIAccess\n  |MIDIConnectionEvent|MIDIInput|MIDIInputMap|MIDIOutputMap|MediaElementAudioSourceNode|MediaError|MediaKeyMessageEvent\n  |MediaKeySession|MediaKeyStatusMap|MediaKeySystemAccess|MediaKeySystemConfiguration|MediaKeys|MediaRecorder|MediaStream\n  |MediaStreamAudioDestinationNode|MediaStreamAudioSourceNode|MessageChannel|MessageEvent|MessagePort|MouseEvent\n  |MutationObserver|MutationRecord|NamedNodeMap|Navigator|NavigatorConcurrentHardware|NavigatorGeolocation|NavigatorID\n  |NavigatorLanguage|NavigatorOnLine|Node|NodeFilter|NodeIterator|NodeList|NonDocumentTypeChildNode|Notification\n  |OfflineAudioCompletionEvent|OfflineAudioContext|OscillatorNode|PageTransitionEvent|PannerNode|ParentNode|PasswordCredential\n  |Path2D|PaymentAddress|PaymentRequest|PaymentResponse|Performance|PerformanceEntry|PerformanceFrameTiming|PerformanceMark\n  |PerformanceMeasure|PerformanceNavigation|PerformanceNavigationTiming|PerformanceObserver|PerformanceObserverEntryList\n  |PerformanceResourceTiming|PerformanceTiming|PeriodicSyncEvent|PeriodicWave|Plugin|Point|PointerEvent|PopStateEvent\n  |PortCollection|Position|PositionError|PositionOptions|PresentationConnectionClosedEvent|PresentationConnectionList\n  |PresentationReceiver|ProcessingInstruction|ProgressEvent|PromiseRejectionEvent|PushEvent|PushRegistrationManager\n  |RTCCertificate|RTCConfiguration|RTCPeerConnection|RTCSessionDescriptionCallback|RTCStatsReport|RadioNodeList|RandomSource\n  |Range|ReadableByteStream|RenderingContext|SVGAElement|SVGAngle|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement\n  |SVGAnimateTransformElement|SVGAnimatedAngle|SVGAnimatedBoolean|SVGAnimatedEnumeration|SVGAnimatedInteger|SVGAnimatedLength\n  |SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedPoints|SVGAnimatedPreserveAspectRatio\n  |SVGAnimatedRect|SVGAnimatedString|SVGAnimatedTransformList|SVGAnimationElement|SVGCircleElement|SVGClipPathElement\n  |SVGCursorElement|SVGDefsElement|SVGDescElement|SVGElement|SVGEllipseElement|SVGEvent|SVGFilterElement|SVGFontElement\n  |SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement\n  |SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGradientElement|SVGHKernElement|SVGImageElement|SVGLength\n  |SVGLengthList|SVGLineElement|SVGLinearGradientElement|SVGMPathElement|SVGMaskElement|SVGMatrix|SVGMissingGlyphElement\n  |SVGNumber|SVGNumberList|SVGPathElement|SVGPatternElement|SVGPoint|SVGPolygonElement|SVGPolylineElement|SVGPreserveAspectRatio\n  |SVGRadialGradientElement|SVGRect|SVGRectElement|SVGSVGElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStringList\n  |SVGStylable|SVGStyleElement|SVGSwitchElement|SVGSymbolElement|SVGTRefElement|SVGTSpanElement|SVGTests|SVGTextElement\n  |SVGTextPositioningElement|SVGTitleElement|SVGTransform|SVGTransformList|SVGTransformable|SVGUseElement|SVGVKernElement\n  |SVGViewElement|ServiceWorker|ServiceWorkerContainer|ServiceWorkerGlobalScope|ServiceWorkerRegistration|ServiceWorkerState\n  |ShadowRoot|SharedWorker|SharedWorkerGlobalScope|SourceBufferList|StereoPannerNode|Storage|StorageEvent|StyleSheet\n  |StyleSheetList|SubtleCrypto|SyncEvent|Text|TextMetrics|TimeEvent|TimeRanges|Touch|TouchEvent|TouchList|Transferable\n  |TreeWalker|UIEvent|USVString|VRDisplayCapabilities|ValidityState|WaveShaperNode|WebGL|WebGLActiveInfo|WebGLBuffer\n  |WebGLContextEvent|WebGLFramebuffer|WebGLProgram|WebGLRenderbuffer|WebGLRenderingContext|WebGLShader|WebGLShaderPrecisionFormat\n  |WebGLTexture|WebGLTimerQueryEXT|WebGLTransformFeedback|WebGLUniformLocation|WebGLVertexArrayObject|WebGLVertexArrayObjectOES\n  |WebSocket|WebSockets|WebVTT|WheelEvent|Window|WindowBase64|WindowEventHandlers|WindowTimers|Worker|WorkerGlobalScope\n  |WorkerLocation|WorkerNavigator|XMLHttpRequest|XMLHttpRequestEventTarget|XMLSerializer|XPathExpression|XPathResult\n  |XSLTProcessor))\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "support.variable.dom.js"
            },
            "2": {
              "name": "support.class.dom.js"
            }
          }
        },
        {
          "match": "(?x) (\\.) \\s* (?:\n  (ATTRIBUTE_NODE|CDATA_SECTION_NODE|COMMENT_NODE|DOCUMENT_FRAGMENT_NODE|DOCUMENT_NODE|DOCUMENT_TYPE_NODE\n  |DOMSTRING_SIZE_ERR|ELEMENT_NODE|ENTITY_NODE|ENTITY_REFERENCE_NODE|HIERARCHY_REQUEST_ERR|INDEX_SIZE_ERR\n  |INUSE_ATTRIBUTE_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR\n  |NOT_SUPPORTED_ERR|NOTATION_NODE|PROCESSING_INSTRUCTION_NODE|TEXT_NODE|WRONG_DOCUMENT_ERR)\n  |\n  (_content|[xyz]|abbr|above|accept|acceptCharset|accessKey|action|align|[av]Link(?:color)?|all|alt|anchors|appCodeName\n  |appCore|applets|appMinorVersion|appName|appVersion|archive|areas|arguments|attributes|availHeight|availLeft|availTop\n  |availWidth|axis|background|backgroundColor|backgroundImage|below|bgColor|body|border|borderBottomWidth|borderColor\n  |borderLeftWidth|borderRightWidth|borderStyle|borderTopWidth|borderWidth|bottom|bufferDepth|callee|caller|caption\n  |cellPadding|cells|cellSpacing|ch|characterSet|charset|checked|childNodes|chOff|cite|classes|className|clear\n  |clientInformation|clip|clipBoardData|closed|code|codeBase|codeType|color|colorDepth|cols|colSpan|compact|complete\n  |components|content|controllers|cookie|cookieEnabled|cords|cpuClass|crypto|current|data|dateTime|declare|defaultCharset\n  |defaultChecked|defaultSelected|defaultStatus|defaultValue|defaultView|defer|description|dialogArguments|dialogHeight\n  |dialogLeft|dialogTop|dialogWidth|dir|directories|disabled|display|docmain|doctype|documentElement|elements|embeds\n  |enabledPlugin|encoding|enctype|entities|event|expando|external|face|fgColor|filename|firstChild|fontFamily|fontSize\n  |fontWeight|form|formName|forms|frame|frameBorder|frameElement|frames|hasFocus|hash|headers|height|history|host\n  |hostname|href|hreflang|hspace|htmlFor|httpEquiv|id|ids|ignoreCase|images|implementation|index|innerHeight|innerWidth\n  |input|isMap|label|lang|language|lastChild|lastIndex|lastMatch|lastModified|lastParen|layer[sXY]|left|leftContext\n  |lineHeight|link|linkColor|links|listStyleType|localName|location|locationbar|longDesc|lowsrc|lowSrc|marginBottom\n  |marginHeight|marginLeft|marginRight|marginTop|marginWidth|maxLength|media|menubar|method|mimeTypes|multiline|multiple\n  |name|nameProp|namespaces|namespaceURI|next|nextSibling|nodeName|nodeType|nodeValue|noHref|noResize|noShade|notationName\n  |notations|noWrap|object|offscreenBuffering|onLine|onreadystatechange|opener|opsProfile|options|oscpu|outerHeight\n  |outerWidth|ownerDocument|paddingBottom|paddingLeft|paddingRight|paddingTop|page[XY]|page[XY]Offset|parent|parentLayer\n  |parentNode|parentWindow|pathname|personalbar|pixelDepth|pkcs11|platform|plugins|port|prefix|previous|previousDibling\n  |product|productSub|profile|profileend|prompt|prompter|protocol|publicId|readOnly|readyState|referrer|rel|responseText\n  |responseXML|rev|right|rightContext|rowIndex|rows|rowSpan|rules|scheme|scope|screen[XY]|screenLeft|screenTop|scripts\n  |scrollbars|scrolling|sectionRowIndex|security|securityPolicy|selected|selectedIndex|selection|self|shape|siblingAbove\n  |siblingBelow|size|source|specified|standby|start|status|statusbar|statusText|style|styleSheets|suffixes|summary\n  |systemId|systemLanguage|tagName|tags|target|tBodies|text|textAlign|textDecoration|textIndent|textTransform|tFoot|tHead\n  |title|toolbar|top|type|undefined|uniqueID|updateInterval|URL|URLUnencoded|useMap|userAgent|userLanguage|userProfile\n  |vAlign|value|valueType|vendor|vendorSub|version|visibility|vspace|whiteSpace|width|X[MS]LDocument|zIndex))\\b(?!\\$|\\s*(<\\s*([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))([^=<>]|=[^<])*\\>)*>\\s*)?\\()",
          "captures": {
            "1": {
              "name": "punctuation.accessor.js"
            },
            "2": {
              "name": "support.constant.dom.js"
            },
            "3": {
              "name": "support.variable.property.dom.js"
            }
          }
        },
        {
          "name": "support.class.node.js",
          "match": "(?x)(?<!\\.|\\$)\\b(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream\n  |Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)\\b(?!\\$)"
        },
        {
          "match": "(?x)(?<!\\.|\\$)\\b(process)(?:(\\.)(?:\n  (arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions)\n  |\n  (abort|chdir|cwd|disconnect|exit|[sg]ete?[gu]id|send|[sg]etgroups|initgroups|kill|memoryUsage|nextTick|umask|uptime|hrtime)\n))?\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "support.variable.object.process.js"
            },
            "2": {
              "name": "punctuation.accessor.js"
            },
            "3": {
              "name": "support.variable.property.process.js"
            },
            "4": {
              "name": "support.function.process.js"
            }
          }
        },
        {
          "match": "(?<!\\.|\\$)\\b(?:(exports)|(module)(?:(\\.)(exports|id|filename|loaded|parent|children))?)\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "support.type.object.module.js"
            },
            "2": {
              "name": "support.type.object.module.js"
            },
            "3": {
              "name": "punctuation.accessor.js"
            },
            "4": {
              "name": "support.type.object.module.js"
            }
          }
        },
        {
          "name": "support.variable.object.node.js",
          "match": "(?<!\\.|\\$)\\b(global|GLOBAL|root|__dirname|__filename)\\b(?!\\$)"
        },
        {
          "match": "(?x) (\\.) \\s*\n(?:\n (on(?:Rowsinserted|Rowsdelete|Rowenter|Rowexit|Resize|Resizestart|Resizeend|Reset|\n   Readystatechange|Mouseout|Mouseover|Mousedown|Mouseup|Mousemove|\n   Before(?:cut|deactivate|unload|update|paste|print|editfocus|activate)|\n   Blur|Scrolltop|Submit|Select|Selectstart|Selectionchange|Hover|Help|\n   Change|Contextmenu|Controlselect|Cut|Cellchange|Clock|Close|Deactivate|\n   Datasetchanged|Datasetcomplete|Dataavailable|Drop|Drag|Dragstart|Dragover|\n   Dragdrop|Dragenter|Dragend|Dragleave|Dblclick|Unload|Paste|Propertychange|Error|\n   Errorupdate|Keydown|Keyup|Keypress|Focus|Load|Activate|Afterupdate|Afterprint|Abort)\n ) |\n (shift|showModelessDialog|showModalDialog|showHelp|scroll|scrollX|scrollByPages|\n   scrollByLines|scrollY|scrollTo|stop|strike|sizeToContent|sidebar|signText|sort|\n   sup|sub|substr|substring|splice|split|send|set(?:Milliseconds|Seconds|Minutes|Hours|\n   Month|Year|FullYear|Date|UTC(?:Milliseconds|Seconds|Minutes|Hours|Month|FullYear|Date)|\n   Time|Hotkeys|Cursor|ZOptions|Active|Resizable|RequestHeader)|search|slice|\n   savePreferences|small|home|handleEvent|navigate|char|charCodeAt|charAt|concat|\n   contextual|confirm|compile|clear|captureEvents|call|createStyleSheet|createPopup|\n   createEventObject|to(?:GMTString|UTCString|String|Source|UpperCase|LowerCase|LocaleString)|\n   test|taint|taintEnabled|indexOf|italics|disableExternalCapture|dump|detachEvent|unshift|\n   untaint|unwatch|updateCommands|join|javaEnabled|pop|push|plugins.refresh|paddings|parse|\n   print|prompt|preference|enableExternalCapture|exec|execScript|valueOf|UTC|find|file|\n   fileModifiedDate|fileSize|fileCreatedDate|fileUpdatedDate|fixed|fontsize|fontcolor|\n   forward|fromCharCode|watch|link|load|lastIndexOf|anchor|attachEvent|atob|apply|alert|\n   abort|routeEvents|resize|resizeBy|resizeTo|recalc|returnValue|replace|reverse|reload|\n   releaseCapture|releaseEvents|go|get(?:Milliseconds|Seconds|Minutes|Hours|Month|Day|Year|FullYear|\n   Time|Date|TimezoneOffset|UTC(?:Milliseconds|Seconds|Minutes|Hours|Day|Month|FullYear|Date)|\n   Attention|Selection|ResponseHeader|AllResponseHeaders)|moveBy|moveBelow|moveTo|\n   moveToAbsolute|moveAbove|mergeAttributes|match|margins|btoa|big|bold|borderWidths|blink|back\n ) |\n (acceptNode|add|addEventListener|addTextTrack|adoptNode|after|animate|append|\n   appendChild|appendData|before|blur|canPlayType|captureStream|\n   caretPositionFromPoint|caretRangeFromPoint|checkValidity|clear|click|\n   cloneContents|cloneNode|cloneRange|close|closest|collapse|\n   compareBoundaryPoints|compareDocumentPosition|comparePoint|contains|\n   convertPointFromNode|convertQuadFromNode|convertRectFromNode|createAttribute|\n   createAttributeNS|createCaption|createCDATASection|createComment|\n   createContextualFragment|createDocument|createDocumentFragment|\n   createDocumentType|createElement|createElementNS|createEntityReference|\n   createEvent|createExpression|createHTMLDocument|createNodeIterator|\n   createNSResolver|createProcessingInstruction|createRange|createShadowRoot|\n   createTBody|createTextNode|createTFoot|createTHead|createTreeWalker|delete|\n   deleteCaption|deleteCell|deleteContents|deleteData|deleteRow|deleteTFoot|\n   deleteTHead|detach|disconnect|dispatchEvent|elementFromPoint|elementsFromPoint|\n   enableStyleSheetsForSet|entries|evaluate|execCommand|exitFullscreen|\n   exitPointerLock|expand|extractContents|fastSeek|firstChild|focus|forEach|get|\n   getAll|getAnimations|getAttribute|getAttributeNames|getAttributeNode|\n   getAttributeNodeNS|getAttributeNS|getBoundingClientRect|getBoxQuads|\n   getClientRects|getContext|getDestinationInsertionPoints|getElementById|\n   getElementsByClassName|getElementsByName|getElementsByTagName|\n   getElementsByTagNameNS|getItem|getNamedItem|getSelection|getStartDate|\n   getVideoPlaybackQuality|has|hasAttribute|hasAttributeNS|hasAttributes|\n   hasChildNodes|hasFeature|hasFocus|importNode|initEvent|insertAdjacentElement|\n   insertAdjacentHTML|insertAdjacentText|insertBefore|insertCell|insertData|\n   insertNode|insertRow|intersectsNode|isDefaultNamespace|isEqualNode|\n   isPointInRange|isSameNode|item|key|keys|lastChild|load|lookupNamespaceURI|\n   lookupPrefix|matches|move|moveAttribute|moveAttributeNode|moveChild|\n   moveNamedItem|namedItem|nextNode|nextSibling|normalize|observe|open|\n   parentNode|pause|play|postMessage|prepend|preventDefault|previousNode|\n   previousSibling|probablySupportsContext|queryCommandEnabled|\n   queryCommandIndeterm|queryCommandState|queryCommandSupported|queryCommandValue|\n   querySelector|querySelectorAll|registerContentHandler|registerElement|\n   registerProtocolHandler|releaseCapture|releaseEvents|remove|removeAttribute|\n   removeAttributeNode|removeAttributeNS|removeChild|removeEventListener|\n   removeItem|replace|replaceChild|replaceData|replaceWith|reportValidity|\n   requestFullscreen|requestPointerLock|reset|scroll|scrollBy|scrollIntoView|\n   scrollTo|seekToNextFrame|select|selectNode|selectNodeContents|set|setAttribute|\n   setAttributeNode|setAttributeNodeNS|setAttributeNS|setCapture|\n   setCustomValidity|setEnd|setEndAfter|setEndBefore|setItem|setNamedItem|\n   setRangeText|setSelectionRange|setSinkId|setStart|setStartAfter|setStartBefore|\n   slice|splitText|stepDown|stepUp|stopImmediatePropagation|stopPropagation|\n   submit|substringData|supports|surroundContents|takeRecords|terminate|toBlob|\n   toDataURL|toggle|toString|values|write|writeln\n )\n)(?=\\s*\\()",
          "captures": {
            "1": {
              "name": "punctuation.accessor.js"
            },
            "2": {
              "name": "support.function.event-handler.js"
            },
            "3": {
              "name": "support.function.js"
            },
            "4": {
              "name": "support.function.dom.js"
            }
          }
        }
      ]
    },
    "source-js-identifiers": {
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "include": "#source-js-object-identifiers"
        },
        {
          "match": "(?x)(?:(\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    # sure shot arrow functions even if => is on new line\n(\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                 # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                            # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                        # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))([^=<>]|=[^<])*\\>)*>\\s*)?                                                           # typeparameters\n  \\(\\s*([_$[:alpha:]\\{\\[]([^()]|\\((\\s*[^()]*)?\\))*)?\\)                          # parameteres\n  (\\s*:\\s*([^<>\\(\\)]|\\<[^<>]+\\>|\\([^\\(\\)]+\\))+)?                                # return type\n  \\s*=>                                                                         # arrow operator\n)\n  ))\n))",
          "captures": {
            "1": {
              "name": "punctuation.accessor.js"
            },
            "2": {
              "name": "entity.name.function.js"
            }
          }
        },
        {
          "match": "(\\.)\\s*([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])",
          "captures": {
            "1": {
              "name": "punctuation.accessor.js"
            },
            "2": {
              "name": "variable.other.constant.property.js"
            }
          }
        },
        {
          "match": "(\\.)\\s*([_$[:alpha:]][_$[:alnum:]]*)",
          "captures": {
            "1": {
              "name": "punctuation.accessor.js"
            },
            "2": {
              "name": "variable.other.property.js"
            }
          }
        },
        {
          "name": "variable.other.constant.js",
          "match": "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])"
        },
        {
          "name": "variable.other.readwrite.js",
          "match": "[_$[:alpha:]][_$[:alnum:]]*"
        }
      ]
    },
    "source-js-object-identifiers": {
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "name": "support.class.js",
          "match": "([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\\.\\s*prototype\\b(?!\\$))"
        },
        {
          "match": "(?x)(\\.)\\s*(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)",
          "captures": {
            "1": {
              "name": "punctuation.accessor.js"
            },
            "2": {
              "name": "variable.other.constant.object.property.js"
            },
            "3": {
              "name": "variable.other.object.property.js"
            }
          }
        },
        {
          "match": "(?x)(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)",
          "captures": {
            "1": {
              "name": "variable.other.constant.object.js"
            },
            "2": {
              "name": "variable.other.object.js"
            }
          }
        }
      ]
    },
    "source-js-type": {
      "patterns": [
        {
          "include": "#source-js-comment"
        },
        {
          "include": "#source-js-string"
        },
        {
          "include": "#source-js-numeric-literal"
        },
        {
          "include": "#source-js-type-primitive"
        },
        {
          "include": "#source-js-type-builtin-literals"
        },
        {
          "include": "#source-js-type-parameters"
        },
        {
          "include": "#source-js-type-tuple"
        },
        {
          "include": "#source-js-type-object"
        },
        {
          "include": "#source-js-type-operators"
        },
        {
          "include": "#source-js-type-fn-type-parameters"
        },
        {
          "include": "#source-js-type-paren-or-function-parameters"
        },
        {
          "include": "#source-js-type-function-return-type"
        },
        {
          "include": "#source-js-type-name"
        }
      ]
    },
    "source-js-type-builtin-literals": {
      "name": "support.type.builtin.js",
      "match": "(?<!\\.|\\$)\\b(this|true|false|undefined|null|object)\\b(?!\\$|\\.)"
    },
    "source-js-type-name": {
      "patterns": [
        {
          "match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\.)",
          "captures": {
            "1": {
              "name": "entity.name.type.module.js"
            },
            "2": {
              "name": "punctuation.accessor.js"
            }
          }
        },
        {
          "name": "entity.name.type.js",
          "match": "[_$[:alpha:]][_$[:alnum:]]*"
        }
      ]
    },
    "source-js-punctuation-comma": {
      "name": "punctuation.separator.comma.js",
      "match": ","
    },
    "source-js-punctuation-semicolon": {
      "name": "punctuation.terminator.statement.js",
      "match": ";"
    },
    "source-js-punctuation-accessor": {
      "name": "punctuation.accessor.js",
      "match": "\\."
    },
    "source-js-string": {
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "include": "#source-js-qstring-single"
        },
        {
          "include": "#source-js-qstring-double"
        }
      ]
    },
    "source-js-qstring-double": {
      "name": "string.quoted.double.js",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.js"
        }
      },
      "end": "(\")|((?:[^\\\\\\n])$)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.js"
        },
        "2": {
          "name": "invalid.illegal.newline.js"
        }
      },
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "include": "#source-js-string-character-escape"
        }
      ]
    },
    "source-js-qstring-single": {
      "name": "string.quoted.single.js",
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.js"
        }
      },
      "end": "(\\')|((?:[^\\\\\\n])$)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.js"
        },
        "2": {
          "name": "invalid.illegal.newline.js"
        }
      },
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "include": "#source-js-string-character-escape"
        }
      ]
    },
    "source-js-string-character-escape": {
      "name": "constant.character.escape.js",
      "match": "\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
    },
    "source-js-template": {
      "name": "string.template.js",
      "begin": "([_$[:alpha:]][_$[:alnum:]]*)?(`)",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.tagged-template.js"
        },
        "2": {
          "name": "punctuation.definition.string.template.begin.js"
        }
      },
      "end": "`",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.template.end.js"
        }
      },
      "patterns": [
        {
          "include": "#source-js-template-substitution-element"
        },
        {
          "include": "#source-js-string-character-escape"
        }
      ]
    },
    "source-js-template-substitution-element": {
      "name": "meta.template.expression.js",
      "begin": "\\$\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.template-expression.begin.js"
        }
      },
      "contentName": "meta.embedded.line.js",
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.template-expression.end.js"
        }
      },
      "patterns": [
        {
          "include": "#source-js-expression"
        }
      ]
    },
    "source-js-regex": {
      "patterns": [
        {
          "name": "string.regexp.js",
          "begin": "(?<=[=(:,\\[?+!]|return|case|=>|&&|\\|\\||\\*\\/)\\s*(\\/)(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\])+\\/(?![\\/*])[gimuy]*(?!\\s*[a-zA-Z0-9_$]))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.js"
            }
          },
          "end": "(/)([gimuy]*)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.js"
            },
            "2": {
              "name": "keyword.other.js"
            }
          },
          "patterns": [
            {
              "include": "#source-js-regexp"
            }
          ]
        },
        {
          "name": "string.regexp.js",
          "begin": "(?<![_$[:alnum:])])\\/(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\])+\\/(?![\\/*])[gimuy]*(?!\\s*[a-zA-Z0-9_$]))",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.js"
            }
          },
          "end": "(/)([gimuy]*)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.js"
            },
            "2": {
              "name": "keyword.other.js"
            }
          },
          "patterns": [
            {
              "include": "#source-js-regexp"
            }
          ]
        }
      ]
    },
    "source-js-regexp": {
      "patterns": [
        {
          "name": "keyword.control.anchor.regexp",
          "match": "\\\\[bB]|\\^|\\$"
        },
        {
          "name": "keyword.other.back-reference.regexp",
          "match": "\\\\[1-9]\\d*"
        },
        {
          "name": "keyword.operator.quantifier.regexp",
          "match": "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??"
        },
        {
          "name": "keyword.operator.or.regexp",
          "match": "\\|"
        },
        {
          "name": "meta.group.assertion.regexp",
          "begin": "(\\()((\\?=)|(\\?!))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.group.regexp"
            },
            "2": {
              "name": "punctuation.definition.group.assertion.regexp"
            },
            "3": {
              "name": "meta.assertion.look-ahead.regexp"
            },
            "4": {
              "name": "meta.assertion.negative-look-ahead.regexp"
            }
          },
          "end": "(\\))",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.group.regexp"
            }
          },
          "patterns": [
            {
              "include": "#source-js-regexp"
            }
          ]
        },
        {
          "name": "meta.group.regexp",
          "begin": "\\((\\?:)?",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.group.regexp"
            },
            "1": {
              "name": "punctuation.definition.group.no-capture.regexp"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.group.regexp"
            }
          },
          "patterns": [
            {
              "include": "#source-js-regexp"
            }
          ]
        },
        {
          "name": "constant.other.character-class.set.regexp",
          "begin": "(\\[)(\\^)?",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.character-class.regexp"
            },
            "2": {
              "name": "keyword.operator.negation.regexp"
            }
          },
          "end": "(\\])",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.character-class.regexp"
            }
          },
          "patterns": [
            {
              "name": "constant.other.character-class.range.regexp",
              "match": "(?:.|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))",
              "captures": {
                "1": {
                  "name": "constant.character.numeric.regexp"
                },
                "2": {
                  "name": "constant.character.control.regexp"
                },
                "3": {
                  "name": "constant.character.escape.backslash.regexp"
                },
                "4": {
                  "name": "constant.character.numeric.regexp"
                },
                "5": {
                  "name": "constant.character.control.regexp"
                },
                "6": {
                  "name": "constant.character.escape.backslash.regexp"
                }
              }
            },
            {
              "include": "#source-js-regex-character-class"
            }
          ]
        },
        {
          "include": "#source-js-regex-character-class"
        }
      ]
    },
    "source-js-regex-character-class": {
      "patterns": [
        {
          "name": "constant.other.character-class.regexp",
          "match": "\\\\[wWsSdDtrnvf]|\\."
        },
        {
          "name": "constant.character.numeric.regexp",
          "match": "\\\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})"
        },
        {
          "name": "constant.character.control.regexp",
          "match": "\\\\c[A-Z]"
        },
        {
          "name": "constant.character.escape.backslash.regexp",
          "match": "\\\\."
        }
      ]
    },
    "source-js-comment": {
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "name": "comment.block.documentation.js",
          "begin": "/\\*\\*(?!/)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.js"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.js"
            }
          },
          "patterns": [
            {
              "include": "#source-js-docblock"
            }
          ]
        },
        {
          "name": "comment.block.js",
          "begin": "(/\\*)(?:\\s*((@)internal)(?=\\s|(\\*/)))?",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.js"
            },
            "2": {
              "name": "storage.type.internaldeclaration.js"
            },
            "3": {
              "name": "punctuation.decorator.internaldeclaration.js"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.js"
            }
          }
        },
        {
          "begin": "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.js"
            },
            "2": {
              "name": "comment.line.double-slash.js"
            },
            "3": {
              "name": "punctuation.definition.comment.js"
            },
            "4": {
              "name": "storage.type.internaldeclaration.js"
            },
            "5": {
              "name": "punctuation.decorator.internaldeclaration.js"
            }
          },
          "contentName": "comment.line.double-slash.js",
          "end": "(?=^)"
        }
      ]
    },
    "source-js-cfoutput": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-js-cfoutput-statements"
        }
      ]
    },
    "source-js-cfoutput-statements": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-js-cfoutput-string"
        },
        {
          "include": "#source-js-cfoutput-template"
        },
        {
          "include": "#source-js-cfoutput-comment"
        },
        {
          "include": "#source-js-cfoutput-declaration"
        },
        {
          "include": "#source-js-cfoutput-control-statement"
        },
        {
          "include": "#source-js-cfoutput-after-operator-block-as-object-literal"
        },
        {
          "include": "#source-js-cfoutput-decl-block"
        },
        {
          "include": "#source-js-cfoutput-expression"
        },
        {
          "include": "#source-js-punctuation-semicolon"
        }
      ]
    },
    "source-js-cfoutput-string": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-js-cfoutput-qstring-single"
        },
        {
          "include": "#source-js-cfoutput-qstring-double"
        }
      ]
    },
    "source-js-cfoutput-qstring-double": {
      "name": "string.quoted.double.js",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.js"
        }
      },
      "end": "(\")|((?:[^\\\\\\n])$)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.js"
        },
        "2": {
          "name": "invalid.illegal.newline.js"
        }
      },
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-js-string-character-escape"
        }
      ]
    },
    "source-js-cfoutput-qstring-single": {
      "name": "string.quoted.single.js",
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.js"
        }
      },
      "end": "(\\')|((?:[^\\\\\\n])$)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.js"
        },
        "2": {
          "name": "invalid.illegal.newline.js"
        }
      },
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-js-string-character-escape"
        }
      ]
    },
    "source-js-cfoutput-template": {
      "name": "string.template.js",
      "begin": "([_$[:alpha:]][_$[:alnum:]]*)?(`)",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.tagged-template.js"
        },
        "2": {
          "name": "punctuation.definition.string.template.begin.js"
        }
      },
      "end": "`",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.template.end.js"
        }
      },
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-js-cfoutput-template-substitution-element"
        },
        {
          "include": "#source-js-string-character-escape"
        }
      ]
    },
    "source-js-cfoutput-template-substitution-element": {
      "name": "meta.template.expression.js",
      "begin": "\\$\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.template-expression.begin.js"
        }
      },
      "contentName": "meta.embedded.line.js",
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.template-expression.end.js"
        }
      },
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-js-cfoutput-expression"
        }
      ]
    },
    "source-js-cfoutput-expression": {
      "patterns": [
        {
          "include": "#source-js-cfoutput-expressionWithoutIdentifiers"
        },
        {
          "include": "#source-js-cfoutput-identifiers"
        },
        {
          "include": "#source-js-expressionPunctuations"
        }
      ]
    },
    "source-js-cfoutput-expressionWithoutIdentifiers": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-js-cfoutput-string"
        },
        {
          "include": "#source-js-cfoutput-regex"
        },
        {
          "include": "#source-js-cfoutput-template"
        },
        {
          "include": "#source-js-cfoutput-comment"
        },
        {
          "include": "#source-js-cfoutput-function-expression"
        },
        {
          "include": "#source-js-class-expression"
        },
        {
          "include": "#source-js-cfoutput-arrow-function"
        },
        {
          "include": "#source-js-cfoutput-ternary-expression"
        },
        {
          "include": "#source-js-cfoutput-new-expr"
        },
        {
          "include": "#source-js-cfoutput-object-literal"
        },
        {
          "include": "#source-js-cfoutput-expression-operators"
        },
        {
          "include": "#source-js-cfoutput-function-call"
        },
        {
          "include": "#source-js-cfoutput-literal"
        },
        {
          "include": "#source-js-cfoutput-support-objects"
        },
        {
          "include": "#source-js-cfoutput-paren-expression"
        }
      ]
    },
    "source-js-cfoutput-regex": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "name": "string.regexp.js",
          "begin": "(?<=[=(:,\\[?+!]|return|case|=>|&&|\\|\\||\\*\\/)\\s*(\\/)(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\])+\\/(?![\\/*])[gimuy]*(?!\\s*[a-zA-Z0-9_$]))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.js"
            }
          },
          "end": "(/)([gimuy]*)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.js"
            },
            "2": {
              "name": "keyword.other.js"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-js-cfoutput-regexp"
            }
          ]
        },
        {
          "name": "string.regexp.js",
          "begin": "(?<![_$[:alnum:])])\\/(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\])+\\/(?![\\/*])[gimuy]*(?!\\s*[a-zA-Z0-9_$]))",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.js"
            }
          },
          "end": "(/)([gimuy]*)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.js"
            },
            "2": {
              "name": "keyword.other.js"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-js-cfoutput-regexp"
            }
          ]
        }
      ]
    },
    "source-js-cfoutput-regexp": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "name": "keyword.control.anchor.regexp",
          "match": "\\\\[bB]|\\^|\\$"
        },
        {
          "name": "keyword.other.back-reference.regexp",
          "match": "\\\\[1-9]\\d*"
        },
        {
          "name": "keyword.operator.quantifier.regexp",
          "match": "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??"
        },
        {
          "name": "keyword.operator.or.regexp",
          "match": "\\|"
        },
        {
          "name": "meta.group.assertion.regexp",
          "begin": "(\\()((\\?=)|(\\?!))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.group.regexp"
            },
            "2": {
              "name": "punctuation.definition.group.assertion.regexp"
            },
            "3": {
              "name": "meta.assertion.look-ahead.regexp"
            },
            "4": {
              "name": "meta.assertion.negative-look-ahead.regexp"
            }
          },
          "end": "(\\))",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.group.regexp"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-js-cfoutput-regexp"
            }
          ]
        },
        {
          "name": "meta.group.regexp",
          "begin": "\\((\\?:)?",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.group.regexp"
            },
            "1": {
              "name": "punctuation.definition.group.no-capture.regexp"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.group.regexp"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-js-cfoutput-regexp"
            }
          ]
        },
        {
          "name": "constant.other.character-class.set.regexp",
          "begin": "(\\[)(\\^)?",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.character-class.regexp"
            },
            "2": {
              "name": "keyword.operator.negation.regexp"
            }
          },
          "end": "(\\])",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.character-class.regexp"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "name": "constant.other.character-class.range.regexp",
              "match": "(?:.|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))",
              "captures": {
                "1": {
                  "name": "constant.character.numeric.regexp"
                },
                "2": {
                  "name": "constant.character.control.regexp"
                },
                "3": {
                  "name": "constant.character.escape.backslash.regexp"
                },
                "4": {
                  "name": "constant.character.numeric.regexp"
                },
                "5": {
                  "name": "constant.character.control.regexp"
                },
                "6": {
                  "name": "constant.character.escape.backslash.regexp"
                }
              }
            },
            {
              "include": "#source-js-cfoutput-regex-character-class"
            }
          ]
        },
        {
          "include": "#source-js-cfoutput-regex-character-class"
        }
      ]
    },
    "source-js-cfoutput-regex-character-class": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "name": "constant.other.character-class.regexp",
          "match": "\\\\[wWsSdDtrnvf]|\\."
        },
        {
          "name": "constant.character.numeric.regexp",
          "match": "\\\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})"
        },
        {
          "name": "constant.character.control.regexp",
          "match": "\\\\c[A-Z]"
        },
        {
          "name": "constant.character.escape.backslash.regexp",
          "match": "\\\\."
        }
      ]
    },
    "source-js-cfoutput-comment": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "name": "comment.block.documentation.js",
          "begin": "/\\*\\*(?!/)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.js"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.js"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-js-docblock"
            }
          ]
        },
        {
          "name": "comment.block.js",
          "begin": "(/\\*)(?:\\s*((@)internal)(?=\\s|(\\*/)))?",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.js"
            },
            "2": {
              "name": "storage.type.internaldeclaration.js"
            },
            "3": {
              "name": "punctuation.decorator.internaldeclaration.js"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.js"
            }
          }
        },
        {
          "begin": "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.js"
            },
            "2": {
              "name": "comment.line.double-slash.js"
            },
            "3": {
              "name": "punctuation.definition.comment.js"
            },
            "4": {
              "name": "storage.type.internaldeclaration.js"
            },
            "5": {
              "name": "punctuation.decorator.internaldeclaration.js"
            }
          },
          "contentName": "comment.line.double-slash.js",
          "end": "(?=^)"
        }
      ]
    },
    "source-js-cfoutput-declaration": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-js-cfoutput-decorator"
        },
        {
          "include": "#source-js-cfoutput-var-expr"
        },
        {
          "include": "#source-js-cfoutput-function-declaration"
        },
        {
          "include": "#source-js-class-declaration"
        },
        {
          "include": "#source-js-interface-declaration"
        },
        {
          "include": "#source-js-enum-declaration"
        },
        {
          "include": "#source-js-namespace-declaration"
        },
        {
          "include": "#source-js-type-alias-declaration"
        },
        {
          "include": "#source-js-import-equals-declaration"
        },
        {
          "include": "#source-js-import-declaration"
        },
        {
          "include": "#source-js-export-declaration"
        }
      ]
    },
    "source-js-cfoutput-control-statement": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-js-cfoutput-switch-statement"
        },
        {
          "include": "#source-js-cfoutput-for-loop"
        },
        {
          "name": "keyword.control.trycatch.js",
          "match": "(?<!\\.|\\$)\\b(catch|finally|throw|try)\\b(?!\\$|\\.)"
        },
        {
          "name": "keyword.control.loop.js",
          "match": "(?<!\\.|\\$)\\b(break|continue|do|goto|while)\\b(?!\\$|\\.)"
        },
        {
          "name": "keyword.control.flow.js",
          "match": "(?<!\\.|\\$)\\b(return)\\b(?!\\$|\\.)"
        },
        {
          "name": "keyword.control.switch.js",
          "match": "(?<!\\.|\\$)\\b(case|default|switch)\\b(?!\\$|\\.)"
        },
        {
          "name": "keyword.control.conditional.js",
          "match": "(?<!\\.|\\$)\\b(else|if)\\b(?!\\$|\\.)"
        },
        {
          "name": "keyword.control.with.js",
          "match": "(?<!\\.|\\$)\\b(with)\\b(?!\\$|\\.)"
        },
        {
          "name": "keyword.other.debugger.js",
          "match": "(?<!\\.|\\$)\\b(debugger)\\b(?!\\$|\\.)"
        },
        {
          "name": "storage.modifier.js",
          "match": "(?<!\\.|\\$)\\b(declare)\\b(?!\\$|\\.)"
        }
      ]
    },
    "source-js-cfoutput-switch-statement": {
      "name": "switch-statement.expr.js",
      "begin": "(?<!\\.|\\$)(?=\\bswitch\\s*\\()",
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.js"
        }
      },
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "name": "switch-expression.expr.js",
          "begin": "(?<!\\.|\\$)\\b(switch)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.switch.js"
            },
            "2": {
              "name": "meta.brace.round.js"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.brace.round.js"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-js-cfoutput-expression"
            }
          ]
        },
        {
          "name": "switch-block.expr.js",
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.block.js"
            }
          },
          "end": "(?=\\})",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "name": "case-clause.expr.js",
              "begin": "(?<!\\.|\\$)\\b(case|default(?=:))\\b(?!\\$|\\.)",
              "beginCaptures": {
                "1": {
                  "name": "keyword.control.switch.js"
                }
              },
              "end": ":",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.section.case-statement.js"
                }
              },
              "patterns": [
                {
                  "include": "#cfoutput-injection"
                },
                {
                  "include": "#source-js-cfoutput-expression"
                }
              ]
            },
            {
              "include": "#source-js-cfoutput-statements"
            }
          ]
        }
      ]
    },
    "source-js-cfoutput-for-loop": {
      "begin": "(?<!\\.|\\$)\\b(for)(?:\\s+(await))?\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.loop.js"
        },
        "2": {
          "name": "keyword.control.loop.js"
        },
        "3": {
          "name": "meta.brace.round.js"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-js-cfoutput-var-expr"
        },
        {
          "include": "#source-js-cfoutput-expression"
        },
        {
          "include": "#source-js-punctuation-semicolon"
        }
      ]
    },
    "source-js-cfoutput-decl-block": {
      "name": "meta.block.js",
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.block.js"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.js"
        }
      },
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-js-cfoutput-statements"
        }
      ]
    },
    "source-js-cfoutput-after-operator-block-as-object-literal": {
      "name": "meta.objectliteral.js",
      "begin": "(?<=[=(,\\[?+!]|await|return|yield|throw|in|of|typeof|&&|\\|\\||\\*)\\s*(\\{)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.block.js"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.js"
        }
      },
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-js-cfoutput-object-member"
        }
      ]
    },
    "source-js-cfoutput-object-literal": {
      "name": "meta.objectliteral.js",
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.block.js"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.js"
        }
      },
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-js-cfoutput-object-member"
        }
      ]
    },
    "source-js-cfoutput-object-member": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-js-cfoutput-comment"
        },
        {
          "include": "#source-js-object-literal-method-declaration"
        },
        {
          "name": "meta.object.member.js meta.object-literal.key.js",
          "begin": "(?=\\[)",
          "end": "(?=:)",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-js-cfoutput-array-literal"
            }
          ]
        },
        {
          "name": "meta.object.member.js meta.object-literal.key.js",
          "begin": "(?=[\\'\\\"])",
          "end": "(?=:)",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-js-cfoutput-string"
            }
          ]
        },
        {
          "name": "meta.object.member.js",
          "match": "(?![_$[:alpha:]])([[:digit:]]+)\\s*(?=:)",
          "captures": {
            "0": {
              "name": "meta.object-literal.key.js"
            },
            "1": {
              "name": "constant.numeric.decimal.js"
            }
          }
        },
        {
          "name": "meta.object.member.js",
          "match": "(?x)(?:([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=:\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    # sure shot arrow functions even if => is on new line\n(\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                 # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                            # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                        # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))([^=<>]|=[^<])*\\>)*>\\s*)?                                                           # typeparameters\n  \\(\\s*([_$[:alpha:]\\{\\[]([^()]|\\((\\s*[^()]*)?\\))*)?\\)                          # parameteres\n  (\\s*:\\s*([^<>\\(\\)]|\\<[^<>]+\\>|\\([^\\(\\)]+\\))+)?                                # return type\n  \\s*=>                                                                         # arrow operator\n)\n  ))\n)))",
          "captures": {
            "0": {
              "name": "meta.object-literal.key.js"
            },
            "1": {
              "name": "entity.name.function.js"
            }
          }
        },
        {
          "name": "meta.object.member.js",
          "match": "(?:[_$[:alpha:]][_$[:alnum:]]*)\\s*(?=:)",
          "captures": {
            "0": {
              "name": "meta.object-literal.key.js"
            }
          }
        },
        {
          "name": "meta.object.member.js",
          "begin": "\\.\\.\\.",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.spread.js"
            }
          },
          "end": "(?=,|\\})",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-js-cfoutput-expression"
            }
          ]
        },
        {
          "name": "meta.object.member.js",
          "match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=,|\\}|$)",
          "captures": {
            "1": {
              "name": "variable.other.readwrite.js"
            }
          }
        },
        {
          "name": "meta.object.member.js",
          "begin": "(?=[_$[:alpha:]][_$[:alnum:]]*\\s*=)",
          "end": "(?=,|\\}|$)",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-js-cfoutput-expression"
            }
          ]
        },
        {
          "name": "meta.object.member.js",
          "begin": ":",
          "beginCaptures": {
            "0": {
              "name": "meta.object-literal.key.js punctuation.separator.key-value.js"
            }
          },
          "end": "(?=,|\\})",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-js-cfoutput-expression"
            }
          ]
        },
        {
          "include": "#source-js-punctuation-comma"
        }
      ]
    },
    "source-js-cfoutput-decorator": {
      "name": "meta.decorator.js",
      "begin": "(?<!\\.|\\$)\\@",
      "beginCaptures": {
        "0": {
          "name": "punctuation.decorator.js"
        }
      },
      "end": "(?=\\s)",
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-js-cfoutput-expression"
        }
      ]
    },
    "source-js-cfoutput-new-expr": {
      "name": "new.expr.js",
      "begin": "(?<!\\.|\\$)\\b(new)\\b(?!\\$|\\.)",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.new.js"
        }
      },
      "end": "(?<=\\))|(?=[;),}\\]]|$|((?<!\\.|\\$)\\bnew\\b(?!\\$|\\.))|((?<!\\.|\\$)\\bfunction((\\s+[_$[:alpha:]][_$[:alnum:]]*)|(\\s*[\\(]))))",
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-js-cfoutput-paren-expression"
        },
        {
          "include": "#source-js-class-declaration"
        },
        {
          "include": "#source-js-type"
        }
      ]
    },
    "source-js-cfoutput-paren-expression": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.round.js"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "meta.brace.round.js"
        }
      },
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-js-cfoutput-expression"
        },
        {
          "include": "#source-js-punctuation-comma"
        }
      ]
    },
    "source-js-cfoutput-expression-operators": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "name": "keyword.control.flow.js",
          "match": "(?<!\\.|\\$)\\b(await)\\b(?!\\$|\\.)"
        },
        {
          "match": "(?<!\\.|\\$)\\b(yield)\\b(?!\\$|\\.)(?:\\s*(\\*))?",
          "captures": {
            "1": {
              "name": "keyword.control.flow.js"
            },
            "2": {
              "name": "keyword.generator.asterisk.js"
            }
          }
        },
        {
          "name": "keyword.operator.expression.delete.js",
          "match": "(?<!\\.|\\$)\\bdelete\\b(?!\\$|\\.)"
        },
        {
          "name": "keyword.operator.expression.in.js",
          "match": "(?<!\\.|\\$)\\bin\\b(?!\\$|\\.)"
        },
        {
          "name": "keyword.operator.expression.of.js",
          "match": "(?<!\\.|\\$)\\bof\\b(?!\\$|\\.)"
        },
        {
          "name": "keyword.operator.expression.instanceof.js",
          "match": "(?<!\\.|\\$)\\binstanceof\\b(?!\\$|\\.)"
        },
        {
          "name": "keyword.operator.new.js",
          "match": "(?<!\\.|\\$)\\bnew\\b(?!\\$|\\.)"
        },
        {
          "include": "#source-js-typeof-operator"
        },
        {
          "name": "keyword.operator.expression.void.js",
          "match": "(?<!\\.|\\$)\\bvoid\\b(?!\\$|\\.)"
        },
        {
          "begin": "(?<!\\.|\\$)\\b(as)\\s+",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.as.js"
            }
          },
          "end": "(?=$|^|[;,:})\\]]|((?<!\\.|\\$)\\b(as)\\s+))",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-js-type"
            }
          ]
        },
        {
          "name": "keyword.operator.spread.js",
          "match": "\\.\\.\\."
        },
        {
          "name": "keyword.operator.assignment.compound.js",
          "match": "\\*=|(?<!\\()/=|%=|\\+=|\\-="
        },
        {
          "name": "keyword.operator.assignment.compound.bitwise.js",
          "match": "\\&=|\\^=|<<=|>>=|>>>=|\\|="
        },
        {
          "name": "keyword.operator.bitwise.shift.js",
          "match": "<<|>>>|>>"
        },
        {
          "name": "keyword.operator.comparison.js",
          "match": "===|!==|==|!="
        },
        {
          "name": "keyword.operator.relational.js",
          "match": "<=|>=|<>|<|>"
        },
        {
          "name": "keyword.operator.logical.js",
          "match": "\\!|&&|\\|\\|"
        },
        {
          "name": "keyword.operator.bitwise.js",
          "match": "\\&|~|\\^|\\|"
        },
        {
          "name": "keyword.operator.assignment.js",
          "match": "\\="
        },
        {
          "name": "keyword.operator.decrement.js",
          "match": "--"
        },
        {
          "name": "keyword.operator.increment.js",
          "match": "\\+\\+"
        },
        {
          "name": "keyword.operator.arithmetic.js",
          "match": "%|\\*|/|-|\\+"
        },
        {
          "match": "(?<=[_$[:alnum:])])\\s*(/)(?![/*])",
          "captures": {
            "1": {
              "name": "keyword.operator.arithmetic.js"
            }
          }
        }
      ]
    },
    "source-js-cfoutput-ternary-expression": {
      "begin": "\\?",
      "beginCaptures": {
        "0": {
          "name": "keyword.operator.ternary.js"
        }
      },
      "end": ":",
      "endCaptures": {
        "0": {
          "name": "keyword.operator.ternary.js"
        }
      },
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-js-cfoutput-expression"
        }
      ]
    },
    "source-js-cfoutput-function-call": {
      "begin": "(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\.\\s*)*|(\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*)\\s*(<\\s*(([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))([^<>\\(]|(\\([^\\(\\)]*\\))|\\<\\s*(([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))([^<>\\(]|(\\([^\\(\\)]*\\)))*\\>)*>\\s*)?\\()",
      "end": "(?<=\\))(?!(([_$[:alpha:]][_$[:alnum:]]*\\s*\\.\\s*)*|(\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*)\\s*(<\\s*(([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))([^<>\\(]|(\\([^\\(\\)]*\\))|\\<\\s*(([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))([^<>\\(]|(\\([^\\(\\)]*\\)))*\\>)*>\\s*)?\\()",
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "name": "meta.function-call.js",
          "begin": "(?=(([_$[:alpha:]][_$[:alnum:]]*\\s*\\.\\s*)*|(\\.\\s*)?)([_$[:alpha:]][_$[:alnum:]]*))",
          "end": "(?=\\s*(<\\s*(([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))([^<>\\(]|(\\([^\\(\\)]*\\))|\\<\\s*(([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))|(\\'[^\\']*\\')|(\\\"[^\\\"]*\\\")|(\\`[^\\`]*\\`))([^<>\\(]|(\\([^\\(\\)]*\\)))*\\>)*>\\s*)?\\()",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-js-cfoutput-literal"
            },
            {
              "include": "#source-js-cfoutput-support-objects"
            },
            {
              "include": "#source-js-cfoutput-object-identifiers"
            },
            {
              "include": "#source-js-punctuation-accessor"
            },
            {
              "name": "keyword.operator.expression.import.js",
              "match": "(?![\\.\\$])\\bimport(?=\\s*[\\(]\\s*[\\\"\\'\\`])"
            },
            {
              "name": "entity.name.function.js",
              "match": "([_$[:alpha:]][_$[:alnum:]]*)"
            }
          ]
        },
        {
          "include": "#source-js-cfoutput-comment"
        },
        {
          "name": "meta.type.parameters.js",
          "begin": "\\<",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.typeparameters.begin.js"
            }
          },
          "end": "\\>",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.typeparameters.end.js"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-js-type"
            },
            {
              "include": "#source-js-punctuation-comma"
            }
          ]
        },
        {
          "include": "#source-js-cfoutput-paren-expression"
        }
      ]
    },
    "source-js-cfoutput-identifiers": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-js-cfoutput-object-identifiers"
        },
        {
          "match": "(?x)(?:(\\.)\\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    # sure shot arrow functions even if => is on new line\n(\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                 # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                            # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                        # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))([^=<>]|=[^<])*\\>)*>\\s*)?                                                           # typeparameters\n  \\(\\s*([_$[:alpha:]\\{\\[]([^()]|\\((\\s*[^()]*)?\\))*)?\\)                          # parameteres\n  (\\s*:\\s*([^<>\\(\\)]|\\<[^<>]+\\>|\\([^\\(\\)]+\\))+)?                                # return type\n  \\s*=>                                                                         # arrow operator\n)\n  ))\n))",
          "captures": {
            "1": {
              "name": "punctuation.accessor.js"
            },
            "2": {
              "name": "entity.name.function.js"
            }
          }
        },
        {
          "match": "(\\.)\\s*([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])",
          "captures": {
            "1": {
              "name": "punctuation.accessor.js"
            },
            "2": {
              "name": "variable.other.constant.property.js"
            }
          }
        },
        {
          "match": "(\\.)\\s*([_$[:alpha:]][_$[:alnum:]]*)",
          "captures": {
            "1": {
              "name": "punctuation.accessor.js"
            },
            "2": {
              "name": "variable.other.property.js"
            }
          }
        },
        {
          "name": "variable.other.constant.js",
          "match": "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])"
        },
        {
          "name": "variable.other.readwrite.js",
          "match": "[_$[:alpha:]][_$[:alnum:]]*"
        }
      ]
    },
    "source-js-cfoutput-literal": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-js-cfoutput-numeric-literal"
        },
        {
          "include": "#source-js-cfoutput-boolean-literal"
        },
        {
          "include": "#source-js-null-literal"
        },
        {
          "include": "#source-js-undefined-literal"
        },
        {
          "include": "#source-js-cfoutput-numericConstant-literal"
        },
        {
          "include": "#source-js-cfoutput-array-literal"
        },
        {
          "include": "#source-js-this-literal"
        },
        {
          "include": "#source-js-super-literal"
        }
      ]
    },
    "source-js-cfoutput-array-literal": {
      "name": "meta.array.literal.js",
      "begin": "\\[",
      "beginCaptures": {
        "0": {
          "name": "meta.brace.square.js"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "meta.brace.square.js"
        }
      },
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-js-cfoutput-expression"
        },
        {
          "include": "#source-js-punctuation-comma"
        }
      ]
    },
    "source-js-cfoutput-numeric-literal": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "name": "constant.numeric.hex.js",
          "match": "\\b(?<!\\$)0(x|X)[0-9a-fA-F]+\\b(?!\\$)"
        },
        {
          "name": "constant.numeric.binary.js",
          "match": "\\b(?<!\\$)0(b|B)[01]+\\b(?!\\$)"
        },
        {
          "name": "constant.numeric.octal.js",
          "match": "\\b(?<!\\$)0(o|O)?[0-7]+\\b(?!\\$)"
        },
        {
          "match": "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9]+(\\.)[0-9]+[eE][+-]?[0-9]+\\b)| # 1.1E+3\n  (?:\\b[0-9]+(\\.)[eE][+-]?[0-9]+\\b)|       # 1.E+3\n  (?:\\B(\\.)[0-9]+[eE][+-]?[0-9]+\\b)|       # .1E+3\n  (?:\\b[0-9]+[eE][+-]?[0-9]+\\b)|           # 1E+3\n  (?:\\b[0-9]+(\\.)[0-9]+\\b)|                # 1.1\n  (?:\\b[0-9]+(\\.)\\B)|                      # 1.\n  (?:\\B(\\.)[0-9]+\\b)|                      # .1\n  (?:\\b[0-9]+\\b(?!\\.))                     # 1\n)(?!\\$)",
          "captures": {
            "0": {
              "name": "constant.numeric.decimal.js"
            },
            "1": {
              "name": "meta.delimiter.decimal.period.js"
            },
            "2": {
              "name": "meta.delimiter.decimal.period.js"
            },
            "3": {
              "name": "meta.delimiter.decimal.period.js"
            },
            "4": {
              "name": "meta.delimiter.decimal.period.js"
            },
            "5": {
              "name": "meta.delimiter.decimal.period.js"
            },
            "6": {
              "name": "meta.delimiter.decimal.period.js"
            }
          }
        }
      ]
    },
    "source-js-cfoutput-boolean-literal": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "name": "constant.language.boolean.true.js",
          "match": "(?<!\\.|\\$)\\btrue\\b(?!\\$)"
        },
        {
          "name": "constant.language.boolean.false.js",
          "match": "(?<!\\.|\\$)\\bfalse\\b(?!\\$)"
        }
      ]
    },
    "source-js-cfoutput-numericConstant-literal": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "name": "constant.language.nan.js",
          "match": "(?<!\\.|\\$)\\bNaN\\b(?!\\$)"
        },
        {
          "name": "constant.language.infinity.js",
          "match": "(?<!\\.|\\$)\\bInfinity\\b(?!\\$)"
        }
      ]
    },
    "source-js-cfoutput-support-objects": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "name": "variable.language.arguments.js",
          "match": "(?<!\\.|\\$)\\b(arguments)\\b(?!\\$)"
        },
        {
          "name": "support.class.builtin.js",
          "match": "(?x)(?<!\\.|\\$)\\b(Array|ArrayBuffer|Atomics|Boolean|DataView|Date|Float32Array|Float64Array|Function|Generator\n  |GeneratorFunction|Int8Array|Int16Array|Int32Array|Intl|Map|Number|Object|Promise|Proxy\n  |Reflect|RegExp|Set|SharedArrayBuffer|SIMD|String|Symbol|TypedArray\n  |Uint8Array|Uint16Array|Uint32Array|Uint8ClampedArray|WeakMap|WeakSet)\\b(?!\\$)"
        },
        {
          "name": "support.class.error.js",
          "match": "(?<!\\.|\\$)\\b((Eval|Internal|Range|Reference|Syntax|Type|URI)?Error)\\b(?!\\$)"
        },
        {
          "name": "support.function.js",
          "match": "(?x)(?<!\\.|\\$)\\b(clear(Interval|Timeout)|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|\n  isFinite|isNaN|parseFloat|parseInt|require|set(Interval|Timeout)|super|unescape|uneval)(?=\\s*\\()"
        },
        {
          "match": "(?x)(?<!\\.|\\$)\\b(Math)(?:\\s*(\\.)\\s*(?:\n  (abs|acos|acosh|asin|asinh|atan|atan2|atanh|cbrt|ceil|clz32|cos|cosh|exp|\n  expm1|floor|fround|hypot|imul|log|log10|log1p|log2|max|min|pow|random|\n  round|sign|sin|sinh|sqrt|tan|tanh|trunc)\n  |\n  (E|LN10|LN2|LOG10E|LOG2E|PI|SQRT1_2|SQRT2)))?\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "support.constant.math.js"
            },
            "2": {
              "name": "punctuation.accessor.js"
            },
            "3": {
              "name": "support.function.math.js"
            },
            "4": {
              "name": "support.constant.property.math.js"
            }
          }
        },
        {
          "match": "(?x)(?<!\\.|\\$)\\b(console)(?:\\s*(\\.)\\s*(\n  assert|clear|count|debug|dir|error|group|groupCollapsed|groupEnd|info|log\n  |profile|profileEnd|table|time|timeEnd|timeStamp|trace|warn))?\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "support.class.console.js"
            },
            "2": {
              "name": "punctuation.accessor.js"
            },
            "3": {
              "name": "support.function.console.js"
            }
          }
        },
        {
          "match": "(?<!\\.|\\$)\\b(JSON)(?:\\s*(\\.)\\s*(parse|stringify))?\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "support.constant.json.js"
            },
            "2": {
              "name": "punctuation.accessor.js"
            },
            "3": {
              "name": "support.function.json.js"
            }
          }
        },
        {
          "match": "(?x) (\\.) \\s* (?:\n  (constructor|length|prototype|__proto__)\n  |\n  (EPSILON|MAX_SAFE_INTEGER|MAX_VALUE|MIN_SAFE_INTEGER|MIN_VALUE|NEGATIVE_INFINITY|POSITIVE_INFINITY))\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "punctuation.accessor.js"
            },
            "2": {
              "name": "support.variable.property.js"
            },
            "3": {
              "name": "support.constant.js"
            }
          }
        },
        {
          "match": "(?x) (?<!\\.|\\$) \\b (?:\n  (document|event|navigator|performance|screen|window)\n  |\n  (AnalyserNode|ArrayBufferView|Attr|AudioBuffer|AudioBufferSourceNode|AudioContext|AudioDestinationNode|AudioListener\n  |AudioNode|AudioParam|BatteryManager|BeforeUnloadEvent|BiquadFilterNode|Blob|BufferSource|ByteString|CSS|CSSConditionRule\n  |CSSCounterStyleRule|CSSGroupingRule|CSSMatrix|CSSMediaRule|CSSPageRule|CSSPrimitiveValue|CSSRule|CSSRuleList|CSSStyleDeclaration\n  |CSSStyleRule|CSSStyleSheet|CSSSupportsRule|CSSValue|CSSValueList|CanvasGradient|CanvasImageSource|CanvasPattern\n  |CanvasRenderingContext2D|ChannelMergerNode|ChannelSplitterNode|CharacterData|ChromeWorker|CloseEvent|Comment|CompositionEvent\n  |Console|ConvolverNode|Coordinates|Credential|CredentialsContainer|Crypto|CryptoKey|CustomEvent|DOMError|DOMException\n  |DOMHighResTimeStamp|DOMImplementation|DOMString|DOMStringList|DOMStringMap|DOMTimeStamp|DOMTokenList|DataTransfer\n  |DataTransferItem|DataTransferItemList|DedicatedWorkerGlobalScope|DelayNode|DeviceProximityEvent|DirectoryEntry\n  |DirectoryEntrySync|DirectoryReader|DirectoryReaderSync|Document|DocumentFragment|DocumentTouch|DocumentType|DragEvent\n  |DynamicsCompressorNode|Element|Entry|EntrySync|ErrorEvent|Event|EventListener|EventSource|EventTarget|FederatedCredential\n  |FetchEvent|File|FileEntry|FileEntrySync|FileException|FileList|FileReader|FileReaderSync|FileSystem|FileSystemSync\n  |FontFace|FormData|GainNode|Gamepad|GamepadButton|GamepadEvent|Geolocation|GlobalEventHandlers|HTMLAnchorElement\n  |HTMLAreaElement|HTMLAudioElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement\n  |HTMLCollection|HTMLContentElement|HTMLDListElement|HTMLDataElement|HTMLDataListElement|HTMLDialogElement|HTMLDivElement\n  |HTMLDocument|HTMLElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormControlsCollection|HTMLFormElement\n  |HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement\n  |HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMediaElement\n  |HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement\n  |HTMLOptionsCollection|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement\n  |HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement\n  |HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement\n  |HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTimeElement|HTMLTitleElement|HTMLTrackElement\n  |HTMLUListElement|HTMLUnknownElement|HTMLVideoElement|HashChangeEvent|History|IDBCursor|IDBCursorWithValue|IDBDatabase\n  |IDBEnvironment|IDBFactory|IDBIndex|IDBKeyRange|IDBMutableFile|IDBObjectStore|IDBOpenDBRequest|IDBRequest|IDBTransaction\n  |IDBVersionChangeEvent|IIRFilterNode|IdentityManager|ImageBitmap|ImageBitmapFactories|ImageData|Index|InputDeviceCapabilities\n  |InputEvent|InstallEvent|InstallTrigger|KeyboardEvent|LinkStyle|LocalFileSystem|LocalFileSystemSync|Location|MIDIAccess\n  |MIDIConnectionEvent|MIDIInput|MIDIInputMap|MIDIOutputMap|MediaElementAudioSourceNode|MediaError|MediaKeyMessageEvent\n  |MediaKeySession|MediaKeyStatusMap|MediaKeySystemAccess|MediaKeySystemConfiguration|MediaKeys|MediaRecorder|MediaStream\n  |MediaStreamAudioDestinationNode|MediaStreamAudioSourceNode|MessageChannel|MessageEvent|MessagePort|MouseEvent\n  |MutationObserver|MutationRecord|NamedNodeMap|Navigator|NavigatorConcurrentHardware|NavigatorGeolocation|NavigatorID\n  |NavigatorLanguage|NavigatorOnLine|Node|NodeFilter|NodeIterator|NodeList|NonDocumentTypeChildNode|Notification\n  |OfflineAudioCompletionEvent|OfflineAudioContext|OscillatorNode|PageTransitionEvent|PannerNode|ParentNode|PasswordCredential\n  |Path2D|PaymentAddress|PaymentRequest|PaymentResponse|Performance|PerformanceEntry|PerformanceFrameTiming|PerformanceMark\n  |PerformanceMeasure|PerformanceNavigation|PerformanceNavigationTiming|PerformanceObserver|PerformanceObserverEntryList\n  |PerformanceResourceTiming|PerformanceTiming|PeriodicSyncEvent|PeriodicWave|Plugin|Point|PointerEvent|PopStateEvent\n  |PortCollection|Position|PositionError|PositionOptions|PresentationConnectionClosedEvent|PresentationConnectionList\n  |PresentationReceiver|ProcessingInstruction|ProgressEvent|PromiseRejectionEvent|PushEvent|PushRegistrationManager\n  |RTCCertificate|RTCConfiguration|RTCPeerConnection|RTCSessionDescriptionCallback|RTCStatsReport|RadioNodeList|RandomSource\n  |Range|ReadableByteStream|RenderingContext|SVGAElement|SVGAngle|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement\n  |SVGAnimateTransformElement|SVGAnimatedAngle|SVGAnimatedBoolean|SVGAnimatedEnumeration|SVGAnimatedInteger|SVGAnimatedLength\n  |SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedPoints|SVGAnimatedPreserveAspectRatio\n  |SVGAnimatedRect|SVGAnimatedString|SVGAnimatedTransformList|SVGAnimationElement|SVGCircleElement|SVGClipPathElement\n  |SVGCursorElement|SVGDefsElement|SVGDescElement|SVGElement|SVGEllipseElement|SVGEvent|SVGFilterElement|SVGFontElement\n  |SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement\n  |SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGradientElement|SVGHKernElement|SVGImageElement|SVGLength\n  |SVGLengthList|SVGLineElement|SVGLinearGradientElement|SVGMPathElement|SVGMaskElement|SVGMatrix|SVGMissingGlyphElement\n  |SVGNumber|SVGNumberList|SVGPathElement|SVGPatternElement|SVGPoint|SVGPolygonElement|SVGPolylineElement|SVGPreserveAspectRatio\n  |SVGRadialGradientElement|SVGRect|SVGRectElement|SVGSVGElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStringList\n  |SVGStylable|SVGStyleElement|SVGSwitchElement|SVGSymbolElement|SVGTRefElement|SVGTSpanElement|SVGTests|SVGTextElement\n  |SVGTextPositioningElement|SVGTitleElement|SVGTransform|SVGTransformList|SVGTransformable|SVGUseElement|SVGVKernElement\n  |SVGViewElement|ServiceWorker|ServiceWorkerContainer|ServiceWorkerGlobalScope|ServiceWorkerRegistration|ServiceWorkerState\n  |ShadowRoot|SharedWorker|SharedWorkerGlobalScope|SourceBufferList|StereoPannerNode|Storage|StorageEvent|StyleSheet\n  |StyleSheetList|SubtleCrypto|SyncEvent|Text|TextMetrics|TimeEvent|TimeRanges|Touch|TouchEvent|TouchList|Transferable\n  |TreeWalker|UIEvent|USVString|VRDisplayCapabilities|ValidityState|WaveShaperNode|WebGL|WebGLActiveInfo|WebGLBuffer\n  |WebGLContextEvent|WebGLFramebuffer|WebGLProgram|WebGLRenderbuffer|WebGLRenderingContext|WebGLShader|WebGLShaderPrecisionFormat\n  |WebGLTexture|WebGLTimerQueryEXT|WebGLTransformFeedback|WebGLUniformLocation|WebGLVertexArrayObject|WebGLVertexArrayObjectOES\n  |WebSocket|WebSockets|WebVTT|WheelEvent|Window|WindowBase64|WindowEventHandlers|WindowTimers|Worker|WorkerGlobalScope\n  |WorkerLocation|WorkerNavigator|XMLHttpRequest|XMLHttpRequestEventTarget|XMLSerializer|XPathExpression|XPathResult\n  |XSLTProcessor))\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "support.variable.dom.js"
            },
            "2": {
              "name": "support.class.dom.js"
            }
          }
        },
        {
          "match": "(?x) (\\.) \\s* (?:\n  (ATTRIBUTE_NODE|CDATA_SECTION_NODE|COMMENT_NODE|DOCUMENT_FRAGMENT_NODE|DOCUMENT_NODE|DOCUMENT_TYPE_NODE\n  |DOMSTRING_SIZE_ERR|ELEMENT_NODE|ENTITY_NODE|ENTITY_REFERENCE_NODE|HIERARCHY_REQUEST_ERR|INDEX_SIZE_ERR\n  |INUSE_ATTRIBUTE_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR\n  |NOT_SUPPORTED_ERR|NOTATION_NODE|PROCESSING_INSTRUCTION_NODE|TEXT_NODE|WRONG_DOCUMENT_ERR)\n  |\n  (_content|[xyz]|abbr|above|accept|acceptCharset|accessKey|action|align|[av]Link(?:color)?|all|alt|anchors|appCodeName\n  |appCore|applets|appMinorVersion|appName|appVersion|archive|areas|arguments|attributes|availHeight|availLeft|availTop\n  |availWidth|axis|background|backgroundColor|backgroundImage|below|bgColor|body|border|borderBottomWidth|borderColor\n  |borderLeftWidth|borderRightWidth|borderStyle|borderTopWidth|borderWidth|bottom|bufferDepth|callee|caller|caption\n  |cellPadding|cells|cellSpacing|ch|characterSet|charset|checked|childNodes|chOff|cite|classes|className|clear\n  |clientInformation|clip|clipBoardData|closed|code|codeBase|codeType|color|colorDepth|cols|colSpan|compact|complete\n  |components|content|controllers|cookie|cookieEnabled|cords|cpuClass|crypto|current|data|dateTime|declare|defaultCharset\n  |defaultChecked|defaultSelected|defaultStatus|defaultValue|defaultView|defer|description|dialogArguments|dialogHeight\n  |dialogLeft|dialogTop|dialogWidth|dir|directories|disabled|display|docmain|doctype|documentElement|elements|embeds\n  |enabledPlugin|encoding|enctype|entities|event|expando|external|face|fgColor|filename|firstChild|fontFamily|fontSize\n  |fontWeight|form|formName|forms|frame|frameBorder|frameElement|frames|hasFocus|hash|headers|height|history|host\n  |hostname|href|hreflang|hspace|htmlFor|httpEquiv|id|ids|ignoreCase|images|implementation|index|innerHeight|innerWidth\n  |input|isMap|label|lang|language|lastChild|lastIndex|lastMatch|lastModified|lastParen|layer[sXY]|left|leftContext\n  |lineHeight|link|linkColor|links|listStyleType|localName|location|locationbar|longDesc|lowsrc|lowSrc|marginBottom\n  |marginHeight|marginLeft|marginRight|marginTop|marginWidth|maxLength|media|menubar|method|mimeTypes|multiline|multiple\n  |name|nameProp|namespaces|namespaceURI|next|nextSibling|nodeName|nodeType|nodeValue|noHref|noResize|noShade|notationName\n  |notations|noWrap|object|offscreenBuffering|onLine|onreadystatechange|opener|opsProfile|options|oscpu|outerHeight\n  |outerWidth|ownerDocument|paddingBottom|paddingLeft|paddingRight|paddingTop|page[XY]|page[XY]Offset|parent|parentLayer\n  |parentNode|parentWindow|pathname|personalbar|pixelDepth|pkcs11|platform|plugins|port|prefix|previous|previousDibling\n  |product|productSub|profile|profileend|prompt|prompter|protocol|publicId|readOnly|readyState|referrer|rel|responseText\n  |responseXML|rev|right|rightContext|rowIndex|rows|rowSpan|rules|scheme|scope|screen[XY]|screenLeft|screenTop|scripts\n  |scrollbars|scrolling|sectionRowIndex|security|securityPolicy|selected|selectedIndex|selection|self|shape|siblingAbove\n  |siblingBelow|size|source|specified|standby|start|status|statusbar|statusText|style|styleSheets|suffixes|summary\n  |systemId|systemLanguage|tagName|tags|target|tBodies|text|textAlign|textDecoration|textIndent|textTransform|tFoot|tHead\n  |title|toolbar|top|type|undefined|uniqueID|updateInterval|URL|URLUnencoded|useMap|userAgent|userLanguage|userProfile\n  |vAlign|value|valueType|vendor|vendorSub|version|visibility|vspace|whiteSpace|width|X[MS]LDocument|zIndex))\\b(?!\\$|\\s*(<\\s*([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))([^=<>]|=[^<])*\\>)*>\\s*)?\\()",
          "captures": {
            "1": {
              "name": "punctuation.accessor.js"
            },
            "2": {
              "name": "support.constant.dom.js"
            },
            "3": {
              "name": "support.variable.property.dom.js"
            }
          }
        },
        {
          "name": "support.class.node.js",
          "match": "(?x)(?<!\\.|\\$)\\b(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream\n  |Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)\\b(?!\\$)"
        },
        {
          "match": "(?x)(?<!\\.|\\$)\\b(process)(?:(\\.)(?:\n  (arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions)\n  |\n  (abort|chdir|cwd|disconnect|exit|[sg]ete?[gu]id|send|[sg]etgroups|initgroups|kill|memoryUsage|nextTick|umask|uptime|hrtime)\n))?\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "support.variable.object.process.js"
            },
            "2": {
              "name": "punctuation.accessor.js"
            },
            "3": {
              "name": "support.variable.property.process.js"
            },
            "4": {
              "name": "support.function.process.js"
            }
          }
        },
        {
          "match": "(?<!\\.|\\$)\\b(?:(exports)|(module)(?:(\\.)(exports|id|filename|loaded|parent|children))?)\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "support.type.object.module.js"
            },
            "2": {
              "name": "support.type.object.module.js"
            },
            "3": {
              "name": "punctuation.accessor.js"
            },
            "4": {
              "name": "support.type.object.module.js"
            }
          }
        },
        {
          "name": "support.variable.object.node.js",
          "match": "(?<!\\.|\\$)\\b(global|GLOBAL|root|__dirname|__filename)\\b(?!\\$)"
        },
        {
          "match": "(?x) (\\.) \\s*\n(?:\n (on(?:Rowsinserted|Rowsdelete|Rowenter|Rowexit|Resize|Resizestart|Resizeend|Reset|\n   Readystatechange|Mouseout|Mouseover|Mousedown|Mouseup|Mousemove|\n   Before(?:cut|deactivate|unload|update|paste|print|editfocus|activate)|\n   Blur|Scrolltop|Submit|Select|Selectstart|Selectionchange|Hover|Help|\n   Change|Contextmenu|Controlselect|Cut|Cellchange|Clock|Close|Deactivate|\n   Datasetchanged|Datasetcomplete|Dataavailable|Drop|Drag|Dragstart|Dragover|\n   Dragdrop|Dragenter|Dragend|Dragleave|Dblclick|Unload|Paste|Propertychange|Error|\n   Errorupdate|Keydown|Keyup|Keypress|Focus|Load|Activate|Afterupdate|Afterprint|Abort)\n ) |\n (shift|showModelessDialog|showModalDialog|showHelp|scroll|scrollX|scrollByPages|\n   scrollByLines|scrollY|scrollTo|stop|strike|sizeToContent|sidebar|signText|sort|\n   sup|sub|substr|substring|splice|split|send|set(?:Milliseconds|Seconds|Minutes|Hours|\n   Month|Year|FullYear|Date|UTC(?:Milliseconds|Seconds|Minutes|Hours|Month|FullYear|Date)|\n   Time|Hotkeys|Cursor|ZOptions|Active|Resizable|RequestHeader)|search|slice|\n   savePreferences|small|home|handleEvent|navigate|char|charCodeAt|charAt|concat|\n   contextual|confirm|compile|clear|captureEvents|call|createStyleSheet|createPopup|\n   createEventObject|to(?:GMTString|UTCString|String|Source|UpperCase|LowerCase|LocaleString)|\n   test|taint|taintEnabled|indexOf|italics|disableExternalCapture|dump|detachEvent|unshift|\n   untaint|unwatch|updateCommands|join|javaEnabled|pop|push|plugins.refresh|paddings|parse|\n   print|prompt|preference|enableExternalCapture|exec|execScript|valueOf|UTC|find|file|\n   fileModifiedDate|fileSize|fileCreatedDate|fileUpdatedDate|fixed|fontsize|fontcolor|\n   forward|fromCharCode|watch|link|load|lastIndexOf|anchor|attachEvent|atob|apply|alert|\n   abort|routeEvents|resize|resizeBy|resizeTo|recalc|returnValue|replace|reverse|reload|\n   releaseCapture|releaseEvents|go|get(?:Milliseconds|Seconds|Minutes|Hours|Month|Day|Year|FullYear|\n   Time|Date|TimezoneOffset|UTC(?:Milliseconds|Seconds|Minutes|Hours|Day|Month|FullYear|Date)|\n   Attention|Selection|ResponseHeader|AllResponseHeaders)|moveBy|moveBelow|moveTo|\n   moveToAbsolute|moveAbove|mergeAttributes|match|margins|btoa|big|bold|borderWidths|blink|back\n ) |\n (acceptNode|add|addEventListener|addTextTrack|adoptNode|after|animate|append|\n   appendChild|appendData|before|blur|canPlayType|captureStream|\n   caretPositionFromPoint|caretRangeFromPoint|checkValidity|clear|click|\n   cloneContents|cloneNode|cloneRange|close|closest|collapse|\n   compareBoundaryPoints|compareDocumentPosition|comparePoint|contains|\n   convertPointFromNode|convertQuadFromNode|convertRectFromNode|createAttribute|\n   createAttributeNS|createCaption|createCDATASection|createComment|\n   createContextualFragment|createDocument|createDocumentFragment|\n   createDocumentType|createElement|createElementNS|createEntityReference|\n   createEvent|createExpression|createHTMLDocument|createNodeIterator|\n   createNSResolver|createProcessingInstruction|createRange|createShadowRoot|\n   createTBody|createTextNode|createTFoot|createTHead|createTreeWalker|delete|\n   deleteCaption|deleteCell|deleteContents|deleteData|deleteRow|deleteTFoot|\n   deleteTHead|detach|disconnect|dispatchEvent|elementFromPoint|elementsFromPoint|\n   enableStyleSheetsForSet|entries|evaluate|execCommand|exitFullscreen|\n   exitPointerLock|expand|extractContents|fastSeek|firstChild|focus|forEach|get|\n   getAll|getAnimations|getAttribute|getAttributeNames|getAttributeNode|\n   getAttributeNodeNS|getAttributeNS|getBoundingClientRect|getBoxQuads|\n   getClientRects|getContext|getDestinationInsertionPoints|getElementById|\n   getElementsByClassName|getElementsByName|getElementsByTagName|\n   getElementsByTagNameNS|getItem|getNamedItem|getSelection|getStartDate|\n   getVideoPlaybackQuality|has|hasAttribute|hasAttributeNS|hasAttributes|\n   hasChildNodes|hasFeature|hasFocus|importNode|initEvent|insertAdjacentElement|\n   insertAdjacentHTML|insertAdjacentText|insertBefore|insertCell|insertData|\n   insertNode|insertRow|intersectsNode|isDefaultNamespace|isEqualNode|\n   isPointInRange|isSameNode|item|key|keys|lastChild|load|lookupNamespaceURI|\n   lookupPrefix|matches|move|moveAttribute|moveAttributeNode|moveChild|\n   moveNamedItem|namedItem|nextNode|nextSibling|normalize|observe|open|\n   parentNode|pause|play|postMessage|prepend|preventDefault|previousNode|\n   previousSibling|probablySupportsContext|queryCommandEnabled|\n   queryCommandIndeterm|queryCommandState|queryCommandSupported|queryCommandValue|\n   querySelector|querySelectorAll|registerContentHandler|registerElement|\n   registerProtocolHandler|releaseCapture|releaseEvents|remove|removeAttribute|\n   removeAttributeNode|removeAttributeNS|removeChild|removeEventListener|\n   removeItem|replace|replaceChild|replaceData|replaceWith|reportValidity|\n   requestFullscreen|requestPointerLock|reset|scroll|scrollBy|scrollIntoView|\n   scrollTo|seekToNextFrame|select|selectNode|selectNodeContents|set|setAttribute|\n   setAttributeNode|setAttributeNodeNS|setAttributeNS|setCapture|\n   setCustomValidity|setEnd|setEndAfter|setEndBefore|setItem|setNamedItem|\n   setRangeText|setSelectionRange|setSinkId|setStart|setStartAfter|setStartBefore|\n   slice|splitText|stepDown|stepUp|stopImmediatePropagation|stopPropagation|\n   submit|substringData|supports|surroundContents|takeRecords|terminate|toBlob|\n   toDataURL|toggle|toString|values|write|writeln\n )\n)(?=\\s*\\()",
          "captures": {
            "1": {
              "name": "punctuation.accessor.js"
            },
            "2": {
              "name": "support.function.event-handler.js"
            },
            "3": {
              "name": "support.function.js"
            },
            "4": {
              "name": "support.function.dom.js"
            }
          }
        }
      ]
    },
    "source-js-cfoutput-object-identifiers": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "name": "support.class.js",
          "match": "([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\\.\\s*prototype\\b(?!\\$))"
        },
        {
          "match": "(?x)(\\.)\\s*(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)",
          "captures": {
            "1": {
              "name": "punctuation.accessor.js"
            },
            "2": {
              "name": "variable.other.constant.object.property.js"
            },
            "3": {
              "name": "variable.other.object.property.js"
            }
          }
        },
        {
          "match": "(?x)(?:\n  ([[:upper:]][_$[:digit:][:upper:]]*) |\n  ([_$[:alpha:]][_$[:alnum:]]*)\n)(?=\\s*\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)",
          "captures": {
            "1": {
              "name": "variable.other.constant.object.js"
            },
            "2": {
              "name": "variable.other.object.js"
            }
          }
        }
      ]
    },
    "source-js-cfoutput-var-expr": {
      "name": "meta.var.expr.js",
      "begin": "(?<!\\.|\\$)(?:(\\bexport)\\s+)?\\b(var|let|const(?!\\s+enum\\b))\\b(?!\\$|\\.)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.export.js"
        },
        "2": {
          "name": "storage.type.js"
        }
      },
      "end": "(?=$|^|;|}|(\\s+(of|in)\\s+))",
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-js-destructuring-variable"
        },
        {
          "include": "#source-js-cfoutput-var-single-variable"
        },
        {
          "include": "#source-js-cfoutput-variable-initializer"
        },
        {
          "include": "#source-js-cfoutput-comment"
        },
        {
          "begin": "(,)\\s*(?!\\S)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.separator.comma.js"
            }
          },
          "end": "(?<!,)((?==|;|}|(\\s+(of|in)\\s+)|^\\s*$))|((?<=\\S)(?=\\s*$))",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-js-cfoutput-comment"
            },
            {
              "include": "#source-js-destructuring-variable"
            },
            {
              "include": "#source-js-cfoutput-var-single-variable"
            },
            {
              "include": "#source-js-punctuation-comma"
            }
          ]
        },
        {
          "include": "#source-js-punctuation-comma"
        }
      ]
    },
    "source-js-cfoutput-var-single-variable": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "name": "meta.var-single-variable.expr.js",
          "begin": "(?x)([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    # sure shot arrow functions even if => is on new line\n(\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                 # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                            # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                        # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))([^=<>]|=[^<])*\\>)*>\\s*)?                                                           # typeparameters\n  \\(\\s*([_$[:alpha:]\\{\\[]([^()]|\\((\\s*[^()]*)?\\))*)?\\)                          # parameteres\n  (\\s*:\\s*([^<>\\(\\)]|\\<[^<>]+\\>|\\([^\\(\\)]+\\))+)?                                # return type\n  \\s*=>                                                                         # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>\n(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)))",
          "beginCaptures": {
            "1": {
              "name": "meta.definition.variable.js entity.name.function.js"
            }
          },
          "end": "(?=$|^|[;,=}]|(\\s+(of|in)\\s+))",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-js-cfoutput-var-single-variable-type-annotation"
            }
          ]
        },
        {
          "name": "meta.var-single-variable.expr.js",
          "begin": "([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])",
          "beginCaptures": {
            "1": {
              "name": "meta.definition.variable.js variable.other.constant.js"
            }
          },
          "end": "(?=$|^|[;,=}]|(\\s+(of|in)\\s+))",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-js-cfoutput-var-single-variable-type-annotation"
            }
          ]
        },
        {
          "name": "meta.var-single-variable.expr.js",
          "begin": "([_$[:alpha:]][_$[:alnum:]]*)",
          "beginCaptures": {
            "1": {
              "name": "meta.definition.variable.js variable.other.readwrite.js"
            }
          },
          "end": "(?=$|^|[;,=}]|(\\s+(of|in)\\s+))",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-js-cfoutput-var-single-variable-type-annotation"
            }
          ]
        }
      ]
    },
    "source-js-cfoutput-var-single-variable-type-annotation": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-js-type-annotation"
        },
        {
          "include": "#source-js-cfoutput-string"
        },
        {
          "include": "#source-js-cfoutput-comment"
        }
      ]
    },
    "source-js-cfoutput-variable-initializer": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "begin": "(?<!=|!)(=)(?!=)(?=\\s*\\S)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.assignment.js"
            }
          },
          "end": "(?=$|^|[,);}\\]])",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-js-cfoutput-expression"
            }
          ]
        },
        {
          "begin": "(?<!=|!)(=)(?!=)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.assignment.js"
            }
          },
          "end": "(?=[,);}\\]])|(?=^\\s*$)|(?<=\\S)(?<!=)(?=\\s*$)",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-js-cfoutput-expression"
            }
          ]
        }
      ]
    },
    "source-js-cfoutput-function-declaration": {
      "name": "meta.function.js",
      "begin": "(?<!\\.|\\$)\\b(?:(export)\\s+)?(?:(async)\\s+)?(function\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.export.js"
        },
        "2": {
          "name": "storage.modifier.async.js"
        },
        "3": {
          "name": "storage.type.function.js"
        },
        "4": {
          "name": "keyword.generator.asterisk.js"
        },
        "5": {
          "name": "meta.definition.function.js entity.name.function.js"
        }
      },
      "end": "(?=$|^|;)|(?<=\\})",
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-js-cfoutput-function-body"
        }
      ]
    },
    "source-js-cfoutput-function-expression": {
      "name": "meta.function.expression.js",
      "begin": "(?<!\\.|\\$)\\b(?:(async)\\s+)?(function\\b)(?:\\s*(\\*))?(?:(?:\\s+|(?<=\\*))([_$[:alpha:]][_$[:alnum:]]*))?\\s*",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.async.js"
        },
        "2": {
          "name": "storage.type.function.js"
        },
        "3": {
          "name": "keyword.generator.asterisk.js"
        },
        "4": {
          "name": "meta.definition.function.js entity.name.function.js"
        }
      },
      "end": "(?<=\\})",
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-js-cfoutput-function-body"
        }
      ]
    },
    "source-js-cfoutput-function-body": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-js-cfoutput-comment"
        },
        {
          "include": "#source-js-type-parameters"
        },
        {
          "include": "#source-js-cfoutput-function-parameters"
        },
        {
          "include": "#source-js-return-type"
        },
        {
          "include": "#source-js-cfoutput-decl-block"
        }
      ]
    },
    "source-js-cfoutput-function-parameters": {
      "name": "meta.parameters.js",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.parameters.begin.js"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.parameters.end.js"
        }
      },
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-js-cfoutput-comment"
        },
        {
          "include": "#source-js-cfoutput-decorator"
        },
        {
          "include": "#source-js-destructuring-parameter"
        },
        {
          "include": "#source-js-cfoutput-parameter-name"
        },
        {
          "include": "#source-js-type-annotation"
        },
        {
          "include": "#source-js-cfoutput-variable-initializer"
        },
        {
          "name": "punctuation.separator.parameter.js",
          "match": ","
        }
      ]
    },
    "source-js-cfoutput-parameter-name": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "match": "\\s*\\b(public|protected|private|readonly)(?=\\s+(public|protected|private|readonly)\\s+)",
          "captures": {
            "1": {
              "name": "storage.modifier.js"
            }
          }
        },
        {
          "match": "(?x)(?:\\s*\\b(public|private|protected|readonly)\\s+)?(\\.\\.\\.)?\\s*(?<!=|:)(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\\s*(\\??)(?=\\s*\n# function assignment |\n(=\\s*(\n  ((async\\s+)?(\n    (function\\s*[(<*]) |\n    (function\\s+) |\n    ([_$[:alpha:]][_$[:alnum:]]*\\s*=>)\n  )) |\n  ((async\\s*)?(\n    # sure shot arrow functions even if => is on new line\n(\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                 # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                            # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                        # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))([^=<>]|=[^<])*\\>)*>\\s*)?                                                           # typeparameters\n  \\(\\s*([_$[:alpha:]\\{\\[]([^()]|\\((\\s*[^()]*)?\\))*)?\\)                          # parameteres\n  (\\s*:\\s*([^<>\\(\\)]|\\<[^<>]+\\>|\\([^\\(\\)]+\\))+)?                                # return type\n  \\s*=>                                                                         # arrow operator\n)\n  ))\n)) |\n# typeannotation is fn type: < | () | (... | (param: | (param, | (param? | (param= | (param) =>\n(:\\s*(\n  (<) |\n  ([(]\\s*(\n    ([)]) |\n    (\\.\\.\\.) |\n    ([_$[:alnum:]]+\\s*(\n      ([:,?=])|\n      ([)]\\s*=>)\n    ))\n  ))\n)))",
          "captures": {
            "1": {
              "name": "storage.modifier.js"
            },
            "2": {
              "name": "keyword.operator.rest.js"
            },
            "3": {
              "name": "entity.name.function.js variable.language.this.js"
            },
            "4": {
              "name": "entity.name.function.js"
            },
            "5": {
              "name": "keyword.operator.optional.js"
            }
          }
        },
        {
          "match": "(?:\\s*\\b(public|private|protected|readonly)\\s+)?(\\.\\.\\.)?\\s*(?<!=|:)(?:((?<!\\.|\\$)\\bthis\\b(?!\\.|\\$))|([_$[:alpha:]][_$[:alnum:]]*))\\s*(\\??)",
          "captures": {
            "1": {
              "name": "storage.modifier.js"
            },
            "2": {
              "name": "keyword.operator.rest.js"
            },
            "3": {
              "name": "variable.parameter.js variable.language.this.js"
            },
            "4": {
              "name": "variable.parameter.js"
            },
            "5": {
              "name": "keyword.operator.optional.js"
            }
          }
        }
      ]
    },
    "source-js-cfoutput-arrow-function": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "name": "meta.arrow.js",
          "match": "(?:(?<!\\.|\\$)(\\basync)\\s+)?([_$[:alpha:]][_$[:alnum:]]*)\\s*(?==>)",
          "captures": {
            "1": {
              "name": "storage.modifier.async.js"
            },
            "2": {
              "name": "variable.parameter.js"
            }
          }
        },
        {
          "name": "meta.arrow.js",
          "begin": "(?x) (?:\n  (?<!\\.|\\$)(\\basync)\n)? ((?<![})!\\]])\\s*\n  (?=\n    # sure shot arrow functions even if => is on new line\n(\n  [(]\\s*\n  (\n    ([)]\\s*:) |                                                                 # ():\n    ((\\.\\.\\.\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s*:)                                            # [(]param: | [(]...param:\n  )\n) |\n(\n  [<]\\s*[_$[:alpha:]][_$[:alnum:]]*\\s+extends\\s*[^=>]                                        # < typeparam extends\n) |\n# arrow function possible to detect only with => on same line\n(\n  (<\\s*([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))([^=<>]|=[^<]|\\<\\s*([_$[:alpha:]]|(\\{[^\\{\\}]*\\})|(\\([^\\(\\)]*\\))|(\\[[^\\[\\]]*\\]))([^=<>]|=[^<])*\\>)*>\\s*)?                                                           # typeparameters\n  \\(\\s*([_$[:alpha:]\\{\\[]([^()]|\\((\\s*[^()]*)?\\))*)?\\)                          # parameteres\n  (\\s*:\\s*([^<>\\(\\)]|\\<[^<>]+\\>|\\([^\\(\\)]+\\))+)?                                # return type\n  \\s*=>                                                                         # arrow operator\n)\n  )\n)",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.async.js"
            }
          },
          "end": "(?==>|\\{|(^\\s*(export|function|class|interface|let|var|const|import|enum|namespace|module|type|abstract|declare)\\s+))",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-js-cfoutput-comment"
            },
            {
              "include": "#source-js-type-parameters"
            },
            {
              "include": "#source-js-cfoutput-function-parameters"
            },
            {
              "include": "#source-js-arrow-return-type"
            }
          ]
        },
        {
          "name": "meta.arrow.js",
          "begin": "=>",
          "beginCaptures": {
            "0": {
              "name": "storage.type.function.arrow.js"
            }
          },
          "end": "(?<=\\}|\\S)(?<!=>)|((?!\\{)(?=\\S))",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-js-cfoutput-decl-block"
            },
            {
              "include": "#source-js-cfoutput-expression"
            }
          ]
        }
      ]
    },
    "source-cfml-script-parens-block-scope": {
      "patterns": [
        {
          "name": "meta.group.cfml",
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.group.begin.cfml"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.group.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        },
        {
          "include": "#source-cfml-script-block-scope"
        }
      ]
    },
    "source-cfml-script-queryexecute-parameter": {
      "patterns": [
        {
          "begin": "\\b(sql)\\s*(=)(?!=)",
          "end": "(?=[,\\)])",
          "captures": {
            "1": {
              "name": "entity.other.parameter-name.cfml"
            },
            "2": {
              "name": "keyword.operator.assignment.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-sql-string"
            },
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        }
      ]
    },
    "source-cfml-script-method-call": {
      "patterns": [
        {
          "include": "#source-cfml-script-support-method-call"
        },
        {
          "name": "meta.function-call.method.cfml",
          "begin": "([_$a-zA-Z][$\\w]*)\\s*(?=\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.cfml"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.function-call.parameters.method.cfml punctuation.definition.arguments.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-method-call-params"
            }
          ]
        }
      ]
    },
    "source-cfml-script-string-quoted-single": {
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "string.quoted.single.cfml punctuation.definition.string.begin.cfml"
        }
      },
      "end": "(')(?!')",
      "endCaptures": {
        "1": {
          "name": "string.quoted.single.cfml punctuation.definition.string.end.cfml"
        }
      },
      "patterns": [
        {
          "name": "string.quoted.single.cfml constant.character.escape.quote.cfml",
          "match": "''"
        },
        {
          "name": "meta.string.quoted.single.cfml meta.embedded.block.sql source.sql",
          "begin": "(?=\\s*(?:USE|SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|REPLACE|ALTER|WITH|DECLARE|FROM|WHERE|AND|OR|NOT|EXISTS|ORDER\\s+BY|GROUP\\s+BY|HAVING|(INNER|CROSS)\\s+JOIN|(LEFT|RIGHT|FULL)(\\s+OUTER)?\\s+JOIN|UNION|INTERSECT|EXCEPT|MINUS|LIMIT|TRUNCATE\\s+TABLE|BULK\\s+INSERT)\\b)",
          "end": "(?='[^'])",
          "patterns": [
            {
              "include": "#source-cfml-sql-string-single-quoted"
            }
          ]
        },
        {
          "name": "string.quoted.single.cfml",
          "begin": "(?=\\S)",
          "end": "(?='[^'])",
          "patterns": [
            {
              "name": "constant.character.escape.quote.cfml",
              "match": "''"
            },
            {
              "include": "#source-cfml-script-hash-delimiters"
            }
          ]
        },
        {
          "name": "string.quoted.single.cfml",
          "match": "[\\s\\n]"
        }
      ]
    },
    "custom-tags": {
      "patterns": [
        {
          "name": "meta.tag.custom.cfml",
          "begin": "(?i)(<)(cf_[a-z_-]*)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.cfml"
            },
            "2": {
              "name": "entity.name.tag.custom.cfml"
            }
          },
          "end": "(/?>)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#tag-generic-attribute"
            }
          ]
        },
        {
          "name": "meta.tag.custom.cfml",
          "match": "(?i)(</)(cf_[a-z_-]*)(>)",
          "captures": {
            "1": {
              "name": "punctuation.definition.tag.begin.cfml"
            },
            "2": {
              "name": "entity.name.tag.custom.cfml"
            },
            "3": {
              "name": "punctuation.definition.tag.end.cfml"
            }
          }
        },
        {
          "name": "meta.tag.custom.cfml",
          "begin": "(?i)(<)([a-z]+)(\\:)([a-z_-]*)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.cfml"
            },
            "2": {
              "name": "entity.name.tag.custom.cfml"
            },
            "3": {
              "name": "entity.name.tag.custom.cfml punctuation.separator.prefix.cfml"
            },
            "4": {
              "name": "entity.name.tag.custom.cfml"
            }
          },
          "end": "(/?>)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#tag-generic-attribute"
            }
          ]
        },
        {
          "name": "meta.tag.custom.cfml",
          "match": "(?i)(</)([a-z]+\\:[a-z_-]*)(>)",
          "captures": {
            "1": {
              "name": "punctuation.definition.tag.begin.cfml"
            },
            "2": {
              "name": "entity.name.tag.custom.cfml"
            },
            "3": {
              "name": "punctuation.definition.tag.end.cfml"
            }
          }
        }
      ]
    },
    "extension-tags": {
      "patterns": [
        {
          "name": "meta.tag.extension.cfml",
          "begin": "(?i)(<)(cfx_[\\w-]+)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.cfml"
            },
            "2": {
              "name": "entity.name.tag.extension.cfml"
            }
          },
          "end": "/?>",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#tag-generic-attribute"
            }
          ]
        },
        {
          "name": "meta.tag.extension.cfml",
          "match": "(?i)(</)(cfx_[\\w-]+)(>)",
          "captures": {
            "1": {
              "name": "punctuation.definition.tag.begin.cfml"
            },
            "2": {
              "name": "entity.name.tag.extension.cfml"
            },
            "3": {
              "name": "punctuation.definition.tag.end.cfml"
            }
          }
        }
      ]
    },
    "source-cfml-script-round-brackets": {
      "patterns": [
        {
          "name": "meta.group.cfml",
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.group.begin.cfml"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.group.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        },
        {
          "name": "invalid.illegal.stray.brace.round.cfml",
          "match": "\\)"
        }
      ]
    },
    "source-css": {
      "comment": "https://github.com/Microsoft/vscode/commit/73461169abe254bb59dc7714fc881876f8a46f84",
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "include": "#source-css-comment-block"
        },
        {
          "include": "#source-css-escapes"
        },
        {
          "include": "#source-css-combinators"
        },
        {
          "include": "#source-css-selector"
        },
        {
          "include": "#source-css-at-rules"
        },
        {
          "include": "#source-css-rule-list"
        }
      ]
    },
    "source-css-at-rules": {
      "patterns": [
        {
          "name": "meta.at-rule.charset.css",
          "begin": "\\A(?:\\xEF\\xBB\\xBF)?(?i:(?=\\s*@charset\\b))",
          "end": ";|(?=$)",
          "endCaptures": {
            "0": {
              "name": "punctuation.terminator.rule.css"
            }
          },
          "patterns": [
            {
              "match": "(?x)        # Possible errors:\n\\G\n((?!@charset)@\\w+)   # Not lowercase (@charset is case-sensitive)\n|\n\\G(\\s+)             # Preceding whitespace\n|\n(@charset\\S[^;]*)    # No whitespace after @charset\n|\n(?<=@charset)         # Before quoted charset name\n(\\x20{2,}|\\t+)      # More than one space used, or a tab\n|\n(?<=@charset\\x20)    # Beginning of charset name\n([^\";]+)              # Not double-quoted\n|\n(\"[^\"]+$)             # Unclosed quote\n|\n(?<=\")                # After charset name\n([^;]+)               # Unexpected junk instead of semicolon",
              "captures": {
                "1": {
                  "name": "invalid.illegal.not-lowercase.charset.css"
                },
                "2": {
                  "name": "invalid.illegal.leading-whitespace.charset.css"
                },
                "3": {
                  "name": "invalid.illegal.no-whitespace.charset.css"
                },
                "4": {
                  "name": "invalid.illegal.whitespace.charset.css"
                },
                "5": {
                  "name": "invalid.illegal.not-double-quoted.charset.css"
                },
                "6": {
                  "name": "invalid.illegal.unclosed-string.charset.css"
                },
                "7": {
                  "name": "invalid.illegal.unexpected-characters.charset.css"
                }
              }
            },
            {
              "match": "((@)charset)(?=\\s)",
              "captures": {
                "1": {
                  "name": "keyword.control.at-rule.charset.css"
                },
                "2": {
                  "name": "punctuation.definition.keyword.css"
                }
              }
            },
            {
              "name": "string.quoted.double.css",
              "begin": "\"",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.string.begin.css"
                }
              },
              "end": "\"|$",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.string.end.css"
                }
              },
              "patterns": [
                {
                  "name": "invalid.illegal.unclosed.string.css",
                  "begin": "(?:\\G|^)(?=(?:[^\"])+$)",
                  "end": "$"
                }
              ]
            }
          ]
        },
        {
          "name": "meta.at-rule.import.css",
          "begin": "(?i)((@)import)(?:\\s+|$|(?=['\"]|/\\*))",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.at-rule.import.css"
            },
            "2": {
              "name": "punctuation.definition.keyword.css"
            }
          },
          "end": ";",
          "endCaptures": {
            "0": {
              "name": "punctuation.terminator.rule.css"
            }
          },
          "patterns": [
            {
              "begin": "\\G\\s*(?=/\\*)",
              "end": "(?<=\\*/)\\s*",
              "patterns": [
                {
                  "include": "#source-css-comment-block"
                }
              ]
            },
            {
              "include": "#source-css-string"
            },
            {
              "include": "#source-css-url"
            },
            {
              "include": "#source-css-media-query-list"
            }
          ]
        },
        {
          "name": "meta.at-rule.font-face.css",
          "begin": "(?i)((@)font-face)(?=\\s*|{|/\\*|$)",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.at-rule.font-face.css"
            },
            "2": {
              "name": "punctuation.definition.keyword.css"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "include": "#source-css-comment-block"
            },
            {
              "include": "#source-css-escapes"
            },
            {
              "include": "#source-css-rule-list"
            }
          ]
        },
        {
          "name": "meta.at-rule.page.css",
          "begin": "(?i)(@)page(?=[\\s:{]|/\\*|$)",
          "captures": {
            "0": {
              "name": "keyword.control.at-rule.page.css"
            },
            "1": {
              "name": "punctuation.definition.keyword.css"
            }
          },
          "end": "(?=\\s*($|[:{;]))",
          "patterns": [
            {
              "include": "#source-css-rule-list"
            }
          ]
        },
        {
          "begin": "(?i)(?=@media(\\s|\\(|/\\*|$))",
          "end": "(?<=})(?!\\G)",
          "patterns": [
            {
              "name": "meta.at-rule.media.header.css",
              "begin": "(?i)\\G(@)media",
              "beginCaptures": {
                "0": {
                  "name": "keyword.control.at-rule.media.css"
                },
                "1": {
                  "name": "punctuation.definition.keyword.css"
                }
              },
              "end": "(?=\\s*[{;])",
              "patterns": [
                {
                  "include": "#source-css-media-query-list"
                }
              ]
            },
            {
              "name": "meta.at-rule.media.body.css",
              "begin": "{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.media.begin.bracket.curly.css"
                }
              },
              "end": "}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.media.end.bracket.curly.css"
                }
              },
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            }
          ]
        },
        {
          "begin": "(?i)(?=@counter-style([\\s'\"{;]|/\\*|$))",
          "end": "(?<=})(?!\\G)",
          "patterns": [
            {
              "name": "meta.at-rule.counter-style.header.css",
              "begin": "(?i)\\G(@)counter-style",
              "beginCaptures": {
                "0": {
                  "name": "keyword.control.at-rule.counter-style.css"
                },
                "1": {
                  "name": "punctuation.definition.keyword.css"
                }
              },
              "end": "(?=\\s*{)",
              "patterns": [
                {
                  "include": "#source-css-comment-block"
                },
                {
                  "include": "#source-css-escapes"
                },
                {
                  "name": "variable.parameter.style-name.css",
                  "match": "(?x)\n(?:[-a-zA-Z_]    | [^\\x00-\\x7F])     # First letter\n(?:[-a-zA-Z0-9_] | [^\\x00-\\x7F]      # Remainder of identifier\n  |\\\\(?:[0-9a-fA-F]{1,6}|.)\n)*",
                  "captures": {
                    "0": {
                      "patterns": [
                        {
                          "include": "#source-css-escapes"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            {
              "name": "meta.at-rule.counter-style.body.css",
              "begin": "{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.property-list.begin.bracket.curly.css"
                }
              },
              "end": "}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.property-list.end.bracket.curly.css"
                }
              },
              "patterns": [
                {
                  "include": "#source-css-comment-block"
                },
                {
                  "include": "#source-css-escapes"
                },
                {
                  "include": "#source-css-rule-list-innards"
                }
              ]
            }
          ]
        },
        {
          "begin": "(?i)(?=@document([\\s'\"{;]|/\\*|$))",
          "end": "(?<=})(?!\\G)",
          "patterns": [
            {
              "name": "meta.at-rule.document.header.css",
              "begin": "(?i)\\G(@)document",
              "beginCaptures": {
                "0": {
                  "name": "keyword.control.at-rule.document.css"
                },
                "1": {
                  "name": "punctuation.definition.keyword.css"
                }
              },
              "end": "(?=\\s*[{;])",
              "patterns": [
                {
                  "name": "meta.function.document-rule.css",
                  "begin": "(?i)(?<![\\w-])(url-prefix|domain|regexp)(\\()",
                  "beginCaptures": {
                    "1": {
                      "name": "support.function.document-rule.css"
                    },
                    "2": {
                      "name": "punctuation.section.function.begin.bracket.round.css"
                    }
                  },
                  "end": "\\)",
                  "endCaptures": {
                    "0": {
                      "name": "punctuation.section.function.end.bracket.round.css"
                    }
                  },
                  "patterns": [
                    {
                      "include": "#source-css-string"
                    },
                    {
                      "include": "#source-css-comment-block"
                    },
                    {
                      "include": "#source-css-escapes"
                    },
                    {
                      "name": "variable.parameter.document-rule.css",
                      "match": "[^'\")\\s]+"
                    }
                  ]
                },
                {
                  "include": "#source-css-url"
                },
                {
                  "include": "#source-css-commas"
                },
                {
                  "include": "#source-css-comment-block"
                },
                {
                  "include": "#source-css-escapes"
                }
              ]
            },
            {
              "name": "meta.at-rule.document.body.css",
              "begin": "{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.document.begin.bracket.curly.css"
                }
              },
              "end": "}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.document.end.bracket.curly.css"
                }
              },
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            }
          ]
        },
        {
          "begin": "(?i)(?=@(?:-(?:webkit|moz|o|ms)-)?keyframes([\\s'\"{;]|/\\*|$))",
          "end": "(?<=})(?!\\G)",
          "patterns": [
            {
              "name": "meta.at-rule.keyframes.header.css",
              "begin": "(?i)\\G(@)(?:-(?:webkit|moz|o|ms)-)?keyframes",
              "beginCaptures": {
                "0": {
                  "name": "keyword.control.at-rule.keyframes.css"
                },
                "1": {
                  "name": "punctuation.definition.keyword.css"
                }
              },
              "end": "(?=\\s*{)",
              "patterns": [
                {
                  "include": "#source-css-comment-block"
                },
                {
                  "include": "#source-css-escapes"
                },
                {
                  "name": "variable.parameter.keyframe-list.css",
                  "match": "(?x)\n(?:[-a-zA-Z_]    | [^\\x00-\\x7F])     # First letter\n(?:[-a-zA-Z0-9_] | [^\\x00-\\x7F]      # Remainder of identifier\n  |\\\\(?:[0-9a-fA-F]{1,6}|.)\n)*",
                  "captures": {
                    "0": {
                      "patterns": [
                        {
                          "include": "#source-css-escapes"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            {
              "name": "meta.at-rule.keyframes.body.css",
              "begin": "{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.keyframes.begin.bracket.curly.css"
                }
              },
              "end": "}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.keyframes.end.bracket.curly.css"
                }
              },
              "patterns": [
                {
                  "include": "#source-css-comment-block"
                },
                {
                  "include": "#source-css-escapes"
                },
                {
                  "match": "(?xi)\n(?<![\\w-]) (from|to) (?![\\w-])         # Keywords for 0% | 100%\n|\n([-+]?(?:\\d+(?:\\.\\d+)?|\\.\\d+)%)     # Percentile value",
                  "captures": {
                    "1": {
                      "name": "entity.other.keyframe-offset.css"
                    },
                    "2": {
                      "name": "entity.other.keyframe-offset.percentage.css"
                    }
                  }
                },
                {
                  "include": "#source-css-rule-list"
                }
              ]
            }
          ]
        },
        {
          "begin": "(?i)(?=@supports(\\s|\\(|/\\*|$))",
          "end": "(?<=})(?!\\G)|(?=;)",
          "patterns": [
            {
              "name": "meta.at-rule.supports.header.css",
              "begin": "(?i)\\G(@)supports",
              "beginCaptures": {
                "0": {
                  "name": "keyword.control.at-rule.supports.css"
                },
                "1": {
                  "name": "punctuation.definition.keyword.css"
                }
              },
              "end": "(?=\\s*[{;])",
              "patterns": [
                {
                  "include": "#source-css-feature-query-operators"
                },
                {
                  "include": "#source-css-feature-query"
                },
                {
                  "include": "#source-css-comment-block"
                },
                {
                  "include": "#source-css-escapes"
                }
              ]
            },
            {
              "name": "meta.at-rule.supports.body.css",
              "begin": "{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.supports.begin.bracket.curly.css"
                }
              },
              "end": "}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.supports.end.bracket.curly.css"
                }
              },
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            }
          ]
        },
        {
          "name": "meta.at-rule.viewport.css",
          "begin": "(?i)((@)(-ms-|-o-)?viewport)(?=[\\s'\"{;]|/\\*|$)",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.at-rule.viewport.css"
            },
            "2": {
              "name": "punctuation.definition.keyword.css"
            }
          },
          "end": "(?=\\s*[@{;])",
          "patterns": [
            {
              "include": "#source-css-comment-block"
            },
            {
              "include": "#source-css-escapes"
            }
          ]
        },
        {
          "name": "meta.at-rule.font-features.css",
          "begin": "(?i)((@)font-feature-values)(?=[\\s'\"{;]|/\\*|$)\\s*",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.at-rule.font-feature-values.css"
            },
            "2": {
              "name": "punctuation.definition.keyword.css"
            }
          },
          "contentName": "variable.parameter.font-name.css",
          "end": "(?=\\s*[@{;])",
          "patterns": [
            {
              "include": "#source-css-comment-block"
            },
            {
              "include": "#source-css-escapes"
            }
          ]
        },
        {
          "include": "#source-css-font-features"
        },
        {
          "name": "meta.at-rule.namespace.css",
          "begin": "(?i)((@)namespace)(?=[\\s'\";]|/\\*|$)",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.at-rule.namespace.css"
            },
            "2": {
              "name": "punctuation.definition.keyword.css"
            }
          },
          "end": ";|(?=[@{])",
          "endCaptures": {
            "0": {
              "name": "punctuation.terminator.rule.css"
            }
          },
          "patterns": [
            {
              "include": "#source-css-url"
            },
            {
              "match": "(?xi)\n(?:\\G|^|(?<=\\s))\n(?=\n  (?<=\\s|^)                             # Starts with whitespace\n  (?:[-a-zA-Z_]|[^\\x00-\\x7F])          # Then a valid identifier character\n  |\n  \\s*                                   # Possible adjoining whitespace\n  /\\*(?:[^*]|\\*[^/])*\\*/              # Injected comment\n)\n(.*?)                                    # Grouped to embed #comment-block\n(\n  (?:[-a-zA-Z_]    | [^\\x00-\\x7F])     # First letter\n  (?:[-a-zA-Z0-9_] | [^\\x00-\\x7F]      # Remainder of identifier\n    |\\\\(?:[0-9a-fA-F]{1,6}|.)\n  )*\n)",
              "captures": {
                "1": {
                  "patterns": [
                    {
                      "include": "#source-css-comment-block"
                    }
                  ]
                },
                "2": {
                  "name": "entity.name.function.namespace-prefix.css",
                  "patterns": [
                    {
                      "include": "#source-css-escapes"
                    }
                  ]
                }
              }
            },
            {
              "include": "#source-css-comment-block"
            },
            {
              "include": "#source-css-escapes"
            },
            {
              "include": "#source-css-string"
            }
          ]
        },
        {
          "begin": "(?i)(?=@[\\w-]+(\\s|\\(|{|;|/\\*|$))",
          "end": "(?<=}|;)(?!\\G)",
          "patterns": [
            {
              "name": "meta.at-rule.header.css",
              "begin": "(?i)\\G(@)[\\w-]+",
              "beginCaptures": {
                "0": {
                  "name": "keyword.control.at-rule.css"
                },
                "1": {
                  "name": "punctuation.definition.keyword.css"
                }
              },
              "end": "(?=\\s*[{;])"
            },
            {
              "name": "meta.at-rule.body.css",
              "begin": "{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.begin.bracket.curly.css"
                }
              },
              "end": "}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.end.bracket.curly.css"
                }
              },
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            }
          ]
        }
      ]
    },
    "source-css-color-keywords": {
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "comment": "https://www.w3.org/TR/CSS21/syndata.html#value-def-color",
          "name": "support.constant.color.w3c-standard-color-name.css",
          "match": "(?i)(?<![\\w-])(aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow)(?![\\w-])"
        },
        {
          "comment": "https://www.w3.org/TR/2011/REC-css3-color-20110607/#svg-color",
          "name": "support.constant.color.w3c-extended-color-name.css",
          "match": "(?xi) (?<![\\w-])\n(aliceblue|antiquewhite|aquamarine|azure|beige|bisque|blanchedalmond|blueviolet|brown|burlywood\n|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan\n|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange\n|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise\n|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen\n|gainsboro|ghostwhite|gold|goldenrod|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki\n|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow\n|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray\n|lightslategrey|lightsteelblue|lightyellow|limegreen|linen|magenta|mediumaquamarine|mediumblue\n|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise\n|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|oldlace|olivedrab|orangered\n|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum\n|powderblue|rebeccapurple|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell\n|sienna|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|thistle|tomato\n|transparent|turquoise|violet|wheat|whitesmoke|yellowgreen)\n(?![\\w-])"
        },
        {
          "name": "support.constant.color.current.css",
          "match": "(?i)(?<![\\w-])currentColor(?![\\w-])"
        },
        {
          "name": "invalid.deprecated.color.system.css",
          "match": "(?xi) (?<![\\w-])\n(ActiveBorder|ActiveCaption|AppWorkspace|Background|ButtonFace|ButtonHighlight|ButtonShadow\n|ButtonText|CaptionText|GrayText|Highlight|HighlightText|InactiveBorder|InactiveCaption\n|InactiveCaptionText|InfoBackground|InfoText|Menu|MenuText|Scrollbar|ThreeDDarkShadow\n|ThreeDFace|ThreeDHighlight|ThreeDLightShadow|ThreeDShadow|Window|WindowFrame|WindowText)\n(?![\\w-])"
        }
      ]
    },
    "source-css-combinators": {
      "patterns": [
        {
          "name": "invalid.deprecated.combinator.css",
          "match": "/deep/|>>>"
        },
        {
          "name": "keyword.operator.combinator.css",
          "match": ">>|>|\\+|~"
        }
      ]
    },
    "source-css-commas": {
      "name": "punctuation.separator.list.comma.css",
      "match": ","
    },
    "source-css-comment-block": {
      "name": "comment.block.css",
      "begin": "/\\*",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.comment.begin.css"
        }
      },
      "end": "\\*/|(?=</style)",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.comment.end.css"
        }
      }
    },
    "source-css-escapes": {
      "patterns": [
        {
          "name": "constant.character.escape.codepoint.css",
          "match": "\\\\[0-9a-fA-F]{1,6}"
        },
        {
          "name": "constant.character.escape.newline.css",
          "begin": "\\\\$\\s*",
          "end": "^(?<!\\G)"
        },
        {
          "name": "constant.character.escape.css",
          "match": "\\\\."
        }
      ]
    },
    "source-css-feature-query": {
      "name": "meta.feature-query.css",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.condition.begin.bracket.round.css"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.condition.end.bracket.round.css"
        }
      },
      "patterns": [
        {
          "include": "#source-css-feature-query-operators"
        },
        {
          "include": "#source-css-feature-query"
        }
      ]
    },
    "source-css-feature-query-operators": {
      "patterns": [
        {
          "name": "keyword.operator.logical.feature.$1.css",
          "match": "(?i)(?<=[\\s()]|^|\\*/)(and|not|or)(?=[\\s()]|/\\*|$)"
        },
        {
          "include": "#source-css-rule-list-innards"
        }
      ]
    },
    "source-css-font-features": {
      "name": "meta.at-rule.${3:/downcase}.css",
      "begin": "(?xi)\n((@)(annotation|character-variant|ornaments|styleset|stylistic|swash))\n(?=[\\s@'\"{;]|/\\*|$)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.at-rule.${3:/downcase}.css"
        },
        "2": {
          "name": "punctuation.definition.keyword.css"
        }
      },
      "end": "(?<=})",
      "patterns": [
        {
          "name": "meta.property-list.font-feature.css",
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.property-list.begin.bracket.curly.css"
            }
          },
          "end": "}",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.property-list.end.bracket.curly.css"
            }
          },
          "patterns": [
            {
              "name": "variable.font-feature.css",
              "match": "(?x)\n(?: [-a-zA-Z_]    | [^\\x00-\\x7F] )   # First letter\n(?: [-a-zA-Z0-9_] | [^\\x00-\\x7F]     # Remainder of identifier\n  | \\\\(?:[0-9a-fA-F]{1,6}|.)\n)*",
              "captures": {
                "0": {
                  "patterns": [
                    {
                      "include": "#source-css-escapes"
                    }
                  ]
                }
              }
            },
            {
              "include": "#source-css-rule-list-innards"
            }
          ]
        }
      ]
    },
    "source-css-functions": {
      "patterns": [
        {
          "name": "meta.function.calc.css",
          "begin": "(?i)(?<![\\w-])(calc)(\\()",
          "beginCaptures": {
            "1": {
              "name": "support.function.calc.css"
            },
            "2": {
              "name": "punctuation.section.function.begin.bracket.round.css"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.function.end.bracket.round.css"
            }
          },
          "patterns": [
            {
              "name": "keyword.operator.arithmetic.css",
              "match": "[*/]|(?<=\\s|^)[-+](?=\\s|$)"
            },
            {
              "include": "#source-css-property-values"
            }
          ]
        },
        {
          "name": "meta.function.color.css",
          "begin": "(?i)(?<![\\w-])(rgba?|hsla?)(\\()",
          "beginCaptures": {
            "1": {
              "name": "support.function.misc.css"
            },
            "2": {
              "name": "punctuation.section.function.begin.bracket.round.css"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.function.end.bracket.round.css"
            }
          },
          "patterns": [
            {
              "include": "#source-css-property-values"
            }
          ]
        },
        {
          "name": "meta.function.gradient.css",
          "begin": "(?xi) (?<![\\w-])\n(\n  (?:-webkit-|-moz-|-o-)?    # Accept prefixed/historical variants\n  (?:repeating-)?            # \"Repeating\"-type gradient\n  (?:linear|radial|conic)    # Shape\n  -gradient\n)\n(\\()",
          "beginCaptures": {
            "1": {
              "name": "support.function.gradient.css"
            },
            "2": {
              "name": "punctuation.section.function.begin.bracket.round.css"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.function.end.bracket.round.css"
            }
          },
          "patterns": [
            {
              "match": "(?i)(?<![\\w-])(from|to|at)(?![\\w-])",
              "name": "keyword.operator.gradient.css"
            },
            {
              "include": "#source-css-property-values"
            }
          ]
        },
        {
          "name": "meta.function.gradient.invalid.deprecated.gradient.css",
          "begin": "(?i)(?<![\\w-])(-webkit-gradient)(\\()",
          "beginCaptures": {
            "1": {
              "name": "invalid.deprecated.gradient.function.css"
            },
            "2": {
              "name": "punctuation.section.function.begin.bracket.round.css"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.function.end.bracket.round.css"
            }
          },
          "patterns": [
            {
              "begin": "(?i)(?<![\\w-])(from|to|color-stop)(\\()",
              "beginCaptures": {
                "1": {
                  "name": "invalid.deprecated.function.css"
                },
                "2": {
                  "name": "punctuation.section.function.begin.bracket.round.css"
                }
              },
              "end": "\\)",
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.function.end.bracket.round.css"
                }
              },
              "patterns": [
                {
                  "include": "#source-css-property-values"
                }
              ]
            },
            {
              "include": "#source-css-property-values"
            }
          ]
        },
        {
          "name": "meta.function.misc.css",
          "begin": "(?xi) (?<![\\w-])\n(annotation|attr|blur|brightness|character-variant|contrast|counters?\n|cross-fade|drop-shadow|element|fit-content|format|grayscale|hue-rotate\n|image-set|invert|local|minmax|opacity|ornaments|repeat|saturate|sepia\n|styleset|stylistic|swash|symbols)\n(\\()",
          "beginCaptures": {
            "1": {
              "name": "support.function.misc.css"
            },
            "2": {
              "name": "punctuation.section.function.begin.bracket.round.css"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.function.end.bracket.round.css"
            }
          },
          "patterns": [
            {
              "name": "constant.numeric.other.density.css",
              "match": "(?i)(?<=[,\\s\"]|\\*/|^)\\d+x(?=[\\s,\"')]|/\\*|$)"
            },
            {
              "include": "#source-css-property-values"
            },
            {
              "name": "variable.parameter.misc.css",
              "match": "[^'\"),\\s]+"
            }
          ]
        },
        {
          "name": "meta.function.shape.css",
          "begin": "(?i)(?<![\\w-])(circle|ellipse|inset|polygon|rect)(\\()",
          "beginCaptures": {
            "1": {
              "name": "support.function.shape.css"
            },
            "2": {
              "name": "punctuation.section.function.begin.bracket.round.css"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.function.end.bracket.round.css"
            }
          },
          "patterns": [
            {
              "match": "(?i)(?<=\\s|^|\\*/)(at|round)(?=\\s|/\\*|$)",
              "name": "keyword.operator.shape.css"
            },
            {
              "include": "#source-css-property-values"
            }
          ]
        },
        {
          "name": "meta.function.timing-function.css",
          "begin": "(?i)(?<![\\w-])(cubic-bezier|steps)(\\()",
          "beginCaptures": {
            "1": {
              "name": "support.function.timing-function.css"
            },
            "2": {
              "name": "punctuation.section.function.begin.bracket.round.css"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.function.end.bracket.round.css"
            }
          },
          "patterns": [
            {
              "name": "support.constant.step-direction.css",
              "match": "(?i)(?<![\\w-])(start|end)(?=\\s*\\)|$)"
            },
            {
              "include": "#source-css-property-values"
            }
          ]
        },
        {
          "begin": "(?xi) (?<![\\w-])\n( (?:translate|scale|rotate)(?:[XYZ]|3D)?\n| matrix(?:3D)?\n| skew[XY]?\n| perspective\n)\n(\\()",
          "beginCaptures": {
            "1": {
              "name": "support.function.transform.css"
            },
            "2": {
              "name": "punctuation.section.function.begin.bracket.round.css"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.function.end.bracket.round.css"
            }
          },
          "patterns": [
            {
              "include": "#source-css-property-values"
            }
          ]
        },
        {
          "include": "#source-css-url"
        },
        {
          "name": "meta.function.variable.css",
          "begin": "(?i)(?<![\\w-])(var)(\\()",
          "beginCaptures": {
            "1": {
              "name": "support.function.misc.css"
            },
            "2": {
              "name": "punctuation.section.function.begin.bracket.round.css"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.function.end.bracket.round.css"
            }
          },
          "patterns": [
            {
              "name": "variable.argument.css",
              "match": "(?x)\n--\n(?:[-a-zA-Z_]    | [^\\x00-\\x7F])     # First letter\n(?:[-a-zA-Z0-9_] | [^\\x00-\\x7F]      # Remainder of identifier\n  |\\\\(?:[0-9a-fA-F]{1,6}|.)\n)*"
            },
            {
              "include": "#source-css-property-values"
            }
          ]
        }
      ]
    },
    "source-css-functional-pseudo-classes": {
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "begin": "(?i)((:)dir)(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.other.attribute-name.pseudo-class.css"
            },
            "2": {
              "name": "punctuation.definition.entity.css"
            },
            "3": {
              "name": "punctuation.section.function.begin.bracket.round.css"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.function.end.bracket.round.css"
            }
          },
          "patterns": [
            {
              "include": "#cfml-tags"
            },
            {
              "include": "#source-css-comment-block"
            },
            {
              "include": "#source-css-escapes"
            },
            {
              "name": "support.constant.text-direction.css",
              "match": "(?i)(?<![\\w-])(ltr|rtl)(?![\\w-])"
            },
            {
              "include": "#source-css-property-values"
            }
          ]
        },
        {
          "begin": "(?i)((:)lang)(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.other.attribute-name.pseudo-class.css"
            },
            "2": {
              "name": "punctuation.definition.entity.css"
            },
            "3": {
              "name": "punctuation.section.function.begin.bracket.round.css"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.function.end.bracket.round.css"
            }
          },
          "patterns": [
            {
              "include": "#cfml-tags"
            },
            {
              "name": "support.constant.language-range.css",
              "match": "(?<=[(,\\s])[a-zA-Z]+(-[a-zA-Z0-9]*|\\\\(?:[0-9a-fA-F]{1,6}|.))*(?=[),\\s])"
            },
            {
              "name": "string.quoted.double.css",
              "begin": "\"",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.string.begin.css"
                }
              },
              "end": "\"",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.string.end.css"
                }
              },
              "patterns": [
                {
                  "include": "#cfml-tags"
                },
                {
                  "include": "#source-css-escapes"
                },
                {
                  "name": "support.constant.language-range.css",
                  "match": "(?<=[\"\\s])[a-zA-Z*]+(-[a-zA-Z0-9*]*)*(?=[\"\\s])"
                }
              ]
            },
            {
              "name": "string.quoted.single.css",
              "begin": "'",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.string.begin.css"
                }
              },
              "end": "'",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.string.end.css"
                }
              },
              "patterns": [
                {
                  "include": "#cfml-tags"
                },
                {
                  "include": "#source-css-escapes"
                },
                {
                  "name": "support.constant.language-range.css",
                  "match": "(?<=['\\s])[a-zA-Z*]+(-[a-zA-Z0-9*]*)*(?=['\\s])"
                }
              ]
            },
            {
              "include": "#source-css-commas"
            }
          ]
        },
        {
          "begin": "(?i)((:)(?:not|has|matches))(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.other.attribute-name.pseudo-class.css"
            },
            "2": {
              "name": "punctuation.definition.entity.css"
            },
            "3": {
              "name": "punctuation.section.function.begin.bracket.round.css"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.function.end.bracket.round.css"
            }
          },
          "patterns": [
            {
              "include": "#cfml-tags"
            },
            {
              "include": "#source-css-selector-innards"
            }
          ]
        },
        {
          "begin": "(?i)((:)nth-(?:last-)?(?:child|of-type))(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.other.attribute-name.pseudo-class.css"
            },
            "2": {
              "name": "punctuation.definition.entity.css"
            },
            "3": {
              "name": "punctuation.section.function.begin.bracket.round.css"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.function.end.bracket.round.css"
            }
          },
          "patterns": [
            {
              "include": "#cfml-tags"
            },
            {
              "name": "constant.numeric.css",
              "match": "(?i)[+-]?(\\d+n?|n)(\\s*[+-]\\s*\\d+)?"
            },
            {
              "name": "support.constant.parity.css",
              "match": "(?i)even|odd"
            }
          ]
        }
      ]
    },
    "source-css-media-features": {
      "match": "(?xi)\n(?<=^|\\s|\\(|\\*/)           # Preceded by whitespace, bracket or comment\n(?:\n  # Standardised features\n  (\n    (?:min-|max-)?            # Range features\n    (?: height\n      | width\n      | aspect-ratio\n      | color\n      | color-index\n      | monochrome\n      | resolution\n    )\n    | grid                    # Discrete features\n    | scan\n    | orientation\n    | display-mode\n  )\n  |\n  # Deprecated features\n  (\n    (?:min-|max-)?            # Deprecated in Media Queries 4\n    device-\n    (?: height\n      | width\n      | aspect-ratio\n    )\n  )\n  |\n  # Vendor extensions\n  (\n    (?:\n      # Spec-compliant syntax\n      [-_]\n      (?: webkit              # Webkit/Blink\n        | apple|khtml         # Webkit aliases\n        | epub                # ePub3\n        | moz                 # Gecko\n        | ms                  # Microsoft\n        | o                   # Presto (pre-Opera 15)\n        | xv|ah|rim|atsc|     # Less common vendors\n          hp|tc|wap|ro\n      )\n      |\n      # Non-standard prefixes\n      (?: mso                 # Microsoft Office\n        | prince              # YesLogic\n      )\n    )\n    -\n    [\\w-]+                   # Feature name\n    (?=                       # Terminates correctly\n      \\s*                    # Possible whitespace\n      (?:                     # Possible injected comment\n        /\\*\n        (?:[^*]|\\*[^/])*\n        \\*/\n      )?\n      \\s*\n      [:)]                    # Ends with a colon or closed bracket\n    )\n  )\n)\n(?=\\s|$|[><:=]|\\)|/\\*)     # Terminates cleanly",
      "captures": {
        "1": {
          "name": "support.type.property-name.media.css"
        },
        "2": {
          "name": "invalid.deprecated.media.css"
        },
        "3": {
          "name": "support.type.vendored.property-name.media.css"
        }
      }
    },
    "source-css-media-feature-keywords": {
      "name": "support.constant.property-value.css",
      "match": "(?xi)\n(?<=^|\\s|:|\\*/)\n(?: portrait                  # Orientation\n  | landscape\n  | progressive               # Scan types\n  | interlace\n  | fullscreen                # Display modes\n  | standalone\n  | minimal-ui\n  | browser\n)\n(?=\\s|\\)|$)"
    },
    "source-css-media-query-list": {
      "begin": "\\s*",
      "end": "(?=\\s*[{;])",
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "include": "#source-css-media-query"
        }
      ]
    },
    "source-css-media-query": {
      "begin": "\\G",
      "end": "(?=\\s*[{;])",
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "include": "#source-css-comment-block"
        },
        {
          "include": "#source-css-escapes"
        },
        {
          "include": "#source-css-media-types"
        },
        {
          "name": "keyword.operator.logical.$1.media.css",
          "match": "(?i)(?<=\\s|^|,|\\*/)(only|not)(?=\\s|{|/\\*|$)"
        },
        {
          "name": "keyword.operator.logical.and.media.css",
          "match": "(?i)(?<=\\s|^|\\*/|\\))and(?=\\s|/\\*|$)"
        },
        {
          "name": "invalid.illegal.comma.css",
          "match": ",(?:(?:\\s*,)+|(?=\\s*[;){]))"
        },
        {
          "include": "#source-css-commas"
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.parameters.begin.bracket.round.css"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.parameters.end.bracket.round.css"
            }
          },
          "patterns": [
            {
              "include": "#source-css-media-features"
            },
            {
              "include": "#source-css-media-feature-keywords"
            },
            {
              "name": "punctuation.separator.key-value.css",
              "match": ":"
            },
            {
              "name": "keyword.operator.comparison.css",
              "match": ">=|<=|=|<|>"
            },
            {
              "name": "meta.ratio.css",
              "match": "(\\d+)\\s*(/)\\s*(\\d+)",
              "captures": {
                "1": {
                  "name": "constant.numeric.css"
                },
                "2": {
                  "name": "keyword.operator.arithmetic.css"
                },
                "3": {
                  "name": "constant.numeric.css"
                }
              }
            },
            {
              "include": "#source-css-numeric-values"
            },
            {
              "include": "#source-css-comment-block"
            }
          ]
        }
      ]
    },
    "source-css-media-types": {
      "match": "(?xi)\n(?<=^|\\s|,|\\*/)\n(?:\n  # Valid media types\n  (all|print|screen|speech)\n  |\n  # Deprecated in Media Queries 4: http://dev.w3.org/csswg/mediaqueries/#media-types\n  (aural|braille|embossed|handheld|projection|tty|tv)\n)\n(?=$|[{,\\s;]|/\\*)",
      "captures": {
        "1": {
          "name": "support.constant.media.css"
        },
        "2": {
          "name": "invalid.deprecated.constant.media.css"
        }
      }
    },
    "source-css-numeric-values": {
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "name": "constant.other.color.rgb-value.hex.css",
          "match": "(#)(?:[0-9a-fA-F]{3,4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})\\b",
          "captures": {
            "1": {
              "name": "punctuation.definition.constant.css"
            }
          }
        },
        {
          "name": "constant.numeric.css",
          "match": "(?xi) (?<![\\w-])\n[-+]?                               # Sign indicator\n\n(?:                                 # Numerals\n    [0-9]+ (?:\\.[0-9]+)?           # Integer/float with leading digits\n  | \\.[0-9]+                       # Float without leading digits\n)\n\n(?:                                 # Scientific notation\n  (?<=[0-9])                        # Exponent must follow a digit\n  E                                 # Exponent indicator\n  [-+]?                             # Possible sign indicator\n  [0-9]+                            # Exponent value\n)?\n\n(?:                                 # Possible unit for data-type:\n  (%)                               # - Percentage\n  | ( deg|grad|rad|turn             # - Angle\n    | Hz|kHz                        # - Frequency\n    | ch|cm|em|ex|fr|in|mm|mozmm|   # - Length\n      pc|pt|px|q|rem|vh|vmax|vmin|\n      vw\n    | dpi|dpcm|dppx                 # - Resolution\n    | s|ms                          # - Time\n    )\n  \\b                               # Boundary checking intentionally lax to\n)?                                  # facilitate embedding in CSS-like grammars",
          "captures": {
            "1": {
              "name": "keyword.other.unit.percentage.css"
            },
            "2": {
              "name": "keyword.other.unit.${2:/downcase}.css"
            }
          }
        }
      ]
    },
    "source-css-property-keywords": {
      "patterns": [
        {
          "name": "support.constant.property-value.css",
          "match": "(?xi) (?<![\\w-])\n(above|absolute|active|add|additive|after-edge|alias|all|all-petite-caps|all-scroll|all-small-caps|alpha|alphabetic|alternate|alternate-reverse\n|always|antialiased|auto|auto-pos|available|avoid|avoid-column|avoid-page|avoid-region|backwards|balance|baseline|before-edge|below|bevel\n|bidi-override|blink|block|block-axis|block-start|block-end|bold|bolder|border|border-box|both|bottom|bottom-outside|break-all|break-word|bullets\n|butt|capitalize|caption|cell|center|central|char|circle|clip|clone|close-quote|closest-corner|closest-side|col-resize|collapse|color|color-burn\n|color-dodge|column|column-reverse|common-ligatures|compact|condensed|contain|content|content-box|contents|context-menu|contextual|copy|cover\n|crisp-edges|crispEdges|crosshair|cyclic|darken|dashed|decimal|default|dense|diagonal-fractions|difference|digits|disabled|disc|discretionary-ligatures\n|distribute|distribute-all-lines|distribute-letter|distribute-space|dot|dotted|double|double-circle|downleft|downright|e-resize|each-line|ease|ease-in\n|ease-in-out|ease-out|economy|ellipse|ellipsis|embed|end|evenodd|ew-resize|exact|exclude|exclusion|expanded|extends|extra-condensed|extra-expanded\n|fallback|farthest-corner|farthest-side|fill|fill-available|fill-box|filled|fit-content|fixed|flat|flex|flex-end|flex-start|flip|forwards|freeze\n|from-image|full-width|geometricPrecision|georgian|grab|grabbing|grayscale|grid|groove|hand|hanging|hard-light|help|hidden|hide\n|historical-forms|historical-ligatures|horizontal|horizontal-tb|hue|icon|ideograph-alpha|ideograph-numeric|ideograph-parenthesis|ideograph-space\n|ideographic|inactive|infinite|inherit|initial|inline|inline-axis|inline-block|inline-end|inline-flex|inline-grid|inline-list-item|inline-start\n|inline-table|inset|inside|inter-character|inter-ideograph|inter-word|intersect|invert|isolate|isolate-override|italic|jis04|jis78|jis83\n|jis90|justify|justify-all|kannada|keep-all|landscape|large|larger|left|lighten|lighter|line|line-edge|line-through|linear|linearRGB\n|lining-nums|list-item|local|loose|lowercase|lr|lr-tb|ltr|luminance|luminosity|main-size|mandatory|manipulation|manual|margin-box|match-parent\n|match-source|mathematical|max-content|medium|menu|message-box|middle|min-content|miter|mixed|move|multiply|n-resize|narrower|ne-resize\n|nearest-neighbor|nesw-resize|newspaper|no-change|no-clip|no-close-quote|no-common-ligatures|no-contextual|no-discretionary-ligatures\n|no-drop|no-historical-ligatures|no-open-quote|no-repeat|none|nonzero|normal|not-allowed|nowrap|ns-resize|numbers|numeric|nw-resize|nwse-resize\n|oblique|oldstyle-nums|open|open-quote|optimizeLegibility|optimizeQuality|optimizeSpeed|optional|ordinal|outset|outside|over|overlay|overline|padding\n|padding-box|page|painted|pan-down|pan-left|pan-right|pan-up|pan-x|pan-y|paused|petite-caps|pixelated|plaintext|pointer|portrait|pre|pre-line\n|pre-wrap|preserve-3d|progress|progressive|proportional-nums|proportional-width|proximity|radial|recto|region|relative|remove|repeat|repeat-[xy]\n|reset-size|reverse|revert|ridge|right|rl|rl-tb|round|row|row-resize|row-reverse|row-severse|rtl|ruby|ruby-base|ruby-base-container|ruby-text\n|ruby-text-container|run-in|running|s-resize|saturation|scale-down|screen|scroll|scroll-position|self-start|self-end|se-resize|semi-condensed\n|semi-expanded|separate\n|sesame|show|sideways|sideways-left|sideways-lr|sideways-right|sideways-rl|simplified|slashed-zero|slice|small|small-caps|small-caption|smaller\n|smooth|soft-light|solid|space|space-around|space-between|space-evenly|spell-out|square|sRGB|stacked-fractions|start|static|status-bar|swap\n|step-end|step-start|sticky|stretch|strict|stroke|stroke-box|style|sub|subgrid|subpixel-antialiased|subtract|super|sw-resize|symbolic|table\n|table-caption|table-cell|table-column|table-column-group|table-footer-group|table-header-group|table-row|table-row-group|tabular-nums|tb|tb-rl\n|text|text-after-edge|text-before-edge|text-bottom|text-top|thick|thin|titling-caps|top|top-outside|touch|traditional|transparent|triangle\n|ultra-condensed|ultra-expanded|under|underline|unicase|unset|upleft|uppercase|upright|use-glyph-orientation|use-script|verso|vertical\n|vertical-ideographic|vertical-lr|vertical-rl|vertical-text|view-box|visible|visibleFill|visiblePainted|visibleStroke|w-resize|wait|wavy\n|weight|whitespace|wider|words|wrap|wrap-reverse|x-large|x-small|xx-large|xx-small|zero|zoom-in|zoom-out)\n(?![\\w-])"
        },
        {
          "name": "support.constant.property-value.list-style-type.css",
          "match": "(?xi) (?<![\\w-])\n(arabic-indic|armenian|bengali|cambodian|circle|cjk-decimal|cjk-earthly-branch|cjk-heavenly-stem|cjk-ideographic\n|decimal|decimal-leading-zero|devanagari|disc|disclosure-closed|disclosure-open|ethiopic-halehame-am\n|ethiopic-halehame-ti-e[rt]|ethiopic-numeric|georgian|gujarati|gurmukhi|hangul|hangul-consonant|hebrew\n|hiragana|hiragana-iroha|japanese-formal|japanese-informal|kannada|katakana|katakana-iroha|khmer\n|korean-hangul-formal|korean-hanja-formal|korean-hanja-informal|lao|lower-alpha|lower-armenian|lower-greek\n|lower-latin|lower-roman|malayalam|mongolian|myanmar|oriya|persian|simp-chinese-formal|simp-chinese-informal\n|square|tamil|telugu|thai|tibetan|trad-chinese-formal|trad-chinese-informal|upper-alpha|upper-armenian\n|upper-latin|upper-roman|urdu)\n(?![\\w-])"
        },
        {
          "name": "support.constant.vendored.property-value.css",
          "match": "(?<![\\w-])(?i:-(?:ah|apple|atsc|epub|hp|khtml|moz|ms|o|rim|ro|tc|wap|webkit|xv)|(?:mso|prince))-[a-zA-Z-]+"
        },
        {
          "name": "support.constant.font-name.css",
          "match": "(?<![\\w-])(?i:arial|century|comic|courier|garamond|georgia|helvetica|impact|lucida|symbol|system|tahoma|times|trebuchet|utopia|verdana|webdings|sans-serif|serif|cursive|fantasy|monospace)(?![\\w-])"
        }
      ]
    },
    "source-css-property-names": {
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "name": "support.type.property-name.css",
          "match": "(?xi) (?<![\\w-])\n(?:\n    # Standard CSS\n    additive-symbols|align-content|align-items|align-self|all|animation|animation-delay|animation-direction\n  | animation-duration|animation-fill-mode|animation-iteration-count|animation-name|animation-play-state\n  | animation-timing-function|backface-visibility|background|background-attachment|background-blend-mode\n  | background-clip|background-color|background-image|background-origin|background-position|background-position-[xy]\n  | background-repeat|background-size|block-size|border|border-block-end|border-block-end-color|border-block-end-style\n  | border-block-end-width|border-block-start|border-block-start-color|border-block-start-style\n  | border-block-start-width|border-bottom|border-bottom-color|border-bottom-left-radius|border-bottom-right-radius\n  | border-bottom-style|border-bottom-width|border-collapse|border-color|border-image|border-image-outset\n  | border-image-repeat|border-image-slice|border-image-source|border-image-width|border-inline-end\n  | border-inline-end-color|border-inline-end-style|border-inline-end-width|border-inline-start\n  | border-inline-start-color|border-inline-start-style|border-inline-start-width|border-left|border-left-color\n  | border-left-style|border-left-width|border-radius|border-right|border-right-color|border-right-style\n  | border-right-width|border-spacing|border-style|border-top|border-top-color|border-top-left-radius\n  | border-top-right-radius|border-top-style|border-top-width|border-width|bottom|box-decoration-break\n  | box-shadow|box-sizing|break-after|break-before|break-inside|caption-side|clear|clip|clip-path|color\n  | column-count|column-fill|column-gap|column-rule|column-rule-color|column-rule-style|column-rule-width\n  | column-span|column-width|columns|content|counter-increment|counter-reset|cursor|direction|display\n  | empty-cells|filter|flex|flex-basis|flex-direction|flex-flow|flex-grow|flex-shrink|flex-wrap|float\n  | font|font-display|font-family|font-feature-settings|font-kerning|font-language-override|font-size|font-size-adjust\n  | font-stretch|font-style|font-synthesis|font-variant|font-variant-alternates|font-variant-caps\n  | font-variant-east-asian|font-variant-ligatures|font-variant-numeric|font-variant-position|font-weight\n  | grid|grid-area|grid-auto-columns|grid-auto-flow|grid-auto-rows|grid-column|grid-column-end|grid-column-gap\n  | grid-column-start|grid-gap|grid-row|grid-row-end|grid-row-gap|grid-row-start|grid-template|grid-template-areas\n  | grid-template-columns|grid-template-rows|height|hyphens|image-orientation|image-rendering|image-resolution\n  | ime-mode|inline-size|isolation|justify-self|justify-items|justify-content|left|letter-spacing|line-break|line-height|list-style\n  | list-style-image|list-style-position|list-style-type|margin|margin-block-end|margin-block-start|margin-bottom\n  | margin-inline-end|margin-inline-start|margin-left|margin-right|margin-top|mask|mask-clip|mask-composite\n  | mask-image|mask-mode|mask-origin|mask-position|mask-repeat|mask-size|mask-type|max-block-size|max-height\n  | max-inline-size|max-width|max-zoom|min-block-size|min-height|min-inline-size|min-width|min-zoom|mix-blend-mode\n  | negative|object-fit|object-position|offset-block-end|offset-block-start|offset-inline-end|offset-inline-start\n  | opacity|order|orientation|orphans|outline|outline-color|outline-offset|outline-style|outline-width|overflow\n  | overflow-wrap|overflow-[xy]|pad|padding|padding-block-end|padding-block-start|padding-bottom|padding-inline-end\n  | padding-inline-start|padding-left|padding-right|padding-top|page-break-after|page-break-before|page-break-inside\n  | perspective|perspective-origin|pointer-events|position|prefix|quotes|range|resize|right|ruby-align|ruby-merge\n  | ruby-position|scroll-behavior|scroll-snap-coordinate|scroll-snap-destination|scroll-snap-type|shape-image-threshold\n  | shape-margin|shape-outside|speak-as|src|suffix|symbols|system|tab-size|table-layout|text-align|text-align-last\n  | text-combine-upright|text-decoration|text-decoration-color|text-decoration-line|text-decoration-style|text-emphasis\n  | text-emphasis-color|text-emphasis-position|text-emphasis-style|text-indent|text-orientation|text-overflow\n  | text-rendering|text-shadow|text-transform|text-underline-position|top|touch-action|transform|transform-box\n  | transform-origin|transform-style|transition|transition-delay|transition-duration|transition-property\n  | transition-timing-function|unicode-bidi|unicode-range|user-zoom|vertical-align|visibility|white-space|widows\n  | width|will-change|word-break|word-spacing|word-wrap|writing-mode|z-index|zoom\n\n  # SVG attributes\n  | alignment-baseline|baseline-shift|clip-rule|color-interpolation|color-interpolation-filters|color-profile\n  | color-rendering|cx|cy|dominant-baseline|enable-background|fill|fill-opacity|fill-rule|flood-color|flood-opacity\n  | glyph-orientation-horizontal|glyph-orientation-vertical|height|kerning|lighting-color|marker-end|marker-mid\n  | marker-start|r|rx|ry|shape-rendering|stop-color|stop-opacity|stroke|stroke-dasharray|stroke-dashoffset|stroke-linecap\n  | stroke-linejoin|stroke-miterlimit|stroke-opacity|stroke-width|text-anchor|width|x|y\n\n  # Not listed on MDN; presumably deprecated\n  | adjust|after|align|align-last|alignment|alignment-adjust|appearance|attachment|azimuth|background-break\n  | balance|baseline|before|bidi|binding|bookmark|bookmark-label|bookmark-level|bookmark-target|border-length\n  | bottom-color|bottom-left-radius|bottom-right-radius|bottom-style|bottom-width|box|box-align|box-direction\n  | box-flex|box-flex-group|box-lines|box-ordinal-group|box-orient|box-pack|break|character|collapse|column\n  | column-break-after|column-break-before|count|counter|crop|cue|cue-after|cue-before|decoration|decoration-break\n  | delay|display-model|display-role|down|drop|drop-initial-after-adjust|drop-initial-after-align|drop-initial-before-adjust\n  | drop-initial-before-align|drop-initial-size|drop-initial-value|duration|elevation|emphasis|family|fit|fit-position\n  | flex-group|float-offset|gap|grid-columns|grid-rows|hanging-punctuation|header|hyphenate|hyphenate-after|hyphenate-before\n  | hyphenate-character|hyphenate-lines|hyphenate-resource|icon|image|increment|indent|index|initial-after-adjust\n  | initial-after-align|initial-before-adjust|initial-before-align|initial-size|initial-value|inline-box-align|iteration-count\n  | justify|label|left-color|left-style|left-width|length|level|line|line-stacking|line-stacking-ruby|line-stacking-shift\n  | line-stacking-strategy|lines|list|mark|mark-after|mark-before|marks|marquee|marquee-direction|marquee-play-count|marquee-speed\n  | marquee-style|max|min|model|move-to|name|nav|nav-down|nav-index|nav-left|nav-right|nav-up|new|numeral|offset|ordinal-group\n  | orient|origin|overflow-style|overhang|pack|page|page-policy|pause|pause-after|pause-before|phonemes|pitch|pitch-range\n  | play-count|play-during|play-state|point|presentation|presentation-level|profile|property|punctuation|punctuation-trim\n  | radius|rate|rendering-intent|repeat|replace|reset|resolution|resource|respond-to|rest|rest-after|rest-before|richness\n  | right-color|right-style|right-width|role|rotation|rotation-point|rows|ruby|ruby-overhang|ruby-span|rule|rule-color\n  | rule-style|rule-width|shadow|size|size-adjust|sizing|space|space-collapse|spacing|span|speak|speak-header|speak-numeral\n  | speak-punctuation|speech|speech-rate|speed|stacking|stacking-ruby|stacking-shift|stacking-strategy|stress|stretch\n  | string-set|style|style-image|style-position|style-type|target|target-name|target-new|target-position|text|text-height\n  | text-justify|text-outline|text-replace|text-wrap|timing-function|top-color|top-left-radius|top-right-radius|top-style\n  | top-width|trim|unicode|up|user-select|variant|voice|voice-balance|voice-duration|voice-family|voice-pitch|voice-pitch-range\n  | voice-rate|voice-stress|voice-volume|volume|weight|white|white-space-collapse|word|wrap\n)\n(?![\\w-])"
        },
        {
          "name": "support.type.vendored.property-name.css",
          "match": "(?<![\\w-])(?i:-(?:ah|apple|atsc|epub|hp|khtml|moz|ms|o|rim|ro|tc|wap|webkit|xv)|(?:mso|prince))-[a-zA-Z-]+"
        }
      ]
    },
    "source-css-property-values": {
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "include": "#source-css-commas"
        },
        {
          "include": "#source-css-comment-block"
        },
        {
          "include": "#source-css-escapes"
        },
        {
          "include": "#source-css-functions"
        },
        {
          "include": "#source-css-property-keywords"
        },
        {
          "include": "#source-css-unicode-range"
        },
        {
          "include": "#source-css-numeric-values"
        },
        {
          "include": "#source-css-color-keywords"
        },
        {
          "include": "#source-css-string"
        },
        {
          "name": "keyword.other.important.css",
          "match": "!\\s*important(?![\\w-])"
        }
      ]
    },
    "source-css-pseudo-classes": {
      "name": "entity.other.attribute-name.pseudo-class.css",
      "match": "(?xi)\n(:)(:*)\n(?: active|any-link|checked|default|defined|disabled|empty|enabled|first\n  | (?:first|last|only)-(?:child|of-type)|focus|focus-visible|focus-within\n  | fullscreen|host|hover|in-range|indeterminate|invalid|left|link\n  | optional|out-of-range|placeholder-shown|read-only|read-write\n  | required|right|root|scope|target|unresolved\n  | valid|visited\n)(?![\\w-]|\\s*[;}])",
      "captures": {
        "1": {
          "name": "punctuation.definition.entity.css"
        },
        "2": {
          "name": "invalid.illegal.colon.css"
        }
      }
    },
    "source-css-pseudo-elements": {
      "name": "entity.other.attribute-name.pseudo-element.css",
      "match": "(?xi)\n(?:\n  (::?)                       # Elements using both : and :: notation\n  (?: after\n    | before\n    | first-letter\n    | first-line\n    | (?:-(?:ah|apple|atsc|epub|hp|khtml|moz\n            |ms|o|rim|ro|tc|wap|webkit|xv)\n        | (?:mso|prince))\n      -[a-z-]+\n  )\n  |\n  (::)                        # Double-colon only\n  (?: backdrop\n    | content\n    | grammar-error\n    | marker\n    | placeholder\n    | selection\n    | shadow\n    | spelling-error\n  )\n)\n(?![\\w-]|\\s*[;}])",
      "captures": {
        "1": {
          "name": "punctuation.definition.entity.css"
        },
        "2": {
          "name": "punctuation.definition.entity.css"
        }
      }
    },
    "source-css-rule-list": {
      "name": "meta.property-list.css",
      "begin": "{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.property-list.begin.bracket.curly.css"
        }
      },
      "end": "}",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.property-list.end.bracket.curly.css"
        }
      },
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "include": "#source-css-rule-list-innards"
        }
      ]
    },
    "source-css-rule-list-innards": {
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "include": "#source-css-comment-block"
        },
        {
          "include": "#source-css-escapes"
        },
        {
          "include": "#source-css-font-features"
        },
        {
          "name": "variable.css",
          "match": "(?x) (?<![\\w-])\n--\n(?:[-a-zA-Z_]    | [^\\x00-\\x7F])     # First letter\n(?:[-a-zA-Z0-9_] | [^\\x00-\\x7F]      # Remainder of identifier\n  |\\\\(?:[0-9a-fA-F]{1,6}|.)\n)*"
        },
        {
          "name": "meta.property-name.css",
          "begin": "(?<![-a-zA-Z])(?=[-a-zA-Z])",
          "end": "$|(?![-a-zA-Z])",
          "patterns": [
            {
              "include": "#cfml-tags"
            },
            {
              "include": "#source-css-property-names"
            }
          ]
        },
        {
          "begin": "(:)\\s*",
          "beginCaptures": {
            "1": {
              "name": "punctuation.separator.key-value.css"
            }
          },
          "contentName": "meta.property-value.css",
          "end": "\\s*(;)|\\s*(?=}|\\))",
          "endCaptures": {
            "1": {
              "name": "punctuation.terminator.rule.css"
            }
          },
          "patterns": [
            {
              "include": "#source-css-comment-block"
            },
            {
              "include": "#source-css-property-values"
            }
          ]
        },
        {
          "name": "punctuation.terminator.rule.css",
          "match": ";"
        }
      ]
    },
    "source-css-selector": {
      "name": "meta.selector.css",
      "begin": "(?x)\n(?=\n  (?:\\|)?                    # Possible anonymous namespace prefix\n  (?:\n    [-\\[:.*\\#a-zA-Z_]       # Valid selector character\n    |\n    [^\\x00-\\x7F]            # Which can include non-ASCII symbols\n    |\n    \\\\                      # Or an escape sequence\n    (?:[0-9a-fA-F]{1,6}|.)\n  )\n)",
      "end": "(?=\\s*[/@{)])",
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "include": "#source-css-selector-innards"
        }
      ]
    },
    "source-css-selector-innards": {
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "include": "#source-css-comment-block"
        },
        {
          "include": "#source-css-commas"
        },
        {
          "include": "#source-css-escapes"
        },
        {
          "include": "#source-css-combinators"
        },
        {
          "match": "(?x)\n(?:^|(?<=[\\s,(};]))         # Follows whitespace, comma, semicolon, or bracket\n(?!\n  [-\\w*]+\n  \\|\n  (?!\n      [-\\[:.*\\#a-zA-Z_]    # Make sure there's a selector to match\n    | [^\\x00-\\x7F]\n  )\n)\n(\n  (?: [-a-zA-Z_]    | [^\\x00-\\x7F] )   # First letter\n  (?: [-a-zA-Z0-9_] | [^\\x00-\\x7F]     # Remainder of identifier\n    | \\\\(?:[0-9a-fA-F]{1,6}|.)\n  )*\n  |\n  \\*     # Universal namespace\n)?\n(\\|)     # Namespace separator",
          "captures": {
            "1": {
              "name": "entity.other.namespace-prefix.css"
            },
            "2": {
              "name": "punctuation.separator.css"
            }
          }
        },
        {
          "include": "#source-css-tag-names"
        },
        {
          "name": "entity.name.tag.wildcard.css",
          "match": "\\*"
        },
        {
          "name": "invalid.illegal.bad-identifier.css",
          "match": "(?x) (?<![@\\w-])\n([.\\#])\n# Invalid identifier\n(\n  (?:\n    # Starts with ASCII digits, with possible hyphen preceding it\n    -?[0-9]\n    |\n    # Consists of a hyphen only\n    -                                      # Terminated by either:\n    (?= $                                  # - End-of-line\n      | [\\s,.\\#)\\[:{>+~|]               # - Followed by another selector\n      | /\\*                               # - Followed by a block comment\n    )\n    |\n    # Name contains unescaped ASCII symbol\n    (?:                                    # Check for acceptable preceding characters\n        [-a-zA-Z_0-9]|[^\\x00-\\x7F]       # - Valid selector character\n      | \\\\(?:[0-9a-fA-F]{1,6}|.)         # - Escape sequence\n    )*\n    (?:                                    # Invalid punctuation\n      [!\"'%&(*;<?@^`|\\]}]                 # - NOTE: We exempt `)` from the list of checked\n      |                                    #   symbols to avoid matching `:not(.invalid)`\n      / (?!\\*)                            # - Avoid invalidating the start of a comment\n    )+\n  )\n  # Mark remainder of selector invalid\n  (?: [-a-zA-Z_0-9]|[^\\x00-\\x7F]         # - Otherwise valid identifier characters\n    | \\\\(?:[0-9a-fA-F]{1,6}|.)           # - Escape sequence\n  )*\n)",
          "captures": {
            "1": {
              "name": "punctuation.definition.entity.css"
            },
            "2": {
              "patterns": [
                {
                  "include": "#source-css-escapes"
                }
              ]
            }
          }
        },
        {
          "name": "entity.other.attribute-name.class.css",
          "match": "(?x)\n(\\.)                                  # Valid class-name\n(\n  (?: [-a-zA-Z_0-9]|[^\\x00-\\x7F]     # Valid identifier characters\n    | \\\\(?:[0-9a-fA-F]{1,6}|.)       # Escape sequence\n  )+\n)                                      # Followed by either:\n(?= $                                  # - End of the line\n  | [\\s,.\\#)\\[:{>+~|]               # - Another selector\n  | /\\*                               # - A block comment\n)",
          "captures": {
            "1": {
              "name": "punctuation.definition.entity.css"
            },
            "2": {
              "patterns": [
                {
                  "include": "#source-css-escapes"
                }
              ]
            }
          }
        },
        {
          "name": "entity.other.attribute-name.id.css",
          "match": "(?x)\n(\\#)\n(\n  -?\n  (?![0-9])\n  (?:[-a-zA-Z0-9_]|[^\\x00-\\x7F]|\\\\(?:[0-9a-fA-F]{1,6}|.))+\n)\n(?=$|[\\s,.\\#)\\[:{>+~|]|/\\*)",
          "captures": {
            "1": {
              "name": "punctuation.definition.entity.css"
            },
            "2": {
              "patterns": [
                {
                  "include": "#source-css-escapes"
                }
              ]
            }
          }
        },
        {
          "name": "meta.attribute-selector.css",
          "begin": "\\[",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.entity.begin.bracket.square.css"
            }
          },
          "end": "\\]",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.entity.end.bracket.square.css"
            }
          },
          "patterns": [
            {
              "include": "#source-css-comment-block"
            },
            {
              "include": "#source-css-string"
            },
            {
              "match": "(?<=[\"'\\s]|^|\\*/)\\s*([iI])\\s*(?=[\\s\\]]|/\\*|$)",
              "captures": {
                "1": {
                  "name": "storage.modifier.ignore-case.css"
                }
              }
            },
            {
              "match": "(?x)(?<==)\\s*((?!/\\*)(?:[^\\\\\"'\\s\\]]|\\\\.)+)",
              "captures": {
                "1": {
                  "name": "string.unquoted.attribute-value.css",
                  "patterns": [
                    {
                      "include": "#source-css-escapes"
                    }
                  ]
                }
              }
            },
            {
              "include": "#source-css-escapes"
            },
            {
              "name": "keyword.operator.pattern.css",
              "match": "[~|^$*]?="
            },
            {
              "name": "punctuation.separator.css",
              "match": "\\|"
            },
            {
              "match": "(?x)\n# Qualified namespace prefix\n( -?(?!\\d)(?:[\\w-]|[^\\x00-\\x7F]|\\\\(?:[0-9a-fA-F]{1,6}|.))+\n| \\*\n)\n# Lookahead to ensure there's a valid identifier ahead\n(?=\n  \\| (?!\\s|=|$|\\])\n  (?: -?(?!\\d)\n   |   [\\\\\\w-]\n   |   [^\\x00-\\x7F]\n   )\n)",
              "captures": {
                "1": {
                  "name": "entity.other.namespace-prefix.css",
                  "patterns": [
                    {
                      "include": "#source-css-escapes"
                    }
                  ]
                }
              }
            },
            {
              "match": "(?x)\n(-?(?!\\d)(?>[\\w-]|[^\\x00-\\x7F]|\\\\(?:[0-9a-fA-F]{1,6}|.))+)\n\\s*\n(?=[~|^\\]$*=]|/\\*)",
              "captures": {
                "1": {
                  "name": "entity.other.attribute-name.css",
                  "patterns": [
                    {
                      "include": "#source-css-escapes"
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "include": "#source-css-pseudo-classes"
        },
        {
          "include": "#source-css-pseudo-elements"
        },
        {
          "include": "#source-css-functional-pseudo-classes"
        },
        {
          "name": "entity.name.tag.custom.css",
          "match": "(?x) (?<![@\\w-])\n(?=            # Custom element names must:\n  [a-z]        # - start with a lowercase ASCII letter,\n  \\w* -       # - contain at least one dash\n)\n(?:\n  (?![A-Z])    # No uppercase ASCII letters are allowed\n  [\\w-]       # Allow any other word character or dash\n)+\n(?![(\\w-])"
        }
      ]
    },
    "source-css-string": {
      "patterns": [
        {
          "name": "string.quoted.double.css",
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.css"
            }
          },
          "end": "\"|(?<!\\\\)(?=$|\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.css"
            }
          },
          "patterns": [
            {
              "begin": "(?:\\G|^)(?=(?:[^\\\\\"]|\\\\.)+$)",
              "end": "$",
              "name": "invalid.illegal.unclosed.string.css",
              "patterns": [
                {
                  "include": "#source-css-escapes"
                }
              ]
            },
            {
              "include": "#source-css-escapes"
            }
          ]
        },
        {
          "name": "string.quoted.single.css",
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.css"
            }
          },
          "end": "'|(?<!\\\\)(?=$|\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.css"
            }
          },
          "patterns": [
            {
              "begin": "(?:\\G|^)(?=(?:[^\\\\']|\\\\.)+$)",
              "end": "$",
              "name": "invalid.illegal.unclosed.string.css",
              "patterns": [
                {
                  "include": "#source-css-escapes"
                }
              ]
            },
            {
              "include": "#source-css-escapes"
            }
          ]
        }
      ]
    },
    "source-css-tag-names": {
      "name": "entity.name.tag.css",
      "match": "(?xi) (?<![\\w:-])\n(?:\n    # HTML\n    a|abbr|acronym|address|applet|area|article|aside|audio|b|base|basefont|bdi|bdo|bgsound\n  | big|blink|blockquote|body|br|button|canvas|caption|center|cite|code|col|colgroup|command\n  | content|data|datalist|dd|del|details|dfn|dialog|dir|div|dl|dt|element|em|embed|fieldset\n  | figcaption|figure|font|footer|form|frame|frameset|h[1-6]|head|header|hgroup|hr|html|i\n  | iframe|image|img|input|ins|isindex|kbd|keygen|label|legend|li|link|listing|main|map|mark\n  | marquee|math|menu|menuitem|meta|meter|multicol|nav|nextid|nobr|noembed|noframes|noscript\n  | object|ol|optgroup|option|output|p|param|picture|plaintext|pre|progress|q|rb|rp|rt|rtc\n  | ruby|s|samp|script|section|select|shadow|slot|small|source|spacer|span|strike|strong\n  | style|sub|summary|sup|table|tbody|td|template|textarea|tfoot|th|thead|time|title|tr\n  | track|tt|u|ul|var|video|wbr|xmp\n\n  # SVG\n  | altGlyph|altGlyphDef|altGlyphItem|animate|animateColor|animateMotion|animateTransform\n  | circle|clipPath|color-profile|cursor|defs|desc|discard|ellipse|feBlend|feColorMatrix\n  | feComponentTransfer|feComposite|feConvolveMatrix|feDiffuseLighting|feDisplacementMap\n  | feDistantLight|feDropShadow|feFlood|feFuncA|feFuncB|feFuncG|feFuncR|feGaussianBlur\n  | feImage|feMerge|feMergeNode|feMorphology|feOffset|fePointLight|feSpecularLighting\n  | feSpotLight|feTile|feTurbulence|filter|font-face|font-face-format|font-face-name\n  | font-face-src|font-face-uri|foreignObject|g|glyph|glyphRef|hatch|hatchpath|hkern\n  | line|linearGradient|marker|mask|mesh|meshgradient|meshpatch|meshrow|metadata\n  | missing-glyph|mpath|path|pattern|polygon|polyline|radialGradient|rect|set|solidcolor\n  | stop|svg|switch|symbol|text|textPath|tref|tspan|use|view|vkern\n\n  # MathML\n  | annotation|annotation-xml|maction|maligngroup|malignmark|math|menclose|merror|mfenced\n  | mfrac|mglyph|mi|mlabeledtr|mlongdiv|mmultiscripts|mn|mo|mover|mpadded|mphantom|mroot\n  | mrow|ms|mscarries|mscarry|msgroup|msline|mspace|msqrt|msrow|mstack|mstyle|msub|msubsup\n  | msup|mtable|mtd|mtext|mtr|munder|munderover|semantics\n)\n(?=[+~>\\s,.\\#|){:\\[]|/\\*|$)"
    },
    "source-css-unicode-range": {
      "match": "(?<![\\w-])[Uu]\\+[0-9A-Fa-f?]{1,6}(?:(-)[0-9A-Fa-f]{1,6})?(?![\\w-])",
      "captures": {
        "0": {
          "name": "constant.other.unicode-range.css"
        },
        "1": {
          "name": "punctuation.separator.dash.unicode-range.css"
        }
      }
    },
    "source-css-url": {
      "name": "meta.function.url.css",
      "begin": "(?i)(?<![\\w@-])(url)(\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.url.css"
        },
        "2": {
          "name": "punctuation.section.function.begin.bracket.round.css"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.function.end.bracket.round.css"
        }
      },
      "patterns": [
        {
          "match": "[^'\")\\s]+",
          "name": "variable.parameter.url.css"
        },
        {
          "include": "#source-css-string"
        },
        {
          "include": "#source-css-comment-block"
        },
        {
          "include": "#source-css-escapes"
        }
      ]
    },
    "source-css-cfoutput": {
      "patterns": [
        {
          "include": "#source-css-cfoutput-comment-block"
        },
        {
          "include": "#source-css-escapes"
        },
        {
          "include": "#source-css-combinators"
        },
        {
          "include": "#source-css-cfoutput-selector"
        },
        {
          "include": "#source-css-cfoutput-at-rules"
        },
        {
          "include": "#source-css-cfoutput-rule-list"
        }
      ]
    },
    "source-css-cfoutput-at-rules": {
      "patterns": [
        {
          "name": "meta.at-rule.charset.css",
          "begin": "\\A(?:\\xEF\\xBB\\xBF)?(?i:(?=\\s*@charset\\b))",
          "end": ";|(?=$)",
          "endCaptures": {
            "0": {
              "name": "punctuation.terminator.rule.css"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "match": "(?x)        # Possible errors:\n\\G\n((?!@charset)@\\w+)   # Not lowercase (@charset is case-sensitive)\n|\n\\G(\\s+)             # Preceding whitespace\n|\n(@charset\\S[^;]*)    # No whitespace after @charset\n|\n(?<=@charset)         # Before quoted charset name\n(\\x20{2,}|\\t+)      # More than one space used, or a tab\n|\n(?<=@charset\\x20)    # Beginning of charset name\n([^\";]+)              # Not double-quoted\n|\n(\"[^\"]+$)             # Unclosed quote\n|\n(?<=\")                # After charset name\n([^;]+)               # Unexpected junk instead of semicolon",
              "captures": {
                "1": {
                  "name": "invalid.illegal.not-lowercase.charset.css"
                },
                "2": {
                  "name": "invalid.illegal.leading-whitespace.charset.css"
                },
                "3": {
                  "name": "invalid.illegal.no-whitespace.charset.css"
                },
                "4": {
                  "name": "invalid.illegal.whitespace.charset.css"
                },
                "5": {
                  "name": "invalid.illegal.not-double-quoted.charset.css"
                },
                "6": {
                  "name": "invalid.illegal.unclosed-string.charset.css"
                },
                "7": {
                  "name": "invalid.illegal.unexpected-characters.charset.css"
                }
              }
            },
            {
              "match": "((@)charset)(?=\\s)",
              "captures": {
                "1": {
                  "name": "keyword.control.at-rule.charset.css"
                },
                "2": {
                  "name": "punctuation.definition.keyword.css"
                }
              }
            },
            {
              "name": "string.quoted.double.css",
              "begin": "\"",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.string.begin.css"
                }
              },
              "end": "\"|$",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.string.end.css"
                }
              },
              "patterns": [
                {
                  "include": "#cfoutput-injection"
                },
                {
                  "name": "invalid.illegal.unclosed.string.css",
                  "begin": "(?:\\G|^)(?=(?:[^\"])+$)",
                  "end": "$"
                }
              ]
            }
          ]
        },
        {
          "name": "meta.at-rule.import.css",
          "begin": "(?i)((@)import)(?:\\s+|$|(?=['\"]|/\\*))",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.at-rule.import.css"
            },
            "2": {
              "name": "punctuation.definition.keyword.css"
            }
          },
          "end": ";",
          "endCaptures": {
            "0": {
              "name": "punctuation.terminator.rule.css"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "begin": "\\G\\s*(?=/\\*)",
              "end": "(?<=\\*/)\\s*",
              "patterns": [
                {
                  "include": "#source-css-cfoutput-comment-block"
                }
              ]
            },
            {
              "include": "#source-css-cfoutput-string"
            },
            {
              "include": "#source-css-cfoutput-url"
            },
            {
              "include": "#source-css-cfoutput-media-query-list"
            }
          ]
        },
        {
          "name": "meta.at-rule.font-face.css",
          "begin": "(?i)((@)font-face)(?=\\s*|{|/\\*|$)",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.at-rule.font-face.css"
            },
            "2": {
              "name": "punctuation.definition.keyword.css"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-css-cfoutput-comment-block"
            },
            {
              "include": "#source-css-escapes"
            },
            {
              "include": "#source-css-cfoutput-rule-list"
            }
          ]
        },
        {
          "name": "meta.at-rule.page.css",
          "begin": "(?i)(@)page(?=[\\s:{]|/\\*|$)",
          "captures": {
            "0": {
              "name": "keyword.control.at-rule.page.css"
            },
            "1": {
              "name": "punctuation.definition.keyword.css"
            }
          },
          "end": "(?=\\s*($|[:{;]))",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-css-cfoutput-rule-list"
            }
          ]
        },
        {
          "begin": "(?i)(?=@media(\\s|\\(|/\\*|$))",
          "end": "(?<=})(?!\\G)",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "name": "meta.at-rule.media.header.css",
              "begin": "(?i)\\G(@)media",
              "beginCaptures": {
                "0": {
                  "name": "keyword.control.at-rule.media.css"
                },
                "1": {
                  "name": "punctuation.definition.keyword.css"
                }
              },
              "end": "(?=\\s*[{;])",
              "patterns": [
                {
                  "include": "#cfoutput-injection"
                },
                {
                  "include": "#source-css-cfoutput-media-query-list"
                }
              ]
            },
            {
              "name": "meta.at-rule.media.body.css",
              "begin": "{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.media.begin.bracket.curly.css"
                }
              },
              "end": "}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.media.end.bracket.curly.css"
                }
              },
              "patterns": [
                {
                  "include": "#cfoutput-injection"
                },
                {
                  "include": "$self"
                }
              ]
            }
          ]
        },
        {
          "begin": "(?i)(?=@counter-style([\\s'\"{;]|/\\*|$))",
          "end": "(?<=})(?!\\G)",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "name": "meta.at-rule.counter-style.header.css",
              "begin": "(?i)\\G(@)counter-style",
              "beginCaptures": {
                "0": {
                  "name": "keyword.control.at-rule.counter-style.css"
                },
                "1": {
                  "name": "punctuation.definition.keyword.css"
                }
              },
              "end": "(?=\\s*{)",
              "patterns": [
                {
                  "include": "#cfoutput-injection"
                },
                {
                  "include": "#source-css-cfoutput-comment-block"
                },
                {
                  "include": "#source-css-escapes"
                },
                {
                  "name": "variable.parameter.style-name.css",
                  "match": "(?x)\n(?:[-a-zA-Z_]    | [^\\x00-\\x7F])     # First letter\n(?:[-a-zA-Z0-9_] | [^\\x00-\\x7F]      # Remainder of identifier\n  |\\\\(?:[0-9a-fA-F]{1,6}|.)\n)*",
                  "captures": {
                    "0": {
                      "patterns": [
                        {
                          "include": "#cfoutput-injection"
                        },
                        {
                          "include": "#source-css-escapes"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            {
              "name": "meta.at-rule.counter-style.body.css",
              "begin": "{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.property-list.begin.bracket.curly.css"
                }
              },
              "end": "}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.property-list.end.bracket.curly.css"
                }
              },
              "patterns": [
                {
                  "include": "#cfoutput-injection"
                },
                {
                  "include": "#source-css-cfoutput-comment-block"
                },
                {
                  "include": "#source-css-escapes"
                },
                {
                  "include": "#source-css-cfoutput-rule-list-innards"
                }
              ]
            }
          ]
        },
        {
          "begin": "(?i)(?=@document([\\s'\"{;]|/\\*|$))",
          "end": "(?<=})(?!\\G)",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "name": "meta.at-rule.document.header.css",
              "begin": "(?i)\\G(@)document",
              "beginCaptures": {
                "0": {
                  "name": "keyword.control.at-rule.document.css"
                },
                "1": {
                  "name": "punctuation.definition.keyword.css"
                }
              },
              "end": "(?=\\s*[{;])",
              "patterns": [
                {
                  "include": "#cfoutput-injection"
                },
                {
                  "name": "meta.function.document-rule.css",
                  "begin": "(?i)(?<![\\w-])(url-prefix|domain|regexp)(\\()",
                  "beginCaptures": {
                    "1": {
                      "name": "support.function.document-rule.css"
                    },
                    "2": {
                      "name": "punctuation.section.function.begin.bracket.round.css"
                    }
                  },
                  "end": "\\)",
                  "endCaptures": {
                    "0": {
                      "name": "punctuation.section.function.end.bracket.round.css"
                    }
                  },
                  "patterns": [
                    {
                      "include": "#cfoutput-injection"
                    },
                    {
                      "include": "#source-css-cfoutput-string"
                    },
                    {
                      "include": "#source-css-cfoutput-comment-block"
                    },
                    {
                      "include": "#source-css-escapes"
                    },
                    {
                      "name": "variable.parameter.document-rule.css",
                      "match": "[^'\")\\s]+"
                    }
                  ]
                },
                {
                  "include": "#source-css-cfoutput-url"
                },
                {
                  "include": "#source-css-cfoutput-commas"
                },
                {
                  "include": "#source-css-cfoutput-comment-block"
                },
                {
                  "include": "#source-css-escapes"
                }
              ]
            },
            {
              "name": "meta.at-rule.document.body.css",
              "begin": "{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.document.begin.bracket.curly.css"
                }
              },
              "end": "}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.document.end.bracket.curly.css"
                }
              },
              "patterns": [
                {
                  "include": "#cfoutput-injection"
                },
                {
                  "include": "$self"
                }
              ]
            }
          ]
        },
        {
          "begin": "(?i)(?=@(?:-(?:webkit|moz|o|ms)-)?keyframes([\\s'\"{;]|/\\*|$))",
          "end": "(?<=})(?!\\G)",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "name": "meta.at-rule.keyframes.header.css",
              "begin": "(?i)\\G(@)(?:-(?:webkit|moz|o|ms)-)?keyframes",
              "beginCaptures": {
                "0": {
                  "name": "keyword.control.at-rule.keyframes.css"
                },
                "1": {
                  "name": "punctuation.definition.keyword.css"
                }
              },
              "end": "(?=\\s*{)",
              "patterns": [
                {
                  "include": "#cfoutput-injection"
                },
                {
                  "include": "#source-css-cfoutput-comment-block"
                },
                {
                  "include": "#source-css-escapes"
                },
                {
                  "name": "variable.parameter.keyframe-list.css",
                  "match": "(?x)\n(?:[-a-zA-Z_]    | [^\\x00-\\x7F])     # First letter\n(?:[-a-zA-Z0-9_] | [^\\x00-\\x7F]      # Remainder of identifier\n  |\\\\(?:[0-9a-fA-F]{1,6}|.)\n)*",
                  "captures": {
                    "0": {
                      "patterns": [
                        {
                          "include": "#cfoutput-injection"
                        },
                        {
                          "include": "#source-css-escapes"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            {
              "name": "meta.at-rule.keyframes.body.css",
              "begin": "{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.keyframes.begin.bracket.curly.css"
                }
              },
              "end": "}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.keyframes.end.bracket.curly.css"
                }
              },
              "patterns": [
                {
                  "include": "#cfoutput-injection"
                },
                {
                  "include": "#source-css-cfoutput-comment-block"
                },
                {
                  "include": "#source-css-escapes"
                },
                {
                  "match": "(?xi)\n(?<![\\w-]) (from|to) (?![\\w-])         # Keywords for 0% | 100%\n|\n([-+]?(?:\\d+(?:\\.\\d+)?|\\.\\d+)%)     # Percentile value",
                  "captures": {
                    "1": {
                      "name": "entity.other.keyframe-offset.css"
                    },
                    "2": {
                      "name": "entity.other.keyframe-offset.percentage.css"
                    }
                  }
                },
                {
                  "include": "#source-css-cfoutput-rule-list"
                }
              ]
            }
          ]
        },
        {
          "begin": "(?i)(?=@supports(\\s|\\(|/\\*|$))",
          "end": "(?<=})(?!\\G)|(?=;)",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "name": "meta.at-rule.supports.header.css",
              "begin": "(?i)\\G(@)supports",
              "beginCaptures": {
                "0": {
                  "name": "keyword.control.at-rule.supports.css"
                },
                "1": {
                  "name": "punctuation.definition.keyword.css"
                }
              },
              "end": "(?=\\s*[{;])",
              "patterns": [
                {
                  "include": "#cfoutput-injection"
                },
                {
                  "include": "#source-css-cfoutput-feature-query-operators"
                },
                {
                  "include": "#source-css-cfoutput-feature-query"
                },
                {
                  "include": "#source-css-cfoutput-comment-block"
                },
                {
                  "include": "#source-css-escapes"
                }
              ]
            },
            {
              "name": "meta.at-rule.supports.body.css",
              "begin": "{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.supports.begin.bracket.curly.css"
                }
              },
              "end": "}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.supports.end.bracket.curly.css"
                }
              },
              "patterns": [
                {
                  "include": "#cfoutput-injection"
                },
                {
                  "include": "$self"
                }
              ]
            }
          ]
        },
        {
          "name": "meta.at-rule.viewport.css",
          "begin": "(?i)((@)(-ms-|-o-)?viewport)(?=[\\s'\"{;]|/\\*|$)",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.at-rule.viewport.css"
            },
            "2": {
              "name": "punctuation.definition.keyword.css"
            }
          },
          "end": "(?=\\s*[@{;])",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-css-cfoutput-comment-block"
            },
            {
              "include": "#source-css-escapes"
            }
          ]
        },
        {
          "name": "meta.at-rule.font-features.css",
          "begin": "(?i)((@)font-feature-values)(?=[\\s'\"{;]|/\\*|$)\\s*",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.at-rule.font-feature-values.css"
            },
            "2": {
              "name": "punctuation.definition.keyword.css"
            }
          },
          "contentName": "variable.parameter.font-name.css",
          "end": "(?=\\s*[@{;])",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-css-cfoutput-comment-block"
            },
            {
              "include": "#source-css-escapes"
            }
          ]
        },
        {
          "include": "#source-css-cfoutput-font-features"
        },
        {
          "name": "meta.at-rule.namespace.css",
          "begin": "(?i)((@)namespace)(?=[\\s'\";]|/\\*|$)",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.at-rule.namespace.css"
            },
            "2": {
              "name": "punctuation.definition.keyword.css"
            }
          },
          "end": ";|(?=[@{])",
          "endCaptures": {
            "0": {
              "name": "punctuation.terminator.rule.css"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-css-cfoutput-url"
            },
            {
              "match": "(?xi)\n(?:\\G|^|(?<=\\s))\n(?=\n  (?<=\\s|^)                             # Starts with whitespace\n  (?:[-a-zA-Z_]|[^\\x00-\\x7F])          # Then a valid identifier character\n  |\n  \\s*                                   # Possible adjoining whitespace\n  /\\*(?:[^*]|\\*[^/])*\\*/              # Injected comment\n)\n(.*?)                                    # Grouped to embed #comment-block\n(\n  (?:[-a-zA-Z_]    | [^\\x00-\\x7F])     # First letter\n  (?:[-a-zA-Z0-9_] | [^\\x00-\\x7F]      # Remainder of identifier\n    |\\\\(?:[0-9a-fA-F]{1,6}|.)\n  )*\n)",
              "captures": {
                "1": {
                  "patterns": [
                    {
                      "include": "#cfoutput-injection"
                    },
                    {
                      "include": "#source-css-cfoutput-comment-block"
                    }
                  ]
                },
                "2": {
                  "name": "entity.name.function.namespace-prefix.css",
                  "patterns": [
                    {
                      "include": "#cfoutput-injection"
                    },
                    {
                      "include": "#source-css-escapes"
                    }
                  ]
                }
              }
            },
            {
              "include": "#source-css-cfoutput-comment-block"
            },
            {
              "include": "#source-css-escapes"
            },
            {
              "include": "#source-css-cfoutput-string"
            }
          ]
        },
        {
          "begin": "(?i)(?=@[\\w-]+(\\s|\\(|{|;|/\\*|$))",
          "end": "(?<=}|;)(?!\\G)",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "name": "meta.at-rule.header.css",
              "begin": "(?i)\\G(@)[\\w-]+",
              "beginCaptures": {
                "0": {
                  "name": "keyword.control.at-rule.css"
                },
                "1": {
                  "name": "punctuation.definition.keyword.css"
                }
              },
              "end": "(?=\\s*[{;])"
            },
            {
              "name": "meta.at-rule.body.css",
              "begin": "{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.section.begin.bracket.curly.css"
                }
              },
              "end": "}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.end.bracket.curly.css"
                }
              },
              "patterns": [
                {
                  "include": "#cfoutput-injection"
                },
                {
                  "include": "$self"
                }
              ]
            }
          ]
        }
      ]
    },
    "source-css-cfoutput-color-keywords": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "comment": "https://www.w3.org/TR/CSS21/syndata.html#value-def-color",
          "name": "support.constant.color.w3c-standard-color-name.css",
          "match": "(?i)(?<![\\w-])(aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow)(?![\\w-])"
        },
        {
          "comment": "https://www.w3.org/TR/2011/REC-css3-color-20110607/#svg-color",
          "name": "support.constant.color.w3c-extended-color-name.css",
          "match": "(?xi) (?<![\\w-])\n(aliceblue|antiquewhite|aquamarine|azure|beige|bisque|blanchedalmond|blueviolet|brown|burlywood\n|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan\n|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange\n|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise\n|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen\n|gainsboro|ghostwhite|gold|goldenrod|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki\n|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow\n|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray\n|lightslategrey|lightsteelblue|lightyellow|limegreen|linen|magenta|mediumaquamarine|mediumblue\n|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise\n|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|oldlace|olivedrab|orangered\n|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum\n|powderblue|rebeccapurple|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell\n|sienna|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|thistle|tomato\n|transparent|turquoise|violet|wheat|whitesmoke|yellowgreen)\n(?![\\w-])"
        },
        {
          "match": "(?i)(?<![\\w-])currentColor(?![\\w-])",
          "name": "support.constant.color.current.css"
        },
        {
          "match": "(?xi) (?<![\\w-])\n(ActiveBorder|ActiveCaption|AppWorkspace|Background|ButtonFace|ButtonHighlight|ButtonShadow\n|ButtonText|CaptionText|GrayText|Highlight|HighlightText|InactiveBorder|InactiveCaption\n|InactiveCaptionText|InfoBackground|InfoText|Menu|MenuText|Scrollbar|ThreeDDarkShadow\n|ThreeDFace|ThreeDHighlight|ThreeDLightShadow|ThreeDShadow|Window|WindowFrame|WindowText)\n(?![\\w-])",
          "name": "invalid.deprecated.color.system.css"
        }
      ]
    },
    "source-css-cfoutput-comment-block": {
      "name": "comment.block.css",
      "begin": "/\\*",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.comment.begin.css"
        }
      },
      "end": "\\*/|(?=</style)",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.comment.end.css"
        }
      },
      "patterns": [
        {
          "include": "#cfoutput-injection"
        }
      ]
    },
    "source-css-cfoutput-feature-query": {
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.condition.begin.bracket.round.css"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.condition.end.bracket.round.css"
        }
      },
      "name": "meta.feature-query.css",
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-css-cfoutput-feature-query-operators"
        },
        {
          "include": "#source-css-cfoutput-feature-query"
        }
      ]
    },
    "source-css-cfoutput-feature-query-operators": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "name": "keyword.operator.logical.feature.$1.css",
          "match": "(?i)(?<=[\\s()]|^|\\*/)(and|not|or)(?=[\\s()]|/\\*|$)"
        },
        {
          "include": "#source-css-cfoutput-rule-list-innards"
        }
      ]
    },
    "source-css-cfoutput-font-features": {
      "name": "meta.at-rule.${3:/downcase}.css",
      "begin": "(?xi)\n((@)(annotation|character-variant|ornaments|styleset|stylistic|swash))\n(?=[\\s@'\"{;]|/\\*|$)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.at-rule.${3:/downcase}.css"
        },
        "2": {
          "name": "punctuation.definition.keyword.css"
        }
      },
      "end": "(?<=})",
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "name": "meta.property-list.font-feature.css",
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.property-list.begin.bracket.curly.css"
            }
          },
          "end": "}",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.property-list.end.bracket.curly.css"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "name": "variable.font-feature.css",
              "match": "(?x)\n(?: [-a-zA-Z_]    | [^\\x00-\\x7F] )   # First letter\n(?: [-a-zA-Z0-9_] | [^\\x00-\\x7F]     # Remainder of identifier\n  | \\\\(?:[0-9a-fA-F]{1,6}|.)\n)*",
              "captures": {
                "0": {
                  "patterns": [
                    {
                      "include": "#source-css-escapes"
                    }
                  ]
                }
              }
            },
            {
              "include": "#source-css-cfoutput-rule-list-innards"
            }
          ]
        }
      ]
    },
    "source-css-cfoutput-functions": {
      "patterns": [
        {
          "name": "meta.function.calc.css",
          "begin": "(?i)(?<![\\w-])(calc)(\\()",
          "beginCaptures": {
            "1": {
              "name": "support.function.calc.css"
            },
            "2": {
              "name": "punctuation.section.function.begin.bracket.round.css"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.function.end.bracket.round.css"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "match": "[*/]|(?<=\\s|^)[-+](?=\\s|$)",
              "name": "keyword.operator.arithmetic.css"
            },
            {
              "include": "#source-css-cfoutput-property-values"
            }
          ]
        },
        {
          "name": "meta.function.color.css",
          "begin": "(?i)(?<![\\w-])(rgba?|hsla?)(\\()",
          "beginCaptures": {
            "1": {
              "name": "support.function.misc.css"
            },
            "2": {
              "name": "punctuation.section.function.begin.bracket.round.css"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.function.end.bracket.round.css"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-css-cfoutput-property-values"
            }
          ]
        },
        {
          "name": "meta.function.gradient.css",
          "begin": "(?xi) (?<![\\w-])\n(\n  (?:-webkit-|-moz-|-o-)?    # Accept prefixed/historical variants\n  (?:repeating-)?            # \"Repeating\"-type gradient\n  (?:linear|radial|conic)    # Shape\n  -gradient\n)\n(\\()",
          "beginCaptures": {
            "1": {
              "name": "support.function.gradient.css"
            },
            "2": {
              "name": "punctuation.section.function.begin.bracket.round.css"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.function.end.bracket.round.css"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "match": "(?i)(?<![\\w-])(from|to|at)(?![\\w-])",
              "name": "keyword.operator.gradient.css"
            },
            {
              "include": "#source-css-cfoutput-property-values"
            }
          ]
        },
        {
          "name": "meta.function.gradient.invalid.deprecated.gradient.css",
          "begin": "(?i)(?<![\\w-])(-webkit-gradient)(\\()",
          "beginCaptures": {
            "1": {
              "name": "invalid.deprecated.gradient.function.css"
            },
            "2": {
              "name": "punctuation.section.function.begin.bracket.round.css"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.function.end.bracket.round.css"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "begin": "(?i)(?<![\\w-])(from|to|color-stop)(\\()",
              "beginCaptures": {
                "1": {
                  "name": "invalid.deprecated.function.css"
                },
                "2": {
                  "name": "punctuation.section.function.begin.bracket.round.css"
                }
              },
              "end": "\\)",
              "endCaptures": {
                "0": {
                  "name": "punctuation.section.function.end.bracket.round.css"
                }
              },
              "patterns": [
                {
                  "include": "#cfoutput-injection"
                },
                {
                  "include": "#source-css-cfoutput-property-values"
                }
              ]
            },
            {
              "include": "#source-css-cfoutput-property-values"
            }
          ]
        },
        {
          "name": "meta.function.misc.css",
          "begin": "(?xi) (?<![\\w-])\n(annotation|attr|blur|brightness|character-variant|contrast|counters?\n|cross-fade|drop-shadow|element|fit-content|format|grayscale|hue-rotate\n|image-set|invert|local|minmax|opacity|ornaments|repeat|saturate|sepia\n|styleset|stylistic|swash|symbols)\n(\\()",
          "beginCaptures": {
            "1": {
              "name": "support.function.misc.css"
            },
            "2": {
              "name": "punctuation.section.function.begin.bracket.round.css"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.function.end.bracket.round.css"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "name": "constant.numeric.other.density.css",
              "match": "(?i)(?<=[,\\s\"]|\\*/|^)\\d+x(?=[\\s,\"')]|/\\*|$)"
            },
            {
              "include": "#source-css-cfoutput-property-values"
            },
            {
              "name": "variable.parameter.misc.css",
              "match": "[^'\"),\\s]+"
            }
          ]
        },
        {
          "name": "meta.function.shape.css",
          "begin": "(?i)(?<![\\w-])(circle|ellipse|inset|polygon|rect)(\\()",
          "beginCaptures": {
            "1": {
              "name": "support.function.shape.css"
            },
            "2": {
              "name": "punctuation.section.function.begin.bracket.round.css"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.function.end.bracket.round.css"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "match": "(?i)(?<=\\s|^|\\*/)(at|round)(?=\\s|/\\*|$)",
              "name": "keyword.operator.shape.css"
            },
            {
              "include": "#source-css-cfoutput-property-values"
            }
          ]
        },
        {
          "name": "meta.function.timing-function.css",
          "begin": "(?i)(?<![\\w-])(cubic-bezier|steps)(\\()",
          "beginCaptures": {
            "1": {
              "name": "support.function.timing-function.css"
            },
            "2": {
              "name": "punctuation.section.function.begin.bracket.round.css"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.function.end.bracket.round.css"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "match": "(?i)(?<![\\w-])(start|end)(?=\\s*\\)|$)",
              "name": "support.constant.step-direction.css"
            },
            {
              "include": "#source-css-cfoutput-property-values"
            }
          ]
        },
        {
          "begin": "(?xi) (?<![\\w-])\n( (?:translate|scale|rotate)(?:[XYZ]|3D)?\n| matrix(?:3D)?\n| skew[XY]?\n| perspective\n)\n(\\()",
          "beginCaptures": {
            "1": {
              "name": "support.function.transform.css"
            },
            "2": {
              "name": "punctuation.section.function.begin.bracket.round.css"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.function.end.bracket.round.css"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-css-cfoutput-property-values"
            }
          ]
        },
        {
          "include": "#source-css-cfoutput-url"
        },
        {
          "name": "meta.function.variable.css",
          "begin": "(?i)(?<![\\w-])(var)(\\()",
          "beginCaptures": {
            "1": {
              "name": "support.function.misc.css"
            },
            "2": {
              "name": "punctuation.section.function.begin.bracket.round.css"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.function.end.bracket.round.css"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "name": "variable.argument.css",
              "match": "(?x)\n--\n(?:[-a-zA-Z_]    | [^\\x00-\\x7F])     # First letter\n(?:[-a-zA-Z0-9_] | [^\\x00-\\x7F]      # Remainder of identifier\n  |\\\\(?:[0-9a-fA-F]{1,6}|.)\n)*"
            },
            {
              "include": "#source-css-cfoutput-property-values"
            }
          ]
        }
      ]
    },
    "source-css-cfoutput-functional-pseudo-classes": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "begin": "(?i)((:)dir)(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.other.attribute-name.pseudo-class.css"
            },
            "2": {
              "name": "punctuation.definition.entity.css"
            },
            "3": {
              "name": "punctuation.section.function.begin.bracket.round.css"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.function.end.bracket.round.css"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-css-cfoutput-comment-block"
            },
            {
              "include": "#source-css-escapes"
            },
            {
              "name": "support.constant.text-direction.css",
              "match": "(?i)(?<![\\w-])(ltr|rtl)(?![\\w-])"
            },
            {
              "include": "#source-css-cfoutput-property-values"
            }
          ]
        },
        {
          "begin": "(?i)((:)lang)(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.other.attribute-name.pseudo-class.css"
            },
            "2": {
              "name": "punctuation.definition.entity.css"
            },
            "3": {
              "name": "punctuation.section.function.begin.bracket.round.css"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.function.end.bracket.round.css"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "name": "support.constant.language-range.css",
              "match": "(?<=[(,\\s])[a-zA-Z]+(-[a-zA-Z0-9]*|\\\\(?:[0-9a-fA-F]{1,6}|.))*(?=[),\\s])"
            },
            {
              "name": "string.quoted.double.css",
              "begin": "\"",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.string.begin.css"
                }
              },
              "end": "\"",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.string.end.css"
                }
              },
              "patterns": [
                {
                  "include": "#cfoutput-injection"
                },
                {
                  "include": "#source-css-escapes"
                },
                {
                  "name": "support.constant.language-range.css",
                  "match": "(?<=[\"\\s])[a-zA-Z*]+(-[a-zA-Z0-9*]*)*(?=[\"\\s])"
                }
              ]
            },
            {
              "name": "string.quoted.single.css",
              "begin": "'",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.string.begin.css"
                }
              },
              "end": "'",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.string.end.css"
                }
              },
              "patterns": [
                {
                  "include": "#cfoutput-injection"
                },
                {
                  "include": "#source-css-escapes"
                },
                {
                  "name": "support.constant.language-range.css",
                  "match": "(?<=['\\s])[a-zA-Z*]+(-[a-zA-Z0-9*]*)*(?=['\\s])"
                }
              ]
            },
            {
              "include": "#source-css-commas"
            }
          ]
        },
        {
          "begin": "(?i)((:)(?:not|has|matches))(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.other.attribute-name.pseudo-class.css"
            },
            "2": {
              "name": "punctuation.definition.entity.css"
            },
            "3": {
              "name": "punctuation.section.function.begin.bracket.round.css"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.function.end.bracket.round.css"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-css-cfoutput-selector-innards"
            }
          ]
        },
        {
          "begin": "(?i)((:)nth-(?:last-)?(?:child|of-type))(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.other.attribute-name.pseudo-class.css"
            },
            "2": {
              "name": "punctuation.definition.entity.css"
            },
            "3": {
              "name": "punctuation.section.function.begin.bracket.round.css"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.function.end.bracket.round.css"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "name": "constant.numeric.css",
              "match": "(?i)[+-]?(\\d+n?|n)(\\s*[+-]\\s*\\d+)?"
            },
            {
              "name": "support.constant.parity.css",
              "match": "(?i)even|odd"
            }
          ]
        }
      ]
    },
    "source-css-cfoutput-media-query-list": {
      "begin": "\\s*",
      "end": "(?=\\s*[{;])",
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-css-cfoutput-media-query"
        }
      ]
    },
    "source-css-cfoutput-media-query": {
      "begin": "\\G",
      "end": "(?=\\s*[{;])",
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-css-cfoutput-comment-block"
        },
        {
          "include": "#source-css-escapes"
        },
        {
          "include": "#source-css-media-types"
        },
        {
          "name": "keyword.operator.logical.$1.media.css",
          "match": "(?i)(?<=\\s|^|,|\\*/)(only|not)(?=\\s|{|/\\*|$)"
        },
        {
          "name": "keyword.operator.logical.and.media.css",
          "match": "(?i)(?<=\\s|^|\\*/|\\))and(?=\\s|/\\*|$)"
        },
        {
          "name": "invalid.illegal.comma.css",
          "match": ",(?:(?:\\s*,)+|(?=\\s*[;){]))"
        },
        {
          "include": "#source-css-commas"
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.parameters.begin.bracket.round.css"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.parameters.end.bracket.round.css"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-css-media-features"
            },
            {
              "include": "#source-css-media-feature-keywords"
            },
            {
              "name": "punctuation.separator.key-value.css",
              "match": ":"
            },
            {
              "name": "keyword.operator.comparison.css",
              "match": ">=|<=|=|<|>"
            },
            {
              "name": "meta.ratio.css",
              "match": "(\\d+)\\s*(/)\\s*(\\d+)",
              "captures": {
                "1": {
                  "name": "constant.numeric.css"
                },
                "2": {
                  "name": "keyword.operator.arithmetic.css"
                },
                "3": {
                  "name": "constant.numeric.css"
                }
              }
            },
            {
              "include": "#source-css-cfoutput-numeric-values"
            },
            {
              "include": "#source-css-cfoutput-comment-block"
            }
          ]
        }
      ]
    },
    "source-css-cfoutput-numeric-values": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "comment": "Escaped hashes should be punctuation.definition.constant.css",
          "name": "constant.other.color.rgb-value.hex.css",
          "match": "(?<=##)(?:[0-9a-fA-F]{3,4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})\\b"
        },
        {
          "captures": {
            "1": {
              "name": "keyword.other.unit.percentage.css"
            },
            "2": {
              "name": "keyword.other.unit.${2:/downcase}.css"
            }
          },
          "name": "constant.numeric.css",
          "match": "(?xi) (?<![\\w-])\n[-+]?                               # Sign indicator\n\n(?:                                 # Numerals\n    [0-9]+ (?:\\.[0-9]+)?           # Integer/float with leading digits\n  | \\.[0-9]+                       # Float without leading digits\n)\n\n(?:                                 # Scientific notation\n  (?<=[0-9])                        # Exponent must follow a digit\n  E                                 # Exponent indicator\n  [-+]?                             # Possible sign indicator\n  [0-9]+                            # Exponent value\n)?\n\n(?:                                 # Possible unit for data-type:\n  (%)                               # - Percentage\n  | ( deg|grad|rad|turn             # - Angle\n    | Hz|kHz                        # - Frequency\n    | ch|cm|em|ex|fr|in|mm|mozmm|   # - Length\n      pc|pt|px|q|rem|vh|vmax|vmin|\n      vw\n    | dpi|dpcm|dppx                 # - Resolution\n    | s|ms                          # - Time\n    )\n  \\b                               # Boundary checking intentionally lax to\n)?                                  # facilitate embedding in CSS-like grammars"
        }
      ]
    },
    "source-css-cfoutput-property-names": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "name": "support.type.property-name.css",
          "match": "(?xi) (?<![\\w-])\n(?:\n    # Standard CSS\n    additive-symbols|align-content|align-items|align-self|all|animation|animation-delay|animation-direction\n  | animation-duration|animation-fill-mode|animation-iteration-count|animation-name|animation-play-state\n  | animation-timing-function|backface-visibility|background|background-attachment|background-blend-mode\n  | background-clip|background-color|background-image|background-origin|background-position|background-position-[xy]\n  | background-repeat|background-size|block-size|border|border-block-end|border-block-end-color|border-block-end-style\n  | border-block-end-width|border-block-start|border-block-start-color|border-block-start-style\n  | border-block-start-width|border-bottom|border-bottom-color|border-bottom-left-radius|border-bottom-right-radius\n  | border-bottom-style|border-bottom-width|border-collapse|border-color|border-image|border-image-outset\n  | border-image-repeat|border-image-slice|border-image-source|border-image-width|border-inline-end\n  | border-inline-end-color|border-inline-end-style|border-inline-end-width|border-inline-start\n  | border-inline-start-color|border-inline-start-style|border-inline-start-width|border-left|border-left-color\n  | border-left-style|border-left-width|border-radius|border-right|border-right-color|border-right-style\n  | border-right-width|border-spacing|border-style|border-top|border-top-color|border-top-left-radius\n  | border-top-right-radius|border-top-style|border-top-width|border-width|bottom|box-decoration-break\n  | box-shadow|box-sizing|break-after|break-before|break-inside|caption-side|clear|clip|clip-path|color\n  | column-count|column-fill|column-gap|column-rule|column-rule-color|column-rule-style|column-rule-width\n  | column-span|column-width|columns|content|counter-increment|counter-reset|cursor|direction|display\n  | empty-cells|filter|flex|flex-basis|flex-direction|flex-flow|flex-grow|flex-shrink|flex-wrap|float\n  | font|font-display|font-family|font-feature-settings|font-kerning|font-language-override|font-size|font-size-adjust\n  | font-stretch|font-style|font-synthesis|font-variant|font-variant-alternates|font-variant-caps\n  | font-variant-east-asian|font-variant-ligatures|font-variant-numeric|font-variant-position|font-weight\n  | grid|grid-area|grid-auto-columns|grid-auto-flow|grid-auto-rows|grid-column|grid-column-end|grid-column-gap\n  | grid-column-start|grid-gap|grid-row|grid-row-end|grid-row-gap|grid-row-start|grid-template|grid-template-areas\n  | grid-template-columns|grid-template-rows|height|hyphens|image-orientation|image-rendering|image-resolution\n  | ime-mode|inline-size|isolation|justify-self|justify-items|justify-content|left|letter-spacing|line-break|line-height|list-style\n  | list-style-image|list-style-position|list-style-type|margin|margin-block-end|margin-block-start|margin-bottom\n  | margin-inline-end|margin-inline-start|margin-left|margin-right|margin-top|mask|mask-clip|mask-composite\n  | mask-image|mask-mode|mask-origin|mask-position|mask-repeat|mask-size|mask-type|max-block-size|max-height\n  | max-inline-size|max-width|max-zoom|min-block-size|min-height|min-inline-size|min-width|min-zoom|mix-blend-mode\n  | negative|object-fit|object-position|offset-block-end|offset-block-start|offset-inline-end|offset-inline-start\n  | opacity|order|orientation|orphans|outline|outline-color|outline-offset|outline-style|outline-width|overflow\n  | overflow-wrap|overflow-[xy]|pad|padding|padding-block-end|padding-block-start|padding-bottom|padding-inline-end\n  | padding-inline-start|padding-left|padding-right|padding-top|page-break-after|page-break-before|page-break-inside\n  | perspective|perspective-origin|pointer-events|position|prefix|quotes|range|resize|right|ruby-align|ruby-merge\n  | ruby-position|scroll-behavior|scroll-snap-coordinate|scroll-snap-destination|scroll-snap-type|shape-image-threshold\n  | shape-margin|shape-outside|speak-as|src|suffix|symbols|system|tab-size|table-layout|text-align|text-align-last\n  | text-combine-upright|text-decoration|text-decoration-color|text-decoration-line|text-decoration-style|text-emphasis\n  | text-emphasis-color|text-emphasis-position|text-emphasis-style|text-indent|text-orientation|text-overflow\n  | text-rendering|text-shadow|text-transform|text-underline-position|top|touch-action|transform|transform-box\n  | transform-origin|transform-style|transition|transition-delay|transition-duration|transition-property\n  | transition-timing-function|unicode-bidi|unicode-range|user-zoom|vertical-align|visibility|white-space|widows\n  | width|will-change|word-break|word-spacing|word-wrap|writing-mode|z-index|zoom\n\n  # SVG attributes\n  | alignment-baseline|baseline-shift|clip-rule|color-interpolation|color-interpolation-filters|color-profile\n  | color-rendering|cx|cy|dominant-baseline|enable-background|fill|fill-opacity|fill-rule|flood-color|flood-opacity\n  | glyph-orientation-horizontal|glyph-orientation-vertical|height|kerning|lighting-color|marker-end|marker-mid\n  | marker-start|r|rx|ry|shape-rendering|stop-color|stop-opacity|stroke|stroke-dasharray|stroke-dashoffset|stroke-linecap\n  | stroke-linejoin|stroke-miterlimit|stroke-opacity|stroke-width|text-anchor|width|x|y\n\n  # Not listed on MDN; presumably deprecated\n  | adjust|after|align|align-last|alignment|alignment-adjust|appearance|attachment|azimuth|background-break\n  | balance|baseline|before|bidi|binding|bookmark|bookmark-label|bookmark-level|bookmark-target|border-length\n  | bottom-color|bottom-left-radius|bottom-right-radius|bottom-style|bottom-width|box|box-align|box-direction\n  | box-flex|box-flex-group|box-lines|box-ordinal-group|box-orient|box-pack|break|character|collapse|column\n  | column-break-after|column-break-before|count|counter|crop|cue|cue-after|cue-before|decoration|decoration-break\n  | delay|display-model|display-role|down|drop|drop-initial-after-adjust|drop-initial-after-align|drop-initial-before-adjust\n  | drop-initial-before-align|drop-initial-size|drop-initial-value|duration|elevation|emphasis|family|fit|fit-position\n  | flex-group|float-offset|gap|grid-columns|grid-rows|hanging-punctuation|header|hyphenate|hyphenate-after|hyphenate-before\n  | hyphenate-character|hyphenate-lines|hyphenate-resource|icon|image|increment|indent|index|initial-after-adjust\n  | initial-after-align|initial-before-adjust|initial-before-align|initial-size|initial-value|inline-box-align|iteration-count\n  | justify|label|left-color|left-style|left-width|length|level|line|line-stacking|line-stacking-ruby|line-stacking-shift\n  | line-stacking-strategy|lines|list|mark|mark-after|mark-before|marks|marquee|marquee-direction|marquee-play-count|marquee-speed\n  | marquee-style|max|min|model|move-to|name|nav|nav-down|nav-index|nav-left|nav-right|nav-up|new|numeral|offset|ordinal-group\n  | orient|origin|overflow-style|overhang|pack|page|page-policy|pause|pause-after|pause-before|phonemes|pitch|pitch-range\n  | play-count|play-during|play-state|point|presentation|presentation-level|profile|property|punctuation|punctuation-trim\n  | radius|rate|rendering-intent|repeat|replace|reset|resolution|resource|respond-to|rest|rest-after|rest-before|richness\n  | right-color|right-style|right-width|role|rotation|rotation-point|rows|ruby|ruby-overhang|ruby-span|rule|rule-color\n  | rule-style|rule-width|shadow|size|size-adjust|sizing|space|space-collapse|spacing|span|speak|speak-header|speak-numeral\n  | speak-punctuation|speech|speech-rate|speed|stacking|stacking-ruby|stacking-shift|stacking-strategy|stress|stretch\n  | string-set|style|style-image|style-position|style-type|target|target-name|target-new|target-position|text|text-height\n  | text-justify|text-outline|text-replace|text-wrap|timing-function|top-color|top-left-radius|top-right-radius|top-style\n  | top-width|trim|unicode|up|user-select|variant|voice|voice-balance|voice-duration|voice-family|voice-pitch|voice-pitch-range\n  | voice-rate|voice-stress|voice-volume|volume|weight|white|white-space-collapse|word|wrap\n)\n(?![\\w-])"
        },
        {
          "name": "support.type.vendored.property-name.css",
          "match": "(?<![\\w-])(?i:-(?:ah|apple|atsc|epub|hp|khtml|moz|ms|o|rim|ro|tc|wap|webkit|xv)|(?:mso|prince))-[a-zA-Z-]+"
        }
      ]
    },
    "source-css-cfoutput-property-values": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-css-commas"
        },
        {
          "include": "#source-css-cfoutput-comment-block"
        },
        {
          "include": "#source-css-escapes"
        },
        {
          "include": "#source-css-cfoutput-functions"
        },
        {
          "include": "#source-css-property-keywords"
        },
        {
          "include": "#source-css-unicode-range"
        },
        {
          "include": "#source-css-cfoutput-numeric-values"
        },
        {
          "include": "#source-css-cfoutput-color-keywords"
        },
        {
          "include": "#source-css-cfoutput-string"
        },
        {
          "name": "keyword.other.important.css",
          "match": "!\\s*important(?![\\w-])"
        }
      ]
    },
    "source-css-cfoutput-rule-list": {
      "name": "meta.property-list.css",
      "begin": "{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.property-list.begin.bracket.curly.css"
        }
      },
      "end": "}",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.property-list.end.bracket.curly.css"
        }
      },
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-css-cfoutput-rule-list-innards"
        }
      ]
    },
    "source-css-cfoutput-rule-list-innards": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-css-cfoutput-comment-block"
        },
        {
          "include": "#source-css-escapes"
        },
        {
          "include": "#source-css-cfoutput-font-features"
        },
        {
          "name": "variable.css",
          "match": "(?x) (?<![\\w-])\n--\n(?:[-a-zA-Z_]    | [^\\x00-\\x7F])     # First letter\n(?:[-a-zA-Z0-9_] | [^\\x00-\\x7F]      # Remainder of identifier\n  |\\\\(?:[0-9a-fA-F]{1,6}|.)\n)*"
        },
        {
          "name": "meta.property-name.css",
          "begin": "(?<![-a-zA-Z])(?=[-a-zA-Z])",
          "end": "$|(?![-a-zA-Z])",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-css-cfoutput-property-names"
            }
          ]
        },
        {
          "begin": "(:)\\s*",
          "beginCaptures": {
            "1": {
              "name": "punctuation.separator.key-value.css"
            }
          },
          "contentName": "meta.property-value.css",
          "end": "\\s*(;)|\\s*(?=}|\\))",
          "endCaptures": {
            "1": {
              "name": "punctuation.terminator.rule.css"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-css-cfoutput-comment-block"
            },
            {
              "include": "#source-css-cfoutput-property-values"
            }
          ]
        },
        {
          "name": "punctuation.terminator.rule.css",
          "match": ";"
        }
      ]
    },
    "source-css-cfoutput-selector": {
      "name": "meta.selector.css",
      "begin": "(?x)\n(?=\n  (?:\\|)?                    # Possible anonymous namespace prefix\n  (?:\n    [-\\[:.*\\#a-zA-Z_]       # Valid selector character\n    |\n    [^\\x00-\\x7F]            # Which can include non-ASCII symbols\n    |\n    \\\\                      # Or an escape sequence\n    (?:[0-9a-fA-F]{1,6}|.)\n  )\n)",
      "end": "(?=\\s*[/@{)])",
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-css-cfoutput-selector-innards"
        }
      ]
    },
    "source-css-cfoutput-selector-innards": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#source-css-cfoutput-comment-block"
        },
        {
          "include": "#source-css-commas"
        },
        {
          "include": "#source-css-escapes"
        },
        {
          "include": "#source-css-combinators"
        },
        {
          "match": "(?x)\n(?:^|(?<=[\\s,(};]))         # Follows whitespace, comma, semicolon, or bracket\n(?!\n  [-\\w*]+\n  \\|\n  (?!\n      [-\\[:.*\\#a-zA-Z_]    # Make sure there's a selector to match\n    | [^\\x00-\\x7F]\n  )\n)\n(\n  (?: [-a-zA-Z_]    | [^\\x00-\\x7F] )   # First letter\n  (?: [-a-zA-Z0-9_] | [^\\x00-\\x7F]     # Remainder of identifier\n    | \\\\(?:[0-9a-fA-F]{1,6}|.)\n  )*\n  |\n  \\*     # Universal namespace\n)?\n(\\|)     # Namespace separator",
          "captures": {
            "1": {
              "name": "entity.other.namespace-prefix.css"
            },
            "2": {
              "name": "punctuation.separator.css"
            }
          }
        },
        {
          "include": "#source-css-tag-names"
        },
        {
          "name": "entity.name.tag.wildcard.css",
          "match": "\\*"
        },
        {
          "name": "invalid.illegal.bad-identifier.css",
          "match": "(?x) (?<![@\\w-])\n([.\\#])\n# Invalid identifier\n(\n  (?:\n    # Starts with ASCII digits, with possible hyphen preceding it\n    -?[0-9]\n    |\n    # Consists of a hyphen only\n    -                                      # Terminated by either:\n    (?= $                                  # - End-of-line\n      | [\\s,.\\#)\\[:{>+~|]               # - Followed by another selector\n      | /\\*                               # - Followed by a block comment\n    )\n    |\n    # Name contains unescaped ASCII symbol\n    (?:                                    # Check for acceptable preceding characters\n        [-a-zA-Z_0-9]|[^\\x00-\\x7F]       # - Valid selector character\n      | \\\\(?:[0-9a-fA-F]{1,6}|.)         # - Escape sequence\n    )*\n    (?:                                    # Invalid punctuation\n      [!\"'%&(*;<?@^`|\\]}]                 # - NOTE: We exempt `)` from the list of checked\n      |                                    #   symbols to avoid matching `:not(.invalid)`\n      / (?!\\*)                            # - Avoid invalidating the start of a comment\n    )+\n  )\n  # Mark remainder of selector invalid\n  (?: [-a-zA-Z_0-9]|[^\\x00-\\x7F]         # - Otherwise valid identifier characters\n    | \\\\(?:[0-9a-fA-F]{1,6}|.)           # - Escape sequence\n  )*\n)",
          "captures": {
            "1": {
              "name": "punctuation.definition.entity.css"
            },
            "2": {
              "patterns": [
                {
                  "include": "#cfoutput-injection"
                },
                {
                  "include": "#source-css-escapes"
                }
              ]
            }
          }
        },
        {
          "name": "entity.other.attribute-name.class.css",
          "match": "(?x)\n(\\.)                                  # Valid class-name\n(\n  (?: [-a-zA-Z_0-9]|[^\\x00-\\x7F]     # Valid identifier characters\n    | \\\\(?:[0-9a-fA-F]{1,6}|.)       # Escape sequence\n  )+\n)                                      # Followed by either:\n(?= $                                  # - End of the line\n  | [\\s,.\\#)\\[:{>+~|]               # - Another selector\n  | /\\*                               # - A block comment\n)",
          "captures": {
            "1": {
              "name": "punctuation.definition.entity.css"
            },
            "2": {
              "patterns": [
                {
                  "include": "#cfoutput-injection"
                },
                {
                  "include": "#source-css-escapes"
                }
              ]
            }
          }
        },
        {
          "name": "entity.other.attribute-name.id.css",
          "match": "(?x)\n(?<=\\#\\#)\n(\n  -?\n  (?![0-9])\n  (?:[-a-zA-Z0-9_]|[^\\x00-\\x7F]|\\\\(?:[0-9a-fA-F]{1,6}|.))+\n)\n(?=$|[\\s,.\\#)\\[:{>+~|]|/\\*)",
          "captures": {
            "comment": "Escaped hashes would resolve to punctuation.definition.entity.css",
            "1": {
              "patterns": [
                {
                  "include": "#cfoutput-injection"
                },
                {
                  "include": "#source-css-escapes"
                }
              ]
            }
          }
        },
        {
          "name": "meta.attribute-selector.css",
          "begin": "\\[",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.entity.begin.bracket.square.css"
            }
          },
          "end": "\\]",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.entity.end.bracket.square.css"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-css-cfoutput-comment-block"
            },
            {
              "include": "#source-css-cfoutput-string"
            },
            {
              "match": "(?<=[\"'\\s]|^|\\*/)\\s*([iI])\\s*(?=[\\s\\]]|/\\*|$)",
              "captures": {
                "1": {
                  "name": "storage.modifier.ignore-case.css"
                }
              }
            },
            {
              "match": "(?x)(?<==)\\s*((?!/\\*)(?:[^\\\\\"'\\s\\]]|\\\\.)+)",
              "captures": {
                "1": {
                  "name": "string.unquoted.attribute-value.css",
                  "patterns": [
                    {
                      "include": "#cfoutput-injection"
                    },
                    {
                      "include": "#source-css-escapes"
                    }
                  ]
                }
              }
            },
            {
              "include": "#source-css-escapes"
            },
            {
              "name": "keyword.operator.pattern.css",
              "match": "[~|^$*]?="
            },
            {
              "name": "punctuation.separator.css",
              "match": "\\|"
            },
            {
              "match": "(?x)\n# Qualified namespace prefix\n( -?(?!\\d)(?:[\\w-]|[^\\x00-\\x7F]|\\\\(?:[0-9a-fA-F]{1,6}|.))+\n| \\*\n)\n# Lookahead to ensure there's a valid identifier ahead\n(?=\n  \\| (?!\\s|=|$|\\])\n  (?: -?(?!\\d)\n   |   [\\\\\\w-]\n   |   [^\\x00-\\x7F]\n   )\n)",
              "captures": {
                "1": {
                  "name": "entity.other.namespace-prefix.css",
                  "patterns": [
                    {
                      "include": "#cfoutput-injection"
                    },
                    {
                      "include": "#source-css-escapes"
                    }
                  ]
                }
              }
            },
            {
              "match": "(?x)\n(-?(?!\\d)(?>[\\w-]|[^\\x00-\\x7F]|\\\\(?:[0-9a-fA-F]{1,6}|.))+)\n\\s*\n(?=[~|^\\]$*=]|/\\*)",
              "captures": {
                "1": {
                  "name": "entity.other.attribute-name.css",
                  "patterns": [
                    {
                      "include": "#cfoutput-injection"
                    },
                    {
                      "include": "#source-css-escapes"
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "include": "#source-css-pseudo-classes"
        },
        {
          "include": "#source-css-pseudo-elements"
        },
        {
          "include": "#source-css-cfoutput-functional-pseudo-classes"
        },
        {
          "name": "entity.name.tag.custom.css",
          "match": "(?x) (?<![@\\w-])\n(?=            # Custom element names must:\n  [a-z]        # - start with a lowercase ASCII letter,\n  \\w* -       # - contain at least one dash\n)\n(?:\n  (?![A-Z])    # No uppercase ASCII letters are allowed\n  [\\w-]       # Allow any other word character or dash\n)+\n(?![(\\w-])"
        }
      ]
    },
    "source-css-cfoutput-string": {
      "patterns": [
        {
          "name": "string.quoted.double.css",
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.css"
            }
          },
          "end": "\"|(?<!\\\\)(?=$|\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.css"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "name": "invalid.illegal.unclosed.string.css",
              "begin": "(?:\\G|^)(?=(?:[^\\\\\"]|\\\\.)+$)",
              "end": "$",
              "patterns": [
                {
                  "include": "#cfoutput-injection"
                },
                {
                  "include": "#source-css-escapes"
                }
              ]
            },
            {
              "include": "#source-css-escapes"
            }
          ]
        },
        {
          "name": "string.quoted.single.css",
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.css"
            }
          },
          "end": "'|(?<!\\\\)(?=$|\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.css"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "name": "invalid.illegal.unclosed.string.css",
              "begin": "(?:\\G|^)(?=(?:[^\\\\']|\\\\.)+$)",
              "end": "$",
              "patterns": [
                {
                  "include": "#cfoutput-injection"
                },
                {
                  "include": "#source-css-escapes"
                }
              ]
            },
            {
              "include": "#source-css-escapes"
            }
          ]
        }
      ]
    },
    "source-css-cfoutput-url": {
      "name": "meta.function.url.css",
      "begin": "(?i)(?<![\\w@-])(url)(\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.url.css"
        },
        "2": {
          "name": "punctuation.section.function.begin.bracket.round.css"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.function.end.bracket.round.css"
        }
      },
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "name": "variable.parameter.url.css",
          "match": "[^'\")\\s]+"
        },
        {
          "include": "#source-css-cfoutput-string"
        },
        {
          "include": "#source-css-cfoutput-comment-block"
        },
        {
          "include": "#source-css-escapes"
        }
      ]
    },
    "text-html-cfml-cfoutput-character-reference": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "name": "constant.character.character-reference.html",
          "begin": "&(?=([a-zA-Z0-9]+|##\\d+|##[xX][0-9a-fA-F]+);)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.character-reference.begin.html"
            }
          },
          "end": ";",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.character-reference.end.html"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "name": "entity.name.character-reference.numeric.html",
              "match": "(?<=##)(\\d+|[xX][0-9a-fA-F]+)"
            },
            {
              "name": "entity.name.character-reference.name.html",
              "match": "[a-zA-Z0-9]+"
            }
          ]
        },
        {
          "name": "invalid.illegal.bad-ampersand.html",
          "match": "&"
        }
      ]
    },
    "source-cfml-script-component": {
      "patterns": [
        {
          "begin": "(?i)^(?=\\s*(?:(abstract|final)\\s+)?(component)\\b)",
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "meta.class.body.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "meta.class.declaration.cfml",
              "begin": "\\b(?:(abstract|final)\\s+)?(component)\\b",
              "beginCaptures": {
                "1": {
                  "name": "storage.modifier.cfml"
                },
                "2": {
                  "name": "storage.type.class.cfml"
                }
              },
              "end": "(?=\\{)",
              "patterns": [
                {
                  "include": "#source-cfml-script-comments"
                },
                {
                  "include": "#source-cfml-script-component-attributes"
                }
              ]
            },
            {
              "name": "meta.class.body.cfml",
              "begin": "\\{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.block.begin.cfml"
                }
              },
              "end": "(?=})",
              "patterns": [
                {
                  "include": "#source-cfml-script-statements"
                }
              ]
            }
          ]
        },
        {
          "begin": "(?i)^(?=\\s*(interface)\\b)",
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "meta.interface.body.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "meta.interface.declaration.cfml",
              "begin": "\\b(interface)\\b",
              "beginCaptures": {
                "1": {
                  "name": "storage.type.interface.cfml"
                }
              },
              "end": "(?=\\{)",
              "patterns": [
                {
                  "include": "#source-cfml-script-comments"
                },
                {
                  "include": "#source-cfml-script-component-attributes"
                }
              ]
            },
            {
              "name": "meta.interface.body.cfml",
              "begin": "\\{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.block.begin.cfml"
                }
              },
              "end": "(?=})",
              "patterns": [
                {
                  "include": "#source-cfml-script-statements"
                }
              ]
            }
          ]
        }
      ]
    },
    "source-cfml-extends": {
      "name": "meta.class.inheritance.cfml",
      "begin": "(?i)\\b(extends|implements)\\s*(=)\\s*",
      "beginCaptures": {
        "1": {
          "name": "entity.other.attribute-name.cfml storage.modifier.$1.cfml"
        },
        "2": {
          "name": "punctuation.separator.key-value.cfml"
        }
      },
      "end": "(?<=[^\\s=])|(?=[</>{;])",
      "patterns": [
        {
          "name": "string.quoted.double.cfml",
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.cfml"
            }
          },
          "end": "(\")(?!\")",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.cfml"
            }
          },
          "patterns": [
            {
              "match": "[\\w$:.]+",
              "captures": {
                "0": {
                  "name": "entity.other.inherited-class.cfml"
                }
              }
            }
          ]
        },
        {
          "name": "string.quoted.single.cfml",
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.cfml"
            }
          },
          "end": "(')(?!')",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.cfml"
            }
          },
          "patterns": [
            {
              "match": "[\\w$:.]+",
              "captures": {
                "0": {
                  "name": "entity.other.inherited-class.cfml"
                }
              }
            }
          ]
        },
        {
          "match": "([\\w$:.]+)|(?=[^\\w$:.])",
          "captures": {
            "1": {
              "name": "string.unquoted.cfml entity.other.inherited-class.cfml"
            }
          }
        }
      ]
    },
    "text-html-cfml-tag-generic-attribute": {
      "name": "entity.other.attribute-name.html",
      "match": "(?<=[^=])\\b([a-zA-Z0-9:-]+)"
    },
    "text-html-cfml-unquoted-attribute": {
      "patterns": [
        {
          "include": "#text-html-cfml-character-reference"
        },
        {
          "name": "string.unquoted.html",
          "match": "(?<==)(?:[^\\s<>/'\"]|/(?!>))+"
        }
      ]
    },
    "cfml-tags": {
      "patterns": [
        {
          "include": "#source-cfml-tag-comments"
        },
        {
          "include": "#cffunction"
        },
        {
          "include": "#cfoutput"
        },
        {
          "include": "#cfmail"
        },
        {
          "include": "#cfquery"
        },
        {
          "include": "#cfif"
        },
        {
          "include": "#tags-with-script"
        },
        {
          "include": "#cfscript"
        },
        {
          "include": "#cfproperty"
        },
        {
          "include": "#cfargument"
        },
        {
          "include": "#custom-tags"
        },
        {
          "include": "#extension-tags"
        },
        {
          "name": "meta.tag.cfml",
          "begin": "(?i)(<)(cf(?:applet|calendar|graph|graphdata|mediaplayer|menu|servlet|servletparam|sprydataset|table|textinput|tree))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.cfml"
            },
            "2": {
              "name": "entity.name.tag.cfml invalid.deprecated.tag.cfml"
            }
          },
          "end": "(/?>)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#tag-generic-attribute"
            }
          ]
        },
        {
          "name": "meta.tag.cfml",
          "begin": "(?i)(<)(cf[a-z_]+)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.cfml"
            },
            "2": {
              "name": "entity.name.tag.cfml"
            }
          },
          "end": "(/?>)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#tag-generic-attribute"
            }
          ]
        },
        {
          "name": "meta.tag.cfml",
          "match": "(?i)(</)(cf(?:applet|calendar|graph|graphdata|mediaplayer|menu|servlet|servletparam|sprydataset|table|textinput|tree))(>)",
          "captures": {
            "1": {
              "name": "punctuation.definition.tag.begin.cfml"
            },
            "2": {
              "name": "entity.name.tag.cfml invalid.deprecated.tag.cfml"
            },
            "3": {
              "name": "punctuation.definition.tag.end.cfml"
            }
          }
        },
        {
          "name": "meta.tag.cfml",
          "match": "(?i)(</)(cf[a-z_]+)(>)",
          "captures": {
            "1": {
              "name": "punctuation.definition.tag.begin.cfml"
            },
            "2": {
              "name": "entity.name.tag.cfml"
            },
            "3": {
              "name": "punctuation.definition.tag.end.cfml"
            }
          }
        }
      ]
    },
    "source-cfml-script-static": {
      "name": "meta.block.static.cfml",
      "begin": "\\bstatic\\b(?=\\s*[\\n\\{])",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.static.cfml"
        }
      },
      "end": "(?:(\\})|(?=[^\\{\\}\\s]))",
      "endCaptures": {
        "1": {
          "name": "meta.block.static.cfml punctuation.definition.block.end.cfml"
        }
      },
      "patterns": [
        {
          "include": "#source-cfml-script-block-scope"
        }
      ]
    },
    "cfoutput-injection": {
      "patterns": [
        {
          "name": "constant.character.escape.hash.cfml",
          "match": "##"
        },
        {
          "begin": "#",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.template-expression.begin.cfml"
            }
          },
          "contentName": "meta.embedded.line.cfml source.cfml.script",
          "end": "#",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.template-expression.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script"
            }
          ]
        },
        {
          "include": "#cfml-tags"
        }
      ]
    },
    "source-cfml-script-constants": {
      "patterns": [
        {
          "name": "constant.language.boolean.true.cfml",
          "match": "\\b(?i:true)\\b"
        },
        {
          "name": "constant.language.boolean.false.cfml",
          "match": "\\b(?i:false)\\b"
        },
        {
          "name": "constant.language.null.cfml",
          "match": "\\b(?i:null)\\b"
        }
      ]
    },
    "source-cfml-script-cfml-scopes": {
      "patterns": [
        {
          "name": "variable.language.super.cfml",
          "match": "\\b(?i:super)\\b"
        },
        {
          "name": "variable.language.scope.cfml",
          "match": "\\b(?i:thread)\\b(?=[\\[.])"
        },
        {
          "name": "variable.language.scope.cfml",
          "match": "(?x)\n  \\b(?i:(\n  application|arguments|attributes|caller|cgi|client|cookie|flash|form|\n  local|request|server|session|this|thistag|url|variables|self|static\n))\\b"
        }
      ]
    },
    "source-cfml-script": {
      "patterns": [
        {
          "include": "#source-cfml-script-main"
        }
      ]
    },
    "source-cfml-script-expressions": {
      "patterns": [
        {
          "include": "#source-cfml-script-comments"
        },
        {
          "include": "#source-cfml-script-string"
        },
        {
          "include": "#source-cfml-script-constructor"
        },
        {
          "include": "#source-cfml-script-operators"
        },
        {
          "include": "#source-cfml-script-keywords"
        },
        {
          "include": "#source-cfml-script-constants"
        },
        {
          "include": "#source-cfml-script-named-function"
        },
        {
          "include": "#source-cfml-script-anonymous-function"
        },
        {
          "include": "#source-cfml-script-struct-literal"
        },
        {
          "include": "#source-cfml-script-brackets"
        },
        {
          "include": "#source-cfml-script-number"
        },
        {
          "include": "#source-cfml-script-call"
        },
        {
          "include": "#source-cfml-script-variable"
        },
        {
          "include": "#source-cfml-script-punctuation"
        }
      ]
    },
    "text-html-cfml-string-single-quoted": {
      "name": "string.quoted.single.html",
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.html"
        }
      },
      "end": "'",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.html"
        }
      },
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "include": "#text-html-cfml-character-reference"
        }
      ]
    },
    "text-html-cfml-cfoutput-tag-id-attribute": {
      "name": "meta.attribute-with-value.id.html",
      "begin": "(?i)\\b(id)\\s*(=)",
      "beginCaptures": {
        "1": {
          "name": "entity.other.attribute-name.id.html"
        },
        "2": {
          "name": "punctuation.separator.key-value.html"
        }
      },
      "end": "(?!\\G)(?<='|\"|[^\\s<>/])",
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "name": "string.quoted.double.html",
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.html"
            }
          },
          "contentName": "meta.toc-list.id.html",
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.html"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#text-html-cfml-cfoutput-character-reference"
            }
          ]
        },
        {
          "name": "string.quoted.single.html",
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.html"
            }
          },
          "contentName": "meta.toc-list.id.html",
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.html"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#text-html-cfml-cfoutput-character-reference"
            }
          ]
        }
      ]
    },
    "text-html-cfml-cfoutput-tag-style-attribute": {
      "name": "meta.attribute-with-value.style.html",
      "begin": "(?i)\\b(style)\\s*(=)",
      "beginCaptures": {
        "1": {
          "name": "entity.other.attribute-name.style.html"
        },
        "2": {
          "name": "punctuation.separator.key-value.html"
        }
      },
      "end": "(?!\\G)|(?=\\s|/?>)",
      "patterns": [
        {
          "name": "string.quoted.double.html",
          "match": "(\")([^\"]*)(\")",
          "captures": {
            "1": {
              "name": "punctuation.definition.string.begin.html"
            },
            "2": {
              "name": "source.css.style.html",
              "patterns": [
                {
                  "name": "meta.property-list.css",
                  "match": ".+",
                  "captures": {
                    "0": {
                      "patterns": [
                        {
                          "include": "#cfoutput-injection"
                        },
                        {
                          "include": "#text-html-cfml-cfoutput-character-reference"
                        },
                        {
                          "include": "#source-css-cfoutput-rule-list-innards"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "3": {
              "name": "punctuation.definition.string.end.html"
            }
          }
        },
        {
          "name": "string.quoted.single.html",
          "match": "(')([^']*)(')",
          "captures": {
            "1": {
              "name": "punctuation.definition.string.begin.html"
            },
            "2": {
              "name": "source.css.style.html",
              "patterns": [
                {
                  "name": "meta.property-list.css",
                  "match": ".+",
                  "captures": {
                    "0": {
                      "patterns": [
                        {
                          "include": "#cfoutput-injection"
                        },
                        {
                          "include": "#text-html-cfml-cfoutput-character-reference"
                        },
                        {
                          "include": "#source-css-cfoutput-rule-list-innards"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "3": {
              "name": "punctuation.definition.string.end.html"
            }
          }
        },
        {
          "name": "string.unquoted.html",
          "match": "([^\\s&>\"'<=`]|&(?=>))+",
          "captures": {
            "0": {
              "name": "source.css.style.html",
              "patterns": [
                {
                  "match": ".+",
                  "name": "meta.property-list.css",
                  "captures": {
                    "0": {
                      "patterns": [
                        {
                          "include": "#cfoutput-injection"
                        },
                        {
                          "include": "#source-css-cfoutput-rule-list-innards"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "source-cfml-script-tag-generic-attribute-script": {
      "patterns": [
        {
          "name": "meta.tag.script.cfml entity.other.attribute-name.cfml",
          "match": "\\b[a-zA-Z_][\\w:-]*\\b"
        },
        {
          "name": "meta.tag.script.cfml",
          "begin": "(=|:)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.separator.key-value.cfml"
            }
          },
          "end": "(?=\\s*\\b([a-zA-Z_][\\w:-]*)\\s*(=|:))|(?=[;\\{])",
          "patterns": [
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        },
        {
          "name": "invalid.illegal.attribute-name.cfml",
          "match": "\\S+"
        }
      ]
    },
    "source-cfml-script-constructor": {
      "name": "meta.instance.constructor.cfml",
      "begin": "(?i)\\b(new)\\s+",
      "beginCaptures": {
        "1": {
          "name": "keyword.operator.new.cfml"
        }
      },
      "end": "(\\))|(?=[^_$\\w.\\(\\)])",
      "endCaptures": {
        "1": {
          "name": "meta.function-call.parameters.method.cfml punctuation.definition.arguments.end.cfml"
        }
      },
      "patterns": [
        {
          "name": "entity.name.class.cfml",
          "match": "\\b[_$a-zA-Z][$\\w\\.]*"
        },
        {
          "name": "meta.function-call.parameters.method.cfml",
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.arguments.begin.cfml"
            }
          },
          "end": "(?=\\))",
          "patterns": [
            {
              "name": "punctuation.separator.function-call.method.cfml",
              "match": ","
            },
            {
              "begin": "\\b(?i:(argumentCollection)|([_$a-zA-Z][$\\w]*))\\s*(=)(?!=)",
              "beginCaptures": {
                "1": {
                  "name": "entity.other.argumentCollection.cfml"
                },
                "2": {
                  "name": "entity.other.parameter-name.cfml"
                },
                "3": {
                  "name": "keyword.operator.assignment.cfml"
                }
              },
              "end": "(?=[,\\)])",
              "patterns": [
                {
                  "include": "#source-cfml-script-expressions"
                }
              ]
            },
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        }
      ]
    },
    "source-cfml-script-tag-string-quoted-single": {
      "name": "string.quoted.single.cfml",
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.cfml"
        }
      },
      "end": "'(?!')",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.cfml"
        }
      },
      "patterns": [
        {
          "name": "constant.character.escape.quote.cfml",
          "match": "''"
        },
        {
          "include": "#source-cfml-script-hash-delimiters"
        }
      ]
    },
    "cfscript": {
      "begin": "(?i)(<)(cfscript)(\\s+|>)",
      "beginCaptures": {
        "0": {
          "name": "meta.tag.cfml"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.cfml"
        },
        "2": {
          "name": "entity.name.tag.cfml"
        },
        "3": {
          "name": "punctuation.definition.tag.end.cfml"
        }
      },
      "contentName": "source.cfml.script",
      "end": "(?i)(</)(cfscript)(>)",
      "endCaptures": {
        "0": {
          "name": "meta.tag.cfml"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.cfml"
        },
        "2": {
          "name": "entity.name.tag.cfml"
        },
        "3": {
          "name": "punctuation.definition.tag.end.cfml"
        }
      },
      "patterns": [
        {
          "include": "#source-cfml-tag-comments"
        },
        {
          "include": "#source-cfml-script"
        }
      ]
    },
    "source-cfml-string": {
      "patterns": [
        {
          "include": "#source-cfml-string-quoted-single"
        },
        {
          "include": "#source-cfml-string-quoted-double"
        }
      ]
    },
    "source-cfml-script-operators": {
      "patterns": [
        {
          "name": "keyword.operator.logical.cfml",
          "match": "!(?!=)"
        },
        {
          "name": "keyword.operator.decrement.cfml",
          "match": "--"
        },
        {
          "name": "keyword.operator.increment.cfml",
          "match": "\\+\\+"
        },
        {
          "name": "keyword.operator.new.cfml",
          "match": "\\b(?i:new)\\b"
        },
        {
          "begin": "\\b(?i:in)\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.expression.in.cfml"
            }
          },
          "end": "(?<=\\})|(?=[^\\s\\{])",
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal"
            }
          ]
        },
        {
          "begin": "&&|\\|\\|",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.logical.cfml"
            }
          },
          "end": "(?<=\\})|(?=[^\\s\\{])",
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal"
            }
          ]
        },
        {
          "begin": "\\b(?i:(not|and|or|xor|eqv|imp))\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.logical.cfml"
            }
          },
          "end": "(?<=\\})|(?=[^\\s\\{])",
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal"
            }
          ]
        },
        {
          "begin": "=(?!=)",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.assignment.cfml"
            }
          },
          "end": "(?<=\\})|(?=[^\\s\\{])",
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal"
            }
          ]
        },
        {
          "begin": "\\b(?i:(greater|less|than|equal\\s+to|does|contains|ct|nct|equal|eq|neq|lt|lte|le|gt|gte|ge|is))\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.decision.cfml"
            }
          },
          "end": "(?<=\\})|(?=[^\\s\\{])",
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal"
            }
          ]
        },
        {
          "begin": "%=|&=|\\*=|\\+=|-=|/=",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.assignment.compound.cfml"
            }
          },
          "end": "(?<=\\})|(?=[^\\s\\{])",
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal"
            }
          ]
        },
        {
          "begin": "&",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.concat.cfml"
            }
          },
          "end": "(?<=\\})|(?=[^\\s\\{])",
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal"
            }
          ]
        },
        {
          "begin": "<=|>=|<|>",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.relational.cfml"
            }
          },
          "end": "(?<=\\})|(?=[^\\s\\{])",
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal"
            }
          ]
        },
        {
          "begin": "==|!=",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.comparison.cfml"
            }
          },
          "end": "(?<=\\})|(?=[^\\s\\{])",
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal"
            }
          ]
        },
        {
          "begin": "/|%|\\*|\\+|-|\\b(?i:mod)\\b|\\^|\\\\",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.arithmetic.cfml"
            }
          },
          "end": "(?<=\\})|(?=[^\\s\\{])",
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal"
            }
          ]
        },
        {
          "begin": "\\?:(?!:)",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.elvis.cfml"
            }
          },
          "end": "(?<=\\})|(?=[^\\s\\{])",
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal"
            }
          ]
        },
        {
          "begin": "\\?(?!\\.)|:(?!:)",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.ternary.cfml"
            }
          },
          "end": "(?<=\\})|(?=[^\\s\\{])",
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal"
            }
          ]
        }
      ]
    },
    "cfinterface": {
      "begin": "(?i)(?=<cfinterface)",
      "end": "(?i)(</)(cfinterface)(>)",
      "endCaptures": {
        "0": {
          "name": "meta.tag.cfml"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.cfml"
        },
        "2": {
          "name": "entity.name.tag.cfml storage.type.interface.cfml"
        },
        "3": {
          "name": "punctuation.definition.tag.end.cfml"
        }
      },
      "patterns": [
        {
          "name": "meta.tag.cfml meta.interface.cfml",
          "begin": "(?i)(<)(cfinterface)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.cfml"
            },
            "2": {
              "name": "entity.name.tag.cfml storage.type.interface.cfml"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-extends"
            },
            {
              "include": "#tag-generic-attribute"
            }
          ]
        },
        {
          "include": "#cfml-tags"
        }
      ]
    },
    "source-cfml-string-quoted-single": {
      "name": "string.quoted.single.cfml",
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.cfml"
        }
      },
      "end": "'(?!')",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.cfml"
        }
      },
      "patterns": [
        {
          "include": "#hash-delimiters"
        },
        {
          "name": "constant.character.escape.quote.cfml",
          "match": "''"
        }
      ]
    },
    "source-cfml-tag-comments": {
      "patterns": [
        {
          "name": "comment.block.cfml",
          "begin": "<!---",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.cfml"
            }
          },
          "end": "--->",
          "patterns": [
            {
              "include": "#source-cfml-tag-comments"
            }
          ]
        }
      ]
    },
    "cfoutput": {
      "begin": "(?i)(?=<cfoutput\\b)",
      "end": "(?i)(</)(cfoutput)(>)",
      "endCaptures": {
        "0": {
          "name": "meta.tag.cfml"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.cfml"
        },
        "2": {
          "name": "entity.name.tag.cfml"
        },
        "3": {
          "name": "punctuation.definition.tag.end.cfml"
        }
      },
      "patterns": [
        {
          "name": "meta.tag.cfml",
          "begin": "(?i)(<)(cfoutput)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.cfml"
            },
            "2": {
              "name": "entity.name.tag.cfml"
            }
          },
          "end": "(?=>)",
          "patterns": [
            {
              "include": "#tag-generic-attribute"
            }
          ]
        },
        {
          "begin": ">",
          "beginCaptures": {
            "0": {
              "name": "meta.tag.cfml punctuation.definition.tag.end.cfml"
            }
          },
          "contentName": "meta.scope.cfoutput.cfml",
          "end": "(?i)(?=</cfoutput>)",
          "patterns": [
            {
              "include": "#cfml-tags"
            },
            {
              "include": "#text-html-cfml-cfoutput"
            }
          ]
        }
      ]
    },
    "cfmail": {
      "begin": "(?i)(?=<cfmail\\b)",
      "end": "(?i)(</)(cfmail)(>)",
      "endCaptures": {
        "0": {
          "name": "meta.tag.cfml"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.cfml"
        },
        "2": {
          "name": "entity.name.tag.cfml"
        },
        "3": {
          "name": "punctuation.definition.tag.end.cfml"
        }
      },
      "patterns": [
        {
          "name": "meta.tag.cfml",
          "begin": "(?i)(<)(cfmail)\\b",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.cfml"
            },
            "2": {
              "name": "entity.name.tag.cfml"
            }
          },
          "end": "(?=>)",
          "patterns": [
            {
              "include": "#tag-generic-attribute"
            }
          ]
        },
        {
          "begin": ">",
          "beginCaptures": {
            "0": {
              "name": "meta.tag.cfml punctuation.definition.tag.end.cfml"
            }
          },
          "contentName": "meta.scope.cfmail.cfml",
          "end": "(?i)(?=</cfmail>)",
          "patterns": [
            {
              "include": "#cfml-tags"
            },
            {
              "include": "#text-html-cfml-cfoutput"
            }
          ]
        }
      ]
    },
    "text-html-cfml-cfoutput-string-single-quoted": {
      "name": "string.quoted.single.html",
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.html"
        }
      },
      "end": "'",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.html"
        }
      },
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#text-html-cfml-cfoutput-character-reference"
        }
      ]
    },
    "source-cfml-script-static-method-call": {
      "patterns": [
        {
          "name": "meta.function-call.method.static.cfml",
          "begin": "([_$a-zA-Z][$\\w]*)\\s*(?=\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.static.cfml"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.function-call.parameters.method.cfml punctuation.definition.arguments.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-method-call-params"
            }
          ]
        }
      ]
    },
    "source-cfml-script-keywords-top-level": {
      "patterns": [
        {
          "name": "meta.import.cfml",
          "begin": "(?i)\\bimport\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.import.cfml"
            }
          },
          "end": "(?=\\n|;)",
          "patterns": [
            {
              "include": "#source-cfml-script-string"
            },
            {
              "name": "variable.other.readwrite.alias.cfml",
              "match": "[_$a-zA-Z][$\\w]*"
            },
            {
              "name": "constant.language.import-all.cfml",
              "match": "\\*"
            }
          ]
        }
      ]
    },
    "source-cfml-script-sql-string": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "string.quoted.double.cfml punctuation.definition.string.begin.cfml"
            }
          },
          "contentName": "meta.string.quoted.double.cfml meta.embedded.block.sql source.sql",
          "end": "(\")(?!\")",
          "endCaptures": {
            "1": {
              "name": "string.quoted.double.cfml punctuation.definition.string.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "constant.character.escape.quote.cfml",
              "match": "\"\""
            },
            {
              "include": "#source-cfml-sql-string-double-quoted"
            }
          ]
        },
        {
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "string.quoted.single.cfml punctuation.definition.string.begin.cfml"
            }
          },
          "contentName": "meta.string.quoted.single.cfml meta.embedded.block.sql source.sql",
          "end": "(')(?!')",
          "endCaptures": {
            "1": {
              "name": "string.quoted.single.cfml punctuation.definition.string.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "constant.character.escape.quote.cfml",
              "match": "''"
            },
            {
              "include": "#source-cfml-sql-string-single-quoted"
            }
          ]
        }
      ]
    },
    "source-cfml-sql-string-double-quoted": {
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "name": "comment.line.double-dash.sql",
          "match": "(--)((\"\")|[^\"])*(?=\"|$)",
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.sql"
            },
            "3": {
              "name": "constant.character.escape.quote.cfml"
            }
          }
        },
        {
          "name": "comment.block.sql",
          "begin": "/\\*",
          "end": "\\*/|(?=\"(?!\"))",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.sql"
            }
          },
          "patterns": [
            {
              "name": "constant.character.escape.quote.cfml",
              "match": "\"\""
            }
          ]
        },
        {
          "match": "'(?=((\\\\')|[^'\"])*(\"|$))",
          "name": "string.quoted.single.unclosed.sql"
        },
        {
          "match": "`(?=((\\\\`)|[^`\"])*(\"|$))",
          "name": "string.quoted.other.backtick.unclosed.sql"
        },
        {
          "include": "#source-sql"
        },
        {
          "name": "variable.parameter.query.named.cfml",
          "match": "(:)([_$a-zA-Z][$\\w]*)",
          "captures": {
            "1": {
              "name": "punctuation.definition.variable.cfml"
            }
          }
        },
        {
          "name": "variable.parameter.query.positional.cfml punctuation.definition.variable.cfml",
          "match": "\\?"
        }
      ]
    },
    "source-cfml-sql-string-single-quoted": {
      "patterns": [
        {
          "name": "comment.line.double-dash.sql",
          "match": "(--)(('')|[^'])*(?='|$)",
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.sql"
            },
            "3": {
              "name": "constant.character.escape.quote.cfml"
            }
          }
        },
        {
          "name": "comment.block.sql",
          "begin": "/\\*",
          "end": "\\*/|(?='(?!'))",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.sql"
            }
          },
          "patterns": [
            {
              "name": "constant.character.escape.quote.cfml",
              "match": "''"
            }
          ]
        },
        {
          "name": "string.quoted.single.sql",
          "begin": "''",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.sql constant.character.escape.quote.cfml"
            }
          },
          "end": "''",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.sql constant.character.escape.quote.cfml"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#source-sql-string_escape"
            }
          ]
        },
        {
          "match": "`(?=((\\\\`)|[^`'])*('|$))",
          "name": "string.quoted.other.backtick.unclosed.sql"
        },
        {
          "match": "\"(?=((\\\\\")|[^\"'])*('|$))",
          "name": "string.quoted.double.unclosed.sql"
        },
        {
          "include": "#source-sql"
        },
        {
          "name": "variable.parameter.query.named.cfml",
          "match": "(:)([_$a-zA-Z][$\\w]*)",
          "captures": {
            "1": {
              "name": "punctuation.definition.variable.cfml"
            }
          }
        },
        {
          "name": "variable.parameter.query.positional.cfml punctuation.definition.variable.cfml",
          "match": "\\?"
        }
      ]
    },
    "source-cfml-script-arrow-function-declaration": {
      "patterns": [
        {
          "name": "meta.function.declaration.cfml",
          "begin": "(?=\\([^\\(]*?\\)\\s*=>\\s*\\{)|(?=[_$a-zA-Z][$\\w]*\\s*=>\\s*\\{)",
          "end": "(=>)\\s*",
          "endCaptures": {
            "1": {
              "name": "storage.type.function.arrow.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-arrow-function-declaration-parameters"
            },
            {
              "include": "#source-cfml-script-arrow-function-declaration-single-unparenthesized-parameter"
            }
          ]
        },
        {
          "begin": "(?=\\([^\\(]*?\\)\\s*=>)|(?=[_$a-zA-Z][$\\w]*\\s*=>)",
          "end": "(?=[);}\\],\\n])",
          "patterns": [
            {
              "name": "meta.function.declaration.cfml",
              "begin": "(?=\\(|[_$a-zA-Z])",
              "end": "(?=(=>))",
              "patterns": [
                {
                  "include": "#source-cfml-script-arrow-function-declaration-parameters"
                },
                {
                  "include": "#source-cfml-script-arrow-function-declaration-single-unparenthesized-parameter"
                }
              ]
            },
            {
              "begin": "(=>)\\s*",
              "beginCaptures": {
                "0": {
                  "name": "meta.function.declaration.cfml"
                },
                "1": {
                  "name": "storage.type.function.arrow.cfml"
                }
              },
              "contentName": "meta.function.body.cfml",
              "end": "(?=[);}\\],\\n])",
              "patterns": [
                {
                  "include": "#source-cfml-script-expressions"
                }
              ]
            }
          ]
        }
      ]
    },
    "text-html-cfml-cfoutput-tag-generic-attribute": {
      "name": "entity.other.attribute-name.html",
      "match": "(?<=[^=])\\b([a-zA-Z0-9:-]+)"
    },
    "source-cfml-script-brackets": {
      "patterns": [
        {
          "include": "#source-cfml-script-round-brackets"
        },
        {
          "include": "#source-cfml-script-square-brackets"
        }
      ]
    },
    "tags-with-script": {
      "name": "meta.tag.cfml",
      "begin": "(?i)(<)(cfset|cfreturn)(?=\\s|/?>)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.cfml"
        },
        "2": {
          "name": "entity.name.tag.cfml"
        }
      },
      "contentName": "source.cfml.script",
      "end": "(/?>)",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.tag.end.cfml"
        }
      },
      "patterns": [
        {
          "include": "#source-cfml-script"
        }
      ]
    },
    "source-cfml-script-conditional": {
      "patterns": [
        {
          "name": "meta.switch.cfml",
          "begin": "\\bswitch\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.switch.cfml"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "meta.block.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-round-brackets"
            },
            {
              "name": "meta.block.cfml",
              "begin": "\\{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.block.begin.cfml"
                }
              },
              "end": "(?=\\})",
              "patterns": [
                {
                  "begin": ":",
                  "end": "(?=(\\bcase\\b|\\bdefault\\b|\\}))",
                  "patterns": [
                    {
                      "include": "#source-cfml-script-statements"
                    }
                  ]
                },
                {
                  "name": "keyword.control.switch.cfml",
                  "match": "\\b(case|default)\\b"
                },
                {
                  "include": "#source-cfml-script-expressions"
                }
              ]
            }
          ]
        },
        {
          "name": "meta.do-while.cfml",
          "begin": "\\bdo\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.loop.cfml"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "meta.group.cfml punctuation.definition.group.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "meta.block.cfml",
              "begin": "\\{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.block.begin.cfml"
                }
              },
              "end": "\\}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.block.end.cfml"
                }
              },
              "patterns": [
                {
                  "include": "#source-cfml-script-statements"
                }
              ]
            },
            {
              "name": "keyword.control.loop.cfml",
              "match": "\\bwhile\\b"
            },
            {
              "name": "meta.group.cfml",
              "begin": "\\(",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.group.begin.cfml"
                }
              },
              "end": "(?=\\))",
              "patterns": [
                {
                  "include": "#source-cfml-script-expressions"
                }
              ]
            }
          ]
        },
        {
          "name": "meta.for.cfml",
          "begin": "\\bfor\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.loop.cfml"
            }
          },
          "end": "(?:(\\})|(?=[^\\(\\{\\}\\s]))",
          "endCaptures": {
            "1": {
              "name": "meta.block.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-parens-block-scope"
            }
          ]
        },
        {
          "name": "meta.while.cfml",
          "begin": "\\bwhile\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.loop.cfml"
            }
          },
          "end": "(?:(\\})|(?=[^\\(\\{\\}\\s]))",
          "endCaptures": {
            "1": {
              "name": "meta.block.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-parens-block-scope"
            }
          ]
        },
        {
          "name": "meta.conditional.cfml",
          "begin": "\\b(else\\s+if|if)\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.conditional.cfml"
            }
          },
          "end": "(?:(\\})|(?=[^\\(\\{\\}\\s]))",
          "endCaptures": {
            "1": {
              "name": "meta.block.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-parens-block-scope"
            }
          ]
        },
        {
          "name": "meta.conditional.cfml",
          "begin": "\\belse\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.conditional.cfml"
            }
          },
          "end": "(?:(\\})|(?=[^\\{\\}\\s]))",
          "endCaptures": {
            "1": {
              "name": "meta.block.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-block-scope"
            }
          ]
        },
        {
          "name": "meta.try.cfml",
          "begin": "\\btry\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.try.cfml"
            }
          },
          "end": "(?:(\\})|(?=[^\\{\\}\\s]))",
          "endCaptures": {
            "1": {
              "name": "meta.block.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-block-scope"
            }
          ]
        },
        {
          "name": "meta.catch.cfml",
          "begin": "\\b(catch)\\b\\s*((\\()\\s*(?:(any)|([_$a-zA-Z][$\\w]*))\\s+([_$a-zA-Z][$\\w]*)\\s*(\\)))",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.catch.cfml"
            },
            "2": {
              "name": "meta.catch.parameter.cfml"
            },
            "3": {
              "name": "punctuation.definition.parameters.begin.cfml"
            },
            "4": {
              "name": "support.type.primitive.cfml"
            },
            "5": {
              "name": "entity.name.type.cfml"
            },
            "6": {
              "name": "variable.other.readwrite.cfml"
            },
            "7": {
              "name": "punctuation.definition.parameters.begin.cfml"
            }
          },
          "end": "(?:(\\})|(?=[^\\{\\}\\s]))",
          "endCaptures": {
            "1": {
              "name": "meta.block.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-block-scope"
            }
          ]
        },
        {
          "name": "meta.finally.cfml",
          "begin": "\\bfinally\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.finally.cfml"
            }
          },
          "end": "(?:(\\})|(?=[^\\{\\}\\s]))",
          "endCaptures": {
            "1": {
              "name": "meta.block.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-block-scope"
            }
          ]
        }
      ]
    },
    "cfproperty": {
      "patterns": [
        {
          "name": "meta.tag.cfml meta.tag.property.cfml",
          "begin": "(?i)(<)(cfproperty)\\b",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.cfml"
            },
            "2": {
              "name": "entity.name.tag.cfml"
            }
          },
          "end": "(/?>)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.cfml"
            }
          },
          "patterns": [
            {
              "match": "(?i)\\b(name)\\s*(=)\\s*(?:((\")([^<>\"']*)(\"))|((')([^<>\"']*)('))|([^<>\"'\\s]*))",
              "captures": {
                "1": {
                  "name": "entity.other.attribute-name.cfml"
                },
                "2": {
                  "name": "punctuation.separator.key-value.cfml"
                },
                "3": {
                  "name": "string.quoted.double.cfml"
                },
                "4": {
                  "name": "punctuation.definition.string.begin.cfml"
                },
                "5": {
                  "name": "meta.tag.property.name.cfml"
                },
                "6": {
                  "name": "punctuation.definition.string.end.cfml"
                },
                "7": {
                  "name": "string.quoted.single.cfml"
                },
                "8": {
                  "name": "punctuation.definition.string.begin.cfml"
                },
                "9": {
                  "name": "meta.tag.property.name.cfml"
                },
                "10": {
                  "name": "punctuation.definition.string.end.cfml"
                },
                "11": {
                  "name": "string.unquoted.cfml meta.tag.property.name.cfml"
                }
              }
            },
            {
              "match": "(?x)(?i)\n  \\b(type)\\s*(=)\\s*((\")(\n  (any|array|binary|boolean|component|date|function|guid|numeric|query|string|struct|uuid|variablename|xml) # primitive\n  |\n  ([_$a-zA-Z][$\\w.]*) #component/object (may need additional tokens)\n)(?:(\\[)(\\]))?(\"))",
              "captures": {
                "1": {
                  "name": "entity.other.attribute-name.cfml"
                },
                "2": {
                  "name": "punctuation.separator.key-value.cfml"
                },
                "3": {
                  "name": "string.quoted.double.cfml"
                },
                "4": {
                  "name": "punctuation.definition.string.begin.cfml"
                },
                "5": {
                  "name": "storage.type.cfml"
                },
                "6": {
                  "name": "support.type.primitive.cfml"
                },
                "7": {
                  "name": "entity.name.type.object.cfml"
                },
                "8": {
                  "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.begin.cfml"
                },
                "9": {
                  "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.end.cfml"
                },
                "10": {
                  "name": "punctuation.definition.string.end.cfml"
                }
              }
            },
            {
              "include": "#tag-generic-attribute"
            }
          ]
        }
      ]
    },
    "source-cfml-script-support-call-parameter": {
      "patterns": [
        {
          "begin": "\\b([_$a-zA-Z][$\\w\\.]*)\\s*(=)(?!=)",
          "captures": {
            "1": {
              "name": "entity.other.parameter-name.cfml"
            },
            "2": {
              "name": "keyword.operator.assignment.cfml"
            }
          },
          "end": "(?=[,\\)])",
          "patterns": [
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        }
      ]
    },
    "source-cfml-string-quoted-double": {
      "name": "string.quoted.double.cfml",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.cfml"
        }
      },
      "end": "\"(?!\")",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.cfml"
        }
      },
      "patterns": [
        {
          "include": "#hash-delimiters"
        },
        {
          "name": "constant.character.escape.quote.cfml",
          "match": "\"\""
        }
      ]
    },
    "source-cfml-script-number": {
      "name": "constant.numeric.cfml",
      "match": "(?xi)(?:\\B[-+])?(?:\\b0x[0-9a-f]*|(\\B\\.[0-9]+|\\b[0-9]+(\\.[0-9]*)?))"
    },
    "text-html-cfml": {
      "patterns": [
        {
          "name": "meta.tag.any.html",
          "begin": "(<)([a-zA-Z][a-zA-Z0-9:-]*)(?=[^>]*></\\2>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html"
            }
          },
          "end": "(>)(<)(/)(\\2)(>)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.tag.end.html"
            },
            "2": {
              "name": "punctuation.definition.tag.begin.html meta.scope.between-tag-pair.html"
            },
            "3": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "4": {
              "name": "entity.name.tag.html"
            },
            "5": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "patterns": [
            {
              "include": "#cfml-tags"
            },
            {
              "include": "#text-html-cfml-tag-stuff"
            }
          ]
        },
        {
          "name": "meta.tag.preprocessor.xml.html",
          "begin": "(<\\?)(xml)",
          "captures": {
            "1": {
              "name": "punctuation.definition.tag.html"
            },
            "2": {
              "name": "entity.name.tag.xml.html"
            }
          },
          "end": "(\\?>)",
          "patterns": [
            {
              "include": "#cfml-tags"
            },
            {
              "include": "#text-html-cfml-tag-generic-attribute"
            },
            {
              "include": "#text-html-cfml-string-double-quoted"
            },
            {
              "include": "#text-html-cfml-string-single-quoted"
            }
          ]
        },
        {
          "name": "comment.block.html",
          "begin": "<!--",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.html"
            }
          },
          "end": "--\\s*>",
          "patterns": [
            {
              "include": "#cfml-tags"
            },
            {
              "name": "invalid.illegal.bad-comments-or-CDATA.html",
              "match": "--"
            }
          ]
        },
        {
          "name": "meta.tag.sgml.html",
          "begin": "<!",
          "captures": {
            "0": {
              "name": "punctuation.definition.tag.html"
            }
          },
          "end": ">",
          "patterns": [
            {
              "include": "#cfml-tags"
            },
            {
              "name": "meta.tag.sgml.doctype.html",
              "begin": "(?i:DOCTYPE)",
              "captures": {
                "1": {
                  "name": "entity.name.tag.doctype.html"
                }
              },
              "end": "(?=>)",
              "patterns": [
                {
                  "include": "#cfml-tags"
                },
                {
                  "name": "string.quoted.double.doctype.identifiers-and-DTDs.html",
                  "match": "\"[^\">]*\""
                }
              ]
            },
            {
              "name": "constant.other.inline-data.html",
              "begin": "\\[CDATA\\[",
              "end": "]](?=>)"
            },
            {
              "name": "invalid.illegal.bad-comments-or-CDATA.html",
              "match": "(\\s*)(?!--|>)\\S(\\s*)"
            }
          ]
        },
        {
          "begin": "(^[ \\t]+)?(?=<(?i:style))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.embedded.leading.html"
            }
          },
          "end": "(?!\\G)([ \\t]*$\\n?)?",
          "endCaptures": {
            "1": {
              "name": "punctuation.whitespace.embedded.trailing.html"
            }
          },
          "patterns": [
            {
              "name": "meta.embedded.block.html",
              "begin": "(<)((?i:style))\\b",
              "beginCaptures": {
                "0": {
                  "name": "meta.tag.metadata.style.html"
                },
                "1": {
                  "name": "punctuation.definition.tag.begin.html"
                },
                "2": {
                  "name": "entity.name.tag.html"
                }
              },
              "end": "(/>)|((<)/)((?i:style))(>)",
              "endCaptures": {
                "0": {
                  "name": "meta.tag.metadata.style.html"
                },
                "1": {
                  "name": "punctuation.definition.tag.end.html"
                },
                "2": {
                  "name": "punctuation.definition.tag.begin.html"
                },
                "4": {
                  "name": "entity.name.tag.html"
                },
                "5": {
                  "name": "punctuation.definition.tag.end.html"
                }
              },
              "patterns": [
                {
                  "name": "meta.tag.metadata.style.html",
                  "begin": "\\G",
                  "captures": {
                    "1": {
                      "name": "punctuation.definition.tag.end.html"
                    }
                  },
                  "end": "(?=/>)|(>)",
                  "patterns": [
                    {
                      "include": "#cfml-tags"
                    },
                    {
                      "include": "#text-html-cfml-tag-stuff"
                    }
                  ]
                },
                {
                  "name": "source.css",
                  "begin": "(?!\\G)",
                  "end": "(?=</(?i:style))",
                  "patterns": [
                    {
                      "include": "#cfml-tags"
                    },
                    {
                      "include": "#source-css"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "begin": "(^[ \\t]+)?(?=<(?i:script))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.embedded.leading.html"
            }
          },
          "end": "(?!\\G)([ \\t]*$\\n?)?",
          "endCaptures": {
            "1": {
              "name": "punctuation.whitespace.embedded.trailing.html"
            }
          },
          "patterns": [
            {
              "name": "meta.embedded.block.html",
              "begin": "(<)((?i:script))\\b",
              "beginCaptures": {
                "0": {
                  "name": "meta.tag.metadata.script.html"
                },
                "1": {
                  "name": "punctuation.definition.tag.begin.html"
                },
                "2": {
                  "name": "entity.name.tag.html"
                }
              },
              "end": "(/>)|(/)((?i:script))(>)",
              "endCaptures": {
                "0": {
                  "name": "meta.tag.metadata.script.html"
                },
                "1": {
                  "name": "punctuation.definition.tag.end.html"
                },
                "2": {
                  "name": "punctuation.definition.tag.begin.html"
                },
                "3": {
                  "name": "entity.name.tag.html"
                },
                "4": {
                  "name": "punctuation.definition.tag.end.html"
                }
              },
              "patterns": [
                {
                  "begin": "\\G",
                  "end": "(?=/>|/)",
                  "patterns": [
                    {
                      "begin": "(>)",
                      "beginCaptures": {
                        "0": {
                          "name": "meta.tag.metadata.script.html"
                        },
                        "1": {
                          "name": "punctuation.definition.tag.end.html"
                        }
                      },
                      "end": "(<)(?=/(?i:script))",
                      "endCaptures": {
                        "0": {
                          "name": "meta.tag.metadata.script.html"
                        },
                        "1": {
                          "name": "punctuation.definition.tag.begin.html"
                        }
                      },
                      "patterns": [
                        {
                          "include": "#cfml-tags"
                        },
                        {
                          "name": "source.js",
                          "begin": "\\G",
                          "end": "(?=</(?i:script))",
                          "patterns": [
                            {
                              "include": "#cfml-tags"
                            },
                            {
                              "begin": "(^[ \\t]+)?(?=//)",
                              "beginCaptures": {
                                "1": {
                                  "name": "punctuation.whitespace.comment.leading.js"
                                }
                              },
                              "end": "(?!\\G)",
                              "patterns": [
                                {
                                  "name": "comment.line.double-slash.js",
                                  "begin": "//",
                                  "beginCaptures": {
                                    "0": {
                                      "name": "punctuation.definition.comment.js"
                                    }
                                  },
                                  "end": "(?=</script)|\\n"
                                }
                              ]
                            },
                            {
                              "name": "comment.block.js",
                              "begin": "/\\*",
                              "captures": {
                                "0": {
                                  "name": "punctuation.definition.comment.js"
                                }
                              },
                              "end": "\\*/|(?=</script)"
                            },
                            {
                              "include": "#source-js"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "name": "meta.tag.metadata.script.html",
                      "begin": "\\G",
                      "end": "(?i:(?=/?>|type(?=[\\s=])(?!\\s*=\\s*('|\"|)(text/(javascript|ecmascript|babel)|application/((x-)?javascript|ecmascript|babel)|module)[\\s\"'>])))",
                      "patterns": [
                        {
                          "include": "#cfml-tags"
                        },
                        {
                          "include": "#text-html-cfml-tag-stuff"
                        }
                      ]
                    },
                    {
                      "begin": "(?=(?i:type\\s*=\\s*('|\"|)(text/(x-handlebars|(x-(handlebars-)?|ng-)?template|html)[\\s\"'>])))",
                      "end": "((<))(?=/(?i:script))",
                      "endCaptures": {
                        "0": {
                          "name": "meta.tag.metadata.script.html"
                        },
                        "1": {
                          "name": "punctuation.definition.tag.begin.html"
                        },
                        "2": {
                          "name": "text.html.cfml"
                        }
                      },
                      "patterns": [
                        {
                          "name": "meta.tag.metadata.script.html",
                          "begin": "\\G",
                          "end": "(>)|(?=/>)",
                          "endCaptures": {
                            "1": {
                              "name": "punctuation.definition.tag.end.html"
                            }
                          },
                          "patterns": [
                            {
                              "include": "#cfml-tags"
                            },
                            {
                              "include": "#text-html-cfml-tag-stuff"
                            }
                          ]
                        },
                        {
                          "name": "text.html.cfml",
                          "begin": "(?!\\G)",
                          "end": "(?=</(?i:script))",
                          "patterns": [
                            {
                              "include": "#cfml-tags"
                            },
                            {
                              "include": "#text-html-cfml"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "begin": "(?=(?i:type))",
                      "end": "(<)(?=/(?i:script))",
                      "endCaptures": {
                        "0": {
                          "name": "meta.tag.metadata.script.html"
                        },
                        "1": {
                          "name": "punctuation.definition.tag.begin.html"
                        }
                      },
                      "patterns": [
                        {
                          "name": "meta.tag.metadata.script.html",
                          "begin": "\\G",
                          "end": "(>)|(?=/>)",
                          "endCaptures": {
                            "1": {
                              "name": "punctuation.definition.tag.end.html"
                            }
                          },
                          "patterns": [
                            {
                              "include": "#cfml-tags"
                            },
                            {
                              "include": "#text-html-cfml-tag-stuff"
                            }
                          ]
                        },
                        {
                          "name": "source.unknown",
                          "begin": "(?!\\G)",
                          "end": "(?=</(?i:script))"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "meta.tag.structure.any.html",
          "begin": "(</?)((?i:body|head|html)\\b)",
          "captures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.structure.any.html"
            }
          },
          "end": "(>)",
          "patterns": [
            {
              "include": "#cfml-tags"
            },
            {
              "include": "#text-html-cfml-tag-stuff"
            }
          ]
        },
        {
          "name": "meta.tag.block.any.html",
          "begin": "(</?)((?i:address|blockquote|dd|div|section|article|aside|header|footer|nav|menu|dl|dt|fieldset|form|frame|frameset|h1|h2|h3|h4|h5|h6|iframe|noframes|object|ol|p|ul|applet|center|dir|hr|pre)\\b)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.block.any.html"
            }
          },
          "end": "(>)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "patterns": [
            {
              "include": "#cfml-tags"
            },
            {
              "include": "#text-html-cfml-tag-stuff"
            }
          ]
        },
        {
          "name": "meta.tag.inline.any.html",
          "begin": "(</?)((?i:a|abbr|acronym|area|b|base|basefont|bdo|big|br|button|caption|cite|code|col|colgroup|del|dfn|em|font|head|html|i|img|input|ins|isindex|kbd|label|legend|li|link|map|meta|noscript|optgroup|option|param|q|s|samp|script|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|u|var)\\b(?!-))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.inline.any.html"
            }
          },
          "end": "((?: ?/)?>)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "patterns": [
            {
              "include": "#cfml-tags"
            },
            {
              "include": "#text-html-cfml-tag-stuff"
            }
          ]
        },
        {
          "name": "meta.tag.other.html",
          "begin": "(</?)([a-zA-Z][a-zA-Z0-9:-]*)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.other.html"
            }
          },
          "end": "(/?>)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "patterns": [
            {
              "include": "#cfml-tags"
            },
            {
              "include": "#text-html-cfml-tag-stuff"
            }
          ]
        },
        {
          "include": "#text-html-cfml-character-reference"
        },
        {
          "name": "invalid.illegal.incomplete.html",
          "match": "<>"
        },
        {
          "name": "invalid.illegal.bad-angle-bracket.html",
          "match": "<"
        }
      ]
    },
    "source-cfml-script-arrow-function-declaration-single-unparenthesized-parameter": {
      "name": "meta.function.parameters.cfml",
      "begin": "(?=[_$a-zA-Z])",
      "end": "(?=[^\\w])",
      "patterns": [
        {
          "name": "variable.parameter.function.cfml",
          "match": "[_$a-zA-Z][$\\w]*"
        }
      ]
    },
    "source-cfml-script-arrow-function-declaration-parameters": {
      "name": "meta.function.parameters.cfml",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.parameters.begin.cfml"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.parameters.end.cfml"
        }
      },
      "patterns": [
        {
          "include": "#source-cfml-script-function-parameter"
        }
      ]
    },
    "cffunction": {
      "begin": "(?i)(?=<cffunction\\b)",
      "end": "(?i)(</)(cffunction)(>)",
      "endCaptures": {
        "0": {
          "name": "meta.tag.cfml meta.function.cfml"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.cfml"
        },
        "2": {
          "name": "entity.name.tag.cfml storage.type.function.cfml"
        },
        "3": {
          "name": "punctuation.definition.tag.end.cfml"
        }
      },
      "patterns": [
        {
          "name": "meta.tag.cfml meta.function.cfml",
          "begin": "(?i)(<)(cffunction)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.cfml"
            },
            "2": {
              "name": "entity.name.tag.cfml storage.type.function.cfml"
            }
          },
          "end": "(?=>)",
          "patterns": [
            {
              "match": "(?i)\\b(name)\\s*(=)\\s*((\")([_$a-zA-Z][$\\w]*)(\"))",
              "captures": {
                "1": {
                  "name": "entity.other.attribute-name.cfml"
                },
                "2": {
                  "name": "punctuation.separator.key-value.cfml"
                },
                "3": {
                  "name": "string.quoted.double.cfml"
                },
                "4": {
                  "name": "punctuation.definition.string.begin.cfml"
                },
                "5": {
                  "name": "entity.name.function.cfml"
                },
                "6": {
                  "name": "punctuation.definition.string.end.cfml"
                }
              }
            },
            {
              "match": "(?i)\\b(access)\\s*(=)\\s*((\")(public|private|package|remote)(\"))",
              "captures": {
                "1": {
                  "name": "entity.other.attribute-name.cfml"
                },
                "2": {
                  "name": "punctuation.separator.key-value.cfml"
                },
                "3": {
                  "name": "string.quoted.double.cfml"
                },
                "4": {
                  "name": "punctuation.definition.string.begin.cfml"
                },
                "5": {
                  "name": "storage.modifier.cfml"
                },
                "6": {
                  "name": "punctuation.definition.string.end.cfml"
                }
              }
            },
            {
              "match": "(?x)(?i)\n  \\b(returntype)\\s*(=)\\s*((\")(\n  (any|array|binary|boolean|component|date|function|guid|numeric|query|string|struct|uuid|variablename|void|xml) # return-type.primitive\n  |\n  ([_$a-zA-Z][$\\w.]*) #return-type component/object (may need additional tokens)\n)(?:(\\[)(\\]))?(\"))",
              "captures": {
                "1": {
                  "name": "entity.other.attribute-name.cfml"
                },
                "2": {
                  "name": "punctuation.separator.key-value.cfml"
                },
                "3": {
                  "name": "string.quoted.double.cfml"
                },
                "4": {
                  "name": "punctuation.definition.string.begin.cfml"
                },
                "5": {
                  "name": "meta.function.return-type.cfml"
                },
                "6": {
                  "name": "support.type.primitive.cfml"
                },
                "7": {
                  "name": "entity.name.type.object.cfml"
                },
                "8": {
                  "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.begin.cfml"
                },
                "9": {
                  "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.end.cfml"
                },
                "10": {
                  "name": "punctuation.definition.string.end.cfml"
                }
              }
            },
            {
              "include": "#tag-generic-attribute"
            }
          ]
        },
        {
          "begin": ">",
          "beginCaptures": {
            "0": {
              "name": "meta.tag.cfml meta.function.cfml punctuation.definition.tag.end.cfml"
            }
          },
          "contentName": "meta.function.body.tag.cfml",
          "end": "(?i)(?=</cffunction>)",
          "patterns": [
            {
              "include": "#cfml-tags"
            },
            {
              "include": "#text-html-cfml"
            }
          ]
        }
      ]
    },
    "tag-generic-attribute": {
      "patterns": [
        {
          "include": "#source-cfml-tag-comments"
        },
        {
          "match": "\\b([a-zA-Z_][\\w:-]*)\\b",
          "captures": {
            "1": {
              "name": "entity.other.attribute-name.cfml"
            }
          }
        },
        {
          "begin": "=",
          "beginCaptures": {
            "0": {
              "name": "punctuation.separator.key-value.cfml"
            }
          },
          "end": "(?<=[^\\s=])|(?=[</>{;])",
          "patterns": [
            {
              "include": "#source-cfml-tag-comments"
            },
            {
              "include": "#source-cfml-string"
            },
            {
              "name": "string.unquoted.cfml",
              "begin": "(?=[^\\s</>{;\\'\"])",
              "end": "(?=[\\s</>{;])",
              "patterns": [
                {
                  "include": "#hash-delimiters"
                }
              ]
            }
          ]
        },
        {
          "name": "invalid.illegal.attribute-name.cfml",
          "match": "\\S+"
        }
      ]
    },
    "source-cfml-script-tag-in-script": {
      "patterns": [
        {
          "name": "meta.tag.script.cfml meta.tag.property.cfml",
          "begin": "(?i)\\b(property)(?!\\s+in\\b)(?:\\s+(any|array|binary|boolean|component|date|function|guid|numeric|query|string|struct|uuid|variablename|xml|[_$a-zA-Z][$\\w.]*))?\\s+([_$a-zA-Z][$\\w]*\\b)(?!\\s*=)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.script.cfml"
            },
            "2": {
              "name": "support.type.cfml"
            },
            "3": {
              "name": "string.unquoted.cfml meta.tag.property.name.cfml"
            }
          },
          "end": "(?=(;|{))",
          "patterns": [
            {
              "include": "#source-cfml-script-tag-generic-attribute"
            }
          ]
        },
        {
          "name": "meta.tag.script.cfml meta.tag.property.cfml",
          "begin": "(?i)\\b(property)(?!\\s+in\\b)(?=(\\s+[a-zA-Z]|\\s*$|\\s*[{;]))",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.script.cfml"
            }
          },
          "end": "(?=(;|{))",
          "patterns": [
            {
              "match": "(?i)\\b(name)\\s*(=)\\s*(?:((\")([^<>\"']*)(\"))|((')([^<>\"']*)('))|([^<>\"'\\s]*))",
              "captures": {
                "1": {
                  "name": "entity.other.attribute-name.cfml"
                },
                "2": {
                  "name": "punctuation.separator.key-value.cfml"
                },
                "3": {
                  "name": "string.quoted.double.cfml"
                },
                "4": {
                  "name": "punctuation.definition.string.begin.cfml"
                },
                "5": {
                  "name": "meta.tag.property.name.cfml"
                },
                "6": {
                  "name": "punctuation.definition.string.end.cfml"
                },
                "7": {
                  "name": "string.quoted.single.cfml"
                },
                "8": {
                  "name": "punctuation.definition.string.begin.cfml"
                },
                "9": {
                  "name": "meta.tag.property.name.cfml"
                },
                "10": {
                  "name": "punctuation.definition.string.end.cfml"
                },
                "11": {
                  "name": "string.unquoted.cfml meta.tag.property.name.cfml"
                }
              }
            },
            {
              "match": "(?x)(?i)\n  \\b(type)\\s*(=)\\s*((\")(\n  (any|array|binary|boolean|component|date|function|guid|numeric|query|string|struct|uuid|variablename|xml) # primitive\n  |\n  ([_$a-zA-Z][$\\w.]*) #component/object (may need additional tokens)\n)(?:(\\[)(\\]))?(\"))",
              "captures": {
                "1": {
                  "name": "entity.other.attribute-name.cfml"
                },
                "2": {
                  "name": "punctuation.separator.key-value.cfml"
                },
                "3": {
                  "name": "string.quoted.double.cfml"
                },
                "4": {
                  "name": "punctuation.definition.string.begin.cfml"
                },
                "5": {
                  "name": "storage.type.cfml"
                },
                "6": {
                  "name": "support.type.primitive.cfml"
                },
                "7": {
                  "name": "entity.name.type.object.cfml"
                },
                "8": {
                  "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.begin.cfml"
                },
                "9": {
                  "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.end.cfml"
                },
                "10": {
                  "name": "punctuation.definition.string.end.cfml"
                }
              }
            },
            {
              "include": "#source-cfml-script-tag-generic-attribute"
            }
          ]
        },
        {
          "name": "meta.tag.script.cfml",
          "begin": "(?i)\\b(param)(?!\\s+in\\b)(?=\\s+(name|default|max|maxLength|min|pattern|type)\\s*=)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.script.cfml"
            }
          },
          "end": "(?=[;{])",
          "patterns": [
            {
              "include": "#source-cfml-script-tag-generic-attribute-script"
            }
          ]
        },
        {
          "name": "meta.tag.script.cfml",
          "begin": "(?i)\\b(param)(?!\\s+in\\b)\\s+([_$a-zA-Z][$\\w\\.]*)(?=\\s+(name|default|max|maxLength|min|pattern|type))",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.script.cfml"
            },
            "2": {
              "name": "string.unquoted.cfml"
            }
          },
          "end": "(?=[;{])",
          "patterns": [
            {
              "include": "#source-cfml-script-tag-generic-attribute-script"
            }
          ]
        },
        {
          "name": "meta.tag.script.cfml",
          "begin": "(?i)\\b(param)(?!\\s+in\\b)(?:\\s+([_$a-zA-Z][$\\w]*))?\\s+([_$a-zA-Z][$\\w\\.]*\\b)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.script.cfml"
            },
            "2": {
              "name": "storage.type.cfml"
            },
            "3": {
              "name": "string.unquoted.cfml"
            }
          },
          "end": "(?=[;{])",
          "patterns": [
            {
              "include": "#source-cfml-script-tag-generic-attribute-script"
            }
          ]
        },
        {
          "name": "meta.tag.script.cfml",
          "begin": "(?i)\\b(param)(?!\\s+in\\b)(?=(\\s+[a-zA-Z]|\\s*[{;]|\\s*$))",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.script.cfml"
            }
          },
          "end": "(?=[;{])",
          "patterns": [
            {
              "include": "#source-cfml-script-tag-generic-attribute-script"
            }
          ]
        },
        {
          "begin": "(?x)\\b\n(?i:\n  (ajaximport|ajaxproxy|applet|application|argument|associate|break|cache|calendar\n  |chart|chartdata|chartseries|client|clientsettings|col|collection|content|cookie|dbinfo\n  |directory|div|document|documentitem|documentsection|dump|error|exchangecalendar\n  |exchangeconnection|exchangecontact|exchangefilter|exchangemail|exchangetask\n  |execute|feed|file|fileupload|flush|form|formgroup|formitem|ftp|grid|gridcolumn\n  |gridrow|gridupdate|header|htmlhead|htmltopdf|htmltopdfitem|http|httpparam|image\n  |imap|imapfilter|import|include|index|input|insert|invoke|invokeargument|layout\n  |layoutarea|ldap|location|lock|log|login|loginuser|logout|loop|mail|mailparam|mailpart\n  |map|mapitem|mediaplayer|menu|menuitem|messagebox|module|ntauthenticate|oauth|object\n  |objectcache|output|param|pdf|pdfform|pdfformparam|pdfparam|pdfsubform|pod|pop\n  |presentation|presentationslide|presenter|print|processingdirective|procparam|procresult\n  |progressbar|property|query|queryparam|registry|report|reportparam|savecontent|schedule\n  |search|select|setting|sharepoint|silent|slider|spreadsheet|sprydataset|storedproc\n  |table|textarea|textinput|thread|throw|timer|tooltip|trace|transaction|tree|treeitem|try\n  |update|video|videoplayer|videoplayerparam|wddx|websocket|window|xml|zip|zipparam)\n)(?=\\s+[a-zA-Z0-9:-]+\\s*(?:[=;{]|$)|\\s*(?:\\{|$))",
          "beginCaptures": {
            "1": {
              "name": "meta.tag.script.cfml entity.name.tag.script.cfml"
            }
          },
          "end": "(\\})|(?=;)",
          "endCaptures": {
            "1": {
              "name": "meta.block.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "meta.tag.script.cfml",
              "match": "\\s+"
            },
            {
              "include": "#source-cfml-script-block-scope"
            },
            {
              "include": "#source-cfml-script-tag-generic-attribute-script"
            }
          ]
        }
      ]
    },
    "source-cfml-script-method-call-params": {
      "name": "meta.function-call.parameters.method.cfml",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.arguments.begin.cfml"
        }
      },
      "end": "(?=\\))",
      "patterns": [
        {
          "name": "punctuation.separator.function-call.method.cfml",
          "match": ","
        },
        {
          "begin": "\\b(?i:(argumentCollection)|([_$a-zA-Z][$\\w]*))\\s*(=)(?!=)",
          "beginCaptures": {
            "1": {
              "name": "entity.other.argumentCollection.cfml"
            },
            "2": {
              "name": "entity.other.parameter-name.cfml"
            },
            "3": {
              "name": "keyword.operator.assignment.cfml"
            }
          },
          "end": "(?=[,\\)])",
          "patterns": [
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        },
        {
          "include": "#source-cfml-script-expressions"
        }
      ]
    },
    "source-cfml-script-hash-delimiters": {
      "patterns": [
        {
          "name": "constant.character.escape.hash.cfml",
          "match": "##"
        },
        {
          "begin": "#",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.template-expression.begin.cfml"
            }
          },
          "contentName": "meta.embedded.line.cfml source.cfml.script",
          "end": "#",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.template-expression.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        }
      ]
    },
    "cfif": {
      "name": "meta.tag.cfml",
      "begin": "(?i)(<)(cfif|cfelseif)\\b",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.cfml"
        },
        "2": {
          "name": "entity.name.tag.cfml"
        }
      },
      "contentName": "source.cfml.script",
      "end": ">",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.tag.end.cfml"
        }
      },
      "patterns": [
        {
          "include": "#source-cfml-script"
        }
      ]
    },
    "source-cfml-script-tag-generic-attribute": {
      "patterns": [
        {
          "include": "#source-cfml-script-comments"
        },
        {
          "match": "\\b([a-zA-Z_][\\w:-]*)\\b",
          "captures": {
            "1": {
              "name": "entity.other.attribute-name.cfml"
            }
          }
        },
        {
          "match": "(=|:)\\s*((?:[^\\s<>/'\"{;]|/(?!/>))+)",
          "captures": {
            "1": {
              "name": "punctuation.separator.key-value.cfml"
            },
            "2": {
              "name": "string.unquoted.cfml"
            }
          }
        },
        {
          "name": "punctuation.separator.key-value.cfml",
          "match": "(=|:)"
        },
        {
          "include": "#source-cfml-script-tag-string"
        },
        {
          "name": "invalid.illegal.attribute-name.cfml",
          "match": "\\S+"
        }
      ]
    },
    "source-cfml-script-support-method-call": {
      "name": "meta.function-call.method.support.cfml",
      "begin": "(?x)\n(?i:\n  (add|addautofilter|addborder|addcolumn|addfreezepane|addimage|addinfo|addpagebreaks|addrow|addrows|addsplitpane|append|avg|binarydecode|binaryenecode|blur|booleanformat|canonicalize|charsetdecode|charsetencode|childpos|cjustify|clear|clearrect|columnarray|columncount|columndata|columnexists\n  |columnlist|compare|comparenocase|contains|containsnocase|convert|convertforgrid|copy|count|createodbcdate|createodbcdatetime|createodbctime|createsheet|crop|currentrow|dateformat|datepart|datetimeformat|day|dayofweek\n  |dayofyear|daysinmonth|daysinyear|decodeforhtml|decodefromurl|decrypt|delete|deleteat|deletecolumn|deletecolumns|deletenocase|deleterow|deleterows|diff|drawarc|drawbeveledrect|drawcubiccurve|drawline\n  |drawlines|drawoval|drawpoint|drawquadraticcurve|drawrect|drawroundrect|drawtext|each|elemnew|encodeforcss|encodeforhtml|encodeforhtmlattribute|encodeforjavascript|encodeforurl|encodeforxml|encodeforxmlattribute|encodeforxpath|encrypt|every|filter|find|findall\n  |findallnocase|findkey|findnocase|findoneof|findvalue|first|firstdayofmonth|flip|formatbasen|formatcell|formatcellrange|formatcolumn|formatcolumns|formatrow|formatrows|generatesecretkey|get|getblob|getbufferedimage|getcell\n  |getcellcomment|getcellformula|getcellvalue|getcolumncount|getexifmetadata|getexiftag|getheight|getiptcmetadata|getiptctag|getmetadata|getnodetype|getresult|getrow|getsafehtml|gettoken|getwidth|grayscale|hash|hour|htmlcodeformat|htmleditformat|indexexists|info|insert|insertat|isdefined|isempty|issafehtml|jssstringformat|keyarray\n  |keyexists|keylist|keytranslate|last|lcase|left|len|listappend|listavg|listchangedelims|listcompact|listcontains\n  |listcontainsnocase|listdeleteat|listeach|listevery|listfilter|listfind|listfindnocase|listfirst|listgetat\n  |listindexexists|listinsertat|listitemtrim|listlast|listlen|listmap|listprepend|listqualify|listreduce\n  |listremoveduplicates|listrest|listsetat|listsome|listsort|listtoarray|listvaluecount|listvaluecountnocase\n  |ljustify|lsdateformat|lsdayofweek|lsiscurrency|lsisdate|lsisnumeric|lsparsecurrency|lsparsedatetime|lsparseeurocurrency|lsparsenumber|lstimeformat|ltrim|map|max|median|merge|mergecells|mid|min|minute|month|negative|overlay|paragraphformat|part|parsedatetime|paste|prepend\n  |quarter|readbinary|recordcount|reduce|refind|refindnocase|rematch|rematchnocase|removechars|removesheet|repeatstring|replace|replacelist|replacelistnocase|replacenocase\n  |rereplace|rereplacenocase|resize|reverse|right|rjustify|rotate|rotatedrawingaxis|rowdata|rtrim|scaletofit|search|second|set|setactivesheet|setactivesheetnumber|setantialiasing|setbackgroundcolor|setcell\n  |setcellcomment|setcellformula|setcellvalue|setcolumnwidth|setday|setdrawingcolor|setdrawingstroke|setdrawingtransparency|setfooter|setheader|sethour|setmetadata|setminute|setmonth|setrowheight|setsecond|setyear|sharpen|shear|sheardrawingaxis|shiftcolumns|shiftrows|slice|some|sort|spanexcluding|spanincluding|stripcr|sum|swap|timeformat|tobase64|tobinary|tolist|tosorted|tostring|tostruct|transform|translate\n  |translatedrawingaxis|trim|ucase|update|urldecode|urlencodedformat|val|valuearray|week|wrap|write|writebase64|xmlformat|xordrawingmode|year|yesnoformat)\n)\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "support.function.member.cfml"
        },
        "2": {
          "name": "meta.function-call.parameters.method.support.cfml punctuation.definition.arguments.begin.cfml"
        }
      },
      "contentName": "meta.function-call.parameters.method.support.cfml",
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "meta.function-call.parameters.method.support.cfml punctuation.definition.arguments.end.cfml"
        }
      },
      "patterns": [
        {
          "name": "punctuation.separator.function-call.method.support.cfml",
          "match": ","
        },
        {
          "begin": "\\b([_$a-zA-Z][$\\w\\.]*)\\s*(=)(?!=|>)",
          "beginCaptures": {
            "1": {
              "name": "entity.other.parameter-name.cfml"
            },
            "2": {
              "name": "keyword.operator.assignment.cfml"
            }
          },
          "end": "(?=[,\\)])",
          "patterns": [
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        },
        {
          "include": "#source-cfml-script-expressions"
        }
      ]
    },
    "source-cfml-script-function-parameter": {
      "patterns": [
        {
          "name": "punctuation.separator.function.cfml",
          "match": ","
        },
        {
          "name": "keyword.other.required.argument.cfml",
          "match": "(?i:required)"
        },
        {
          "begin": "(?:(?:(any|array|binary|boolean|component|date|function|guid|numeric|query|string|struct|uuid|variablename|xml)|([_$a-zA-Z][$\\w.]*))(?:(\\[)(\\]))?\\s+)?([_$a-zA-Z][$\\w]*)",
          "beginCaptures": {
            "1": {
              "name": "support.type.primitive.cfml"
            },
            "2": {
              "name": "entity.name.type.cfml"
            },
            "3": {
              "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.begin.cfml"
            },
            "4": {
              "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.end.cfml"
            },
            "5": {
              "name": "variable.parameter.function.cfml"
            }
          },
          "end": "(?=[,)])",
          "patterns": [
            {
              "begin": "(?=[_$a-zA-Z][$\\w]*)",
              "end": "(?=[,)])",
              "patterns": [
                {
                  "include": "#source-cfml-script-tag-generic-attribute"
                }
              ]
            },
            {
              "comment": "This does not correctly capture scopes or functions",
              "name": "meta.parameter.optional.cfml",
              "begin": "(=)\\s*(?i:(\\btrue\\b)|(\\bfalse\\b)|(\\bnull\\b)|([_$a-zA-Z][$\\w]*))?",
              "beginCaptures": {
                "1": {
                  "name": "keyword.operator.assignment.cfml"
                },
                "2": {
                  "name": "constant.language.boolean.true.cfml"
                },
                "3": {
                  "name": "constant.language.boolean.false.cfml"
                },
                "4": {
                  "name": "constant.language.null.cfml"
                },
                "5": {
                  "name": "variable.other.readwrite.cfml"
                }
              },
              "end": "(?=([_$a-zA-Z][$\\w]*|[,)]))",
              "patterns": [
                {
                  "begin": "(?=\\s*([+\\-*/&%])\\s*[_$a-zA-Z][$\\w]*)",
                  "end": "[_$a-zA-Z][$\\w]*",
                  "endCaptures": {
                    "0": {
                      "name": "variable.other.readwrite.cfml"
                    }
                  },
                  "patterns": [
                    {
                      "include": "#source-cfml-script-operators"
                    }
                  ]
                },
                {
                  "include": "#source-cfml-script-expressions"
                }
              ]
            }
          ]
        },
        {
          "include": "#source-cfml-script-comments"
        }
      ]
    },
    "source-cfml-script-block-scope": {
      "name": "meta.block.cfml",
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.block.begin.cfml"
        }
      },
      "end": "(?=\\})",
      "patterns": [
        {
          "include": "#source-cfml-script-statements"
        }
      ]
    },
    "text-html-cfml-cfoutput-string-double-quoted": {
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.html"
        }
      },
      "name": "string.quoted.double.html",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.html"
        }
      },
      "patterns": [
        {
          "include": "#cfoutput-injection"
        },
        {
          "include": "#text-html-cfml-cfoutput-character-reference"
        }
      ],
      "end": "\""
    },
    "text-html-cfml-cfoutput": {
      "patterns": [
        {
          "name": "meta.tag.any.html",
          "begin": "(<)([a-zA-Z][a-zA-Z0-9:-]*)(?=[^>]*></\\2>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.html"
            }
          },
          "end": "(>)(<)(/)(\\2)(>)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.tag.end.html"
            },
            "2": {
              "name": "punctuation.definition.tag.begin.html meta.scope.between-tag-pair.html"
            },
            "3": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "4": {
              "name": "entity.name.tag.html"
            },
            "5": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#text-html-cfml-cfoutput-tag-stuff"
            }
          ]
        },
        {
          "name": "meta.tag.preprocessor.xml.html",
          "begin": "(<\\?)(xml)",
          "captures": {
            "1": {
              "name": "punctuation.definition.tag.html"
            },
            "2": {
              "name": "entity.name.tag.xml.html"
            }
          },
          "end": "(\\?>)",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#text-html-cfml-cfoutput-tag-generic-attribute"
            },
            {
              "include": "#text-html-cfml-cfoutput-string-double-quoted"
            },
            {
              "include": "#text-html-cfml-cfoutput-string-single-quoted"
            }
          ]
        },
        {
          "name": "comment.block.html",
          "begin": "<!--",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.html"
            }
          },
          "end": "--\\s*>",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "name": "invalid.illegal.bad-comments-or-CDATA.html",
              "match": "--"
            }
          ]
        },
        {
          "name": "meta.tag.sgml.html",
          "begin": "<!",
          "captures": {
            "0": {
              "name": "punctuation.definition.tag.html"
            }
          },
          "end": ">",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "begin": "(?i:DOCTYPE)",
              "captures": {
                "1": {
                  "name": "entity.name.tag.doctype.html"
                }
              },
              "end": "(?=>)",
              "name": "meta.tag.sgml.doctype.html",
              "patterns": [
                {
                  "include": "#cfoutput-injection"
                },
                {
                  "name": "string.quoted.double.doctype.identifiers-and-DTDs.html",
                  "match": "\"[^\">]*\""
                }
              ]
            },
            {
              "name": "constant.other.inline-data.html",
              "begin": "\\[CDATA\\[",
              "end": "]](?=>)"
            },
            {
              "name": "invalid.illegal.bad-comments-or-CDATA.html",
              "match": "(\\s*)(?!--|>)\\S(\\s*)"
            }
          ]
        },
        {
          "begin": "(^[ \\t]+)?(?=<(?i:style))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.embedded.leading.html"
            }
          },
          "end": "(?!\\G)([ \\t]*$\\n?)?",
          "endCaptures": {
            "1": {
              "name": "punctuation.whitespace.embedded.trailing.html"
            }
          },
          "patterns": [
            {
              "name": "meta.embedded.block.html",
              "begin": "(<)((?i:style))\\b",
              "beginCaptures": {
                "0": {
                  "name": "meta.tag.metadata.style.html"
                },
                "1": {
                  "name": "punctuation.definition.tag.begin.html"
                },
                "2": {
                  "name": "entity.name.tag.html"
                }
              },
              "end": "(/>)|((<)/)((?i:style))(>)",
              "endCaptures": {
                "0": {
                  "name": "meta.tag.metadata.style.html"
                },
                "1": {
                  "name": "punctuation.definition.tag.end.html"
                },
                "2": {
                  "name": "punctuation.definition.tag.begin.html"
                },
                "4": {
                  "name": "entity.name.tag.html"
                },
                "5": {
                  "name": "punctuation.definition.tag.end.html"
                }
              },
              "patterns": [
                {
                  "begin": "\\G",
                  "captures": {
                    "1": {
                      "name": "punctuation.definition.tag.end.html"
                    }
                  },
                  "end": "(?=/>)|(>)",
                  "name": "meta.tag.metadata.style.html",
                  "patterns": [
                    {
                      "include": "#cfoutput-injection"
                    },
                    {
                      "include": "#text-html-cfml-cfoutput-tag-stuff"
                    }
                  ]
                },
                {
                  "begin": "(?!\\G)",
                  "end": "(?=</(?i:style))",
                  "name": "source.css",
                  "patterns": [
                    {
                      "include": "#cfoutput-injection"
                    },
                    {
                      "include": "#source-css-cfoutput"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "begin": "(^[ \\t]+)?(?=<(?i:script))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.embedded.leading.html"
            }
          },
          "end": "(?!\\G)([ \\t]*$\\n?)?",
          "endCaptures": {
            "1": {
              "name": "punctuation.whitespace.embedded.trailing.html"
            }
          },
          "patterns": [
            {
              "name": "meta.embedded.block.html",
              "begin": "(<)((?i:script))\\b",
              "beginCaptures": {
                "0": {
                  "name": "meta.tag.metadata.script.html"
                },
                "1": {
                  "name": "punctuation.definition.tag.begin.html"
                },
                "2": {
                  "name": "entity.name.tag.html"
                }
              },
              "end": "(/>)|(/)((?i:script))(>)",
              "endCaptures": {
                "0": {
                  "name": "meta.tag.metadata.script.html"
                },
                "1": {
                  "name": "punctuation.definition.tag.end.html"
                },
                "2": {
                  "name": "punctuation.definition.tag.begin.html"
                },
                "3": {
                  "name": "entity.name.tag.html"
                },
                "4": {
                  "name": "punctuation.definition.tag.end.html"
                }
              },
              "patterns": [
                {
                  "begin": "\\G",
                  "end": "(?=/>|/)",
                  "patterns": [
                    {
                      "begin": "(>)",
                      "beginCaptures": {
                        "0": {
                          "name": "meta.tag.metadata.script.html"
                        },
                        "1": {
                          "name": "punctuation.definition.tag.end.html"
                        }
                      },
                      "end": "(<)(?=/(?i:script))",
                      "endCaptures": {
                        "0": {
                          "name": "meta.tag.metadata.script.html"
                        },
                        "1": {
                          "name": "punctuation.definition.tag.begin.html"
                        }
                      },
                      "patterns": [
                        {
                          "include": "#cfoutput-injection"
                        },
                        {
                          "name": "source.js",
                          "begin": "\\G",
                          "end": "(?=</(?i:script))",
                          "patterns": [
                            {
                              "include": "#cfoutput-injection"
                            },
                            {
                              "begin": "(^[ \\t]+)?(?=//)",
                              "beginCaptures": {
                                "1": {
                                  "name": "punctuation.whitespace.comment.leading.js"
                                }
                              },
                              "end": "(?!\\G)",
                              "patterns": [
                                {
                                  "name": "comment.line.double-slash.js",
                                  "begin": "//",
                                  "beginCaptures": {
                                    "0": {
                                      "name": "punctuation.definition.comment.js"
                                    }
                                  },
                                  "end": "(?=</script)|\\n"
                                }
                              ]
                            },
                            {
                              "name": "comment.block.js",
                              "begin": "/\\*",
                              "captures": {
                                "0": {
                                  "name": "punctuation.definition.comment.js"
                                }
                              },
                              "end": "\\*/|(?=</script)"
                            },
                            {
                              "include": "#source-js-cfoutput"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "name": "meta.tag.metadata.script.html",
                      "begin": "\\G",
                      "end": "(?i:(?=/?>|type(?=[\\s=])(?!\\s*=\\s*('|\"|)(text/(javascript|ecmascript|babel)|application/((x-)?javascript|ecmascript|babel)|module)[\\s\"'>])))",
                      "patterns": [
                        {
                          "include": "#cfoutput-injection"
                        },
                        {
                          "include": "#text-html-cfml-cfoutput-tag-stuff"
                        }
                      ]
                    },
                    {
                      "begin": "(?=(?i:type\\s*=\\s*('|\"|)(text/(x-handlebars|(x-(handlebars-)?|ng-)?template|html)[\\s\"'>])))",
                      "end": "((<))(?=/(?i:script))",
                      "endCaptures": {
                        "0": {
                          "name": "meta.tag.metadata.script.html"
                        },
                        "1": {
                          "name": "punctuation.definition.tag.begin.html"
                        },
                        "2": {
                          "name": "text.html.cfml"
                        }
                      },
                      "patterns": [
                        {
                          "begin": "\\G",
                          "end": "(>)|(?=/>)",
                          "endCaptures": {
                            "1": {
                              "name": "punctuation.definition.tag.end.html"
                            }
                          },
                          "name": "meta.tag.metadata.script.html",
                          "patterns": [
                            {
                              "include": "#cfoutput-injection"
                            },
                            {
                              "include": "#text-html-cfml-cfoutput-tag-stuff"
                            }
                          ]
                        },
                        {
                          "name": "text.html.cfml",
                          "begin": "(?!\\G)",
                          "end": "(?=</(?i:script))",
                          "patterns": [
                            {
                              "include": "#cfoutput-injection"
                            },
                            {
                              "include": "#text-html-cfml-cfoutput"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "begin": "(?=(?i:type))",
                      "end": "(<)(?=/(?i:script))",
                      "endCaptures": {
                        "0": {
                          "name": "meta.tag.metadata.script.html"
                        },
                        "1": {
                          "name": "punctuation.definition.tag.begin.html"
                        }
                      },
                      "patterns": [
                        {
                          "name": "meta.tag.metadata.script.html",
                          "begin": "\\G",
                          "end": "(>)|(?=/>)",
                          "endCaptures": {
                            "1": {
                              "name": "punctuation.definition.tag.end.html"
                            }
                          },
                          "patterns": [
                            {
                              "include": "#cfoutput-injection"
                            },
                            {
                              "include": "#text-html-cfml-cfoutput-tag-stuff"
                            }
                          ]
                        },
                        {
                          "name": "source.unknown",
                          "begin": "(?!\\G)",
                          "end": "(?=</(?i:script))"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "meta.tag.structure.any.html",
          "begin": "(</?)((?i:body|head|html)\\b)",
          "captures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.structure.any.html"
            }
          },
          "end": "(>)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#text-html-cfml-cfoutput-tag-stuff"
            }
          ]
        },
        {
          "name": "meta.tag.block.any.html",
          "begin": "(</?)((?i:address|blockquote|dd|div|section|article|aside|header|footer|nav|menu|dl|dt|fieldset|form|frame|frameset|h1|h2|h3|h4|h5|h6|iframe|noframes|object|ol|p|ul|applet|center|dir|hr|pre)\\b)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.block.any.html"
            }
          },
          "end": "(>)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#text-html-cfml-cfoutput-tag-stuff"
            }
          ]
        },
        {
          "name": "meta.tag.inline.any.html",
          "begin": "(</?)((?i:a|abbr|acronym|area|b|base|basefont|bdo|big|br|button|caption|cite|code|col|colgroup|del|dfn|em|font|head|html|i|img|input|ins|isindex|kbd|label|legend|li|link|map|meta|noscript|optgroup|option|param|q|s|samp|script|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|u|var)\\b(?!-))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.inline.any.html"
            }
          },
          "end": "((?: ?/)?>)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#text-html-cfml-cfoutput-tag-stuff"
            }
          ]
        },
        {
          "begin": "(</?)([a-zA-Z][a-zA-Z0-9:-]*)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.html"
            },
            "2": {
              "name": "entity.name.tag.other.html"
            }
          },
          "end": "(/?>)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.tag.end.html"
            }
          },
          "name": "meta.tag.other.html",
          "patterns": [
            {
              "include": "#cfoutput-injection"
            },
            {
              "include": "#text-html-cfml-cfoutput-tag-stuff"
            }
          ]
        },
        {
          "include": "#text-html-cfml-cfoutput-character-reference"
        },
        {
          "name": "invalid.illegal.incomplete.html",
          "match": "<>"
        },
        {
          "name": "invalid.illegal.bad-angle-bracket.html",
          "match": "<"
        }
      ]
    },
    "source-cfml-script-punctuation": {
      "patterns": [
        {
          "begin": "\\?\\.|\\.",
          "beginCaptures": {
            "0": {
              "name": "punctuation.accessor.cfml"
            }
          },
          "end": "(?<=\\))|(?=\\n)|(\\})|(;)|(?:([A-Z][_$\\dA-Z]*)|([$\\w]+))(?=\\n|[^$\\w])(?!(\\s*\\(|\\s*=\\s*(function\\b|\\([^\\(]*?\\)\\s*=>)))",
          "endCaptures": {
            "1": {
              "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
            },
            "2": {
              "name": "punctuation.terminator.statement.cfml"
            },
            "3": {
              "name": "meta.property.constant.cfml variable.other.property.cfml"
            },
            "4": {
              "name": "meta.property.cfml variable.other.property.cfml"
            }
          },
          "patterns": [
            {
              "begin": "(?=([_$a-zA-Z][$\\w]*)\\s*(=)\\s*(function\\b|\\([^\\(]*?\\)\\s*=>\\s*\\{))",
              "end": "(?=\\})",
              "patterns": [
                {
                  "name": "meta.function.body.cfml",
                  "begin": "\\{",
                  "beginCaptures": {
                    "0": {
                      "name": "punctuation.definition.block.begin.cfml"
                    }
                  },
                  "end": "(?=\\})",
                  "patterns": [
                    {
                      "include": "#source-cfml-script-statements"
                    }
                  ]
                },
                {
                  "match": "([_$a-zA-Z][$\\w]*)\\s*(=)\\s*",
                  "captures": {
                    "0": {
                      "name": "meta.function.declaration.cfml"
                    },
                    "1": {
                      "name": "meta.property.cfml entity.name.function.cfml"
                    },
                    "2": {
                      "name": "keyword.operator.assignment.cfml"
                    }
                  }
                },
                {
                  "include": "#source-cfml-script-function-declaration"
                },
                {
                  "include": "#source-cfml-script-arrow-function-declaration"
                }
              ]
            },
            {
              "begin": "(?=([_$a-zA-Z][$\\w]*)\\s*(=)\\s*\\([^\\(]*?\\)\\s*=>)",
              "end": "(?=[);}\\],\\n])",
              "patterns": [
                {
                  "match": "([_$a-zA-Z][$\\w]*)\\s*(=)\\s*",
                  "captures": {
                    "0": {
                      "name": "meta.function.declaration.cfml"
                    },
                    "1": {
                      "name": "meta.property.cfml entity.name.function.cfml"
                    },
                    "2": {
                      "name": "keyword.operator.assignment.cfml"
                    }
                  }
                },
                {
                  "include": "#source-cfml-script-arrow-function-declaration"
                }
              ]
            },
            {
              "include": "#source-cfml-script-method-call"
            }
          ]
        },
        {
          "begin": "::",
          "beginCaptures": {
            "0": {
              "name": "punctuation.accessor.static.cfml"
            }
          },
          "end": "(?<=\\))|(?=\\n)|(\\})|(;)|(?:([A-Z][_$\\dA-Z]*)|([_$a-zA-Z][$\\w]*))(?=\\n|[^$\\w])(?!(\\s*\\(|\\s*=\\s*(function\\b|\\([^\\(]*?\\)\\s*=>)))",
          "endCaptures": {
            "1": {
              "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
            },
            "2": {
              "name": "punctuation.terminator.statement.cfml"
            },
            "3": {
              "name": "meta.property.constant.cfml"
            },
            "4": {
              "name": "meta.property.cfml"
            }
          },
          "patterns": [
            {
              "begin": "(?=([_$a-zA-Z][$\\w]*)\\s*(=)\\s*(function\\b|\\([^\\(]*?\\)\\s*=>\\s*\\{))",
              "end": "(?=\\})",
              "patterns": [
                {
                  "name": "meta.function.body.cfml",
                  "begin": "\\{",
                  "beginCaptures": {
                    "0": {
                      "name": "punctuation.definition.block.begin.cfml"
                    }
                  },
                  "end": "(?=\\})",
                  "patterns": [
                    {
                      "include": "#source-cfml-script-statements"
                    }
                  ]
                },
                {
                  "match": "([_$a-zA-Z][$\\w]*)\\s*(=)\\s*",
                  "captures": {
                    "0": {
                      "name": "meta.function.declaration.cfml"
                    },
                    "1": {
                      "name": "meta.property.cfml entity.name.function.cfml"
                    },
                    "2": {
                      "name": "keyword.operator.assignment.cfml"
                    }
                  }
                },
                {
                  "include": "#source-cfml-script-function-declaration"
                },
                {
                  "include": "#source-cfml-script-arrow-function-declaration"
                }
              ]
            },
            {
              "begin": "(?=([_$a-zA-Z][$\\w]*)\\s*(=)\\s*\\([^\\(]*?\\)\\s*=>)",
              "end": "(?=[);}\\],\\n])",
              "patterns": [
                {
                  "match": "([_$a-zA-Z][$\\w]*)\\s*(=)\\s*",
                  "captures": {
                    "0": {
                      "name": "meta.function.declaration.cfml"
                    },
                    "1": {
                      "name": "meta.property.cfml entity.name.function.cfml"
                    },
                    "2": {
                      "name": "keyword.operator.assignment.cfml"
                    }
                  }
                },
                {
                  "include": "#source-cfml-script-arrow-function-declaration"
                }
              ]
            },
            {
              "include": "#source-cfml-script-static-method-call"
            }
          ]
        },
        {
          "name": "punctuation.terminator.statement.cfml",
          "match": "\\;"
        },
        {
          "name": "meta.delimiter.comma.cfml",
          "match": ","
        }
      ]
    },
    "source-cfml-script-tag-string": {
      "patterns": [
        {
          "include": "#source-cfml-script-tag-string-quoted-single"
        },
        {
          "include": "#source-cfml-script-string-quoted-double"
        }
      ]
    },
    "source-cfml-script-tag-in-script-cf": {
      "patterns": [
        {
          "begin": "(?x)(?i)\n  ((cf\n  (?:ajaximport|ajaxproxy|application|argument|associate|break|cache\n  |chart|chartdata|chartseries|client|clientsettings|col|collection|content|cookie|dbinfo\n  |directory|div|document|documentitem|documentsection|dump|error|exchangecalendar\n  |exchangeconnection|exchangecontact|exchangefilter|exchangemail|exchangetask\n  |execute|feed|file|fileupload|flush|form|formgroup|formitem|ftp|grid|gridcolumn\n  |gridrow|gridupdate|header|htmlhead|htmltopdf|htmltopdfitem|http|httpparam|image\n  |imap|imapfilter|import|include|index|input|insert|invoke|invokeargument|layout\n  |layoutarea|ldap|location|lock|log|login|loginuser|logout|loop|mail|mailparam|mailpart\n  |map|mapitem|menuitem|messagebox|module|ntauthenticate|oauth|object\n  |objectcache|output|param|pdf|pdfform|pdfformparam|pdfparam|pdfsubform|pod|pop\n  |presentation|presentationslide|presenter|print|processingdirective|procparam|procresult\n  |progressbar|property|query|queryparam|registry|report|reportparam|savecontent|schedule\n  |search|select|setting|sharepoint|silent|slider|spreadsheet|storedproc\n  |textarea|thread|throw|timer|tooltip|trace|transaction|treeitem|try\n  |update|video|videoplayer|videoplayerparam|wddx|websocket|window|xml|zip|zipparam)\n)|(cf(?:applet|calendar|mediaplayer|menu|sprydataset|table|textinput|tree)))\\(",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.script.cfml"
            },
            "3": {
              "name": "invalid.deprecated.tag.script.cfml"
            }
          },
          "end": "\\)",
          "patterns": [
            {
              "match": "\\b([a-zA-Z_][\\w:-]*)\\b",
              "captures": {
                "1": {
                  "name": "entity.other.attribute-name.cfml"
                }
              }
            },
            {
              "begin": "(=|:)",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.separator.key-value.cfml"
                }
              },
              "end": "(?=\\s*\\b([a-zA-Z_][\\w:-]*)\\s*=)|(?=\\))",
              "patterns": [
                {
                  "include": "#source-cfml-script-expressions"
                }
              ]
            },
            {
              "name": "invalid.illegal.attribute-name.cfml",
              "match": "\\S+"
            }
          ],
          "name": "meta.tag.script.cf.cfml"
        }
      ]
    },
    "source-cfml-script-call": {
      "patterns": [
        {
          "name": "meta.function-call.support.cfml meta.function-call.support.typed-arraynew.cfml",
          "begin": "(?i)(?=\\barraynew\\s*\\[)",
          "end": "(?<=\\))",
          "patterns": [
            {
              "begin": "(?i)\\b(arraynew)\\s*(\\[)",
              "beginCaptures": {
                "1": {
                  "name": "support.function.cfml"
                },
                "2": {
                  "name": "meta.brackets.cfml meta.type.parameters.cfml punctuation.definition.brackets.begin.cfml"
                }
              },
              "contentName": "meta.brackets.cfml meta.type.parameters.cfml",
              "end": "\\]",
              "endCaptures": {
                "0": {
                  "name": "meta.brackets.cfml meta.type.parameters.cfml punctuation.definition.brackets.end.cfml"
                }
              },
              "patterns": [
                {
                  "include": "#source-cfml-script-expressions"
                }
              ]
            },
            {
              "begin": "(?<=\\])\\s*(\\()",
              "beginCaptures": {
                "1": {
                  "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.begin.cfml"
                }
              },
              "contentName": "meta.function-call.parameters.support.cfml",
              "end": "\\)",
              "endCaptures": {
                "0": {
                  "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.end.cfml"
                }
              },
              "patterns": [
                {
                  "name": "punctuation.separator.function-call.support.cfml",
                  "match": ","
                },
                {
                  "include": "#source-cfml-script-support-call-parameter"
                },
                {
                  "include": "#source-cfml-script-expressions"
                }
              ]
            }
          ]
        },
        {
          "begin": "(?=\\b[_$a-zA-Z][$\\w]*\\s*\\()",
          "end": "(?<=\\))",
          "patterns": [
            {
              "include": "#source-cfml-script-support-call"
            },
            {
              "captures": {
                "1": {
                  "name": "meta.function-call.cfml entity.name.function.cfml"
                }
              },
              "match": "([_$a-zA-Z][$\\w]*)\\s*(?=\\()"
            },
            {
              "include": "#source-cfml-script-function-call-params"
            }
          ]
        },
        {
          "begin": "(?=[_$a-zA-Z][$\\w]*\\s*\\.\\s*[_$a-zA-Z][$\\w]*\\s*\\()",
          "end": "(?<=\\))",
          "patterns": [
            {
              "begin": "(?=[_$a-zA-Z][$\\w]*\\s*\\.)",
              "end": "\\?\\.|\\.",
              "endCaptures": {
                "0": {
                  "name": "punctuation.accessor.cfml"
                }
              },
              "patterns": [
                {
                  "include": "#source-cfml-script-cfml-scopes"
                },
                {
                  "name": "variable.other.object.cfml",
                  "match": "[_$a-zA-Z][$\\w]*"
                }
              ]
            },
            {
              "name": "keyword.other.accessor.cfml",
              "match": "\\.|\\?\\."
            },
            {
              "include": "#source-cfml-script-method-call"
            }
          ]
        },
        {
          "begin": "(?=[_$a-zA-Z][$\\w.]*\\s*::\\s*[_$a-zA-Z][$\\w]*\\s*\\()",
          "end": "(?<=\\))",
          "patterns": [
            {
              "begin": "(?=[_$a-zA-Z][$\\w.]*\\s*::)",
              "end": "::",
              "endCaptures": {
                "0": {
                  "name": "punctuation.accessor.static.cfml"
                }
              },
              "patterns": [
                {
                  "name": "entity.name.class.cfml",
                  "match": "[_$a-zA-Z][$\\w.]*"
                }
              ]
            },
            {
              "include": "#source-cfml-script-static-method-call"
            }
          ]
        }
      ]
    },
    "text-html-cfml-string-double-quoted": {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.html"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.html"
        }
      },
      "name": "string.quoted.double.html",
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "include": "#text-html-cfml-character-reference"
        }
      ]
    },
    "cfquery": {
      "begin": "(?i)(?=<cfquery\\b)",
      "end": "(?i)(</)(cfquery)(>)",
      "endCaptures": {
        "0": {
          "name": "meta.tag.cfml"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.cfml"
        },
        "2": {
          "name": "entity.name.tag.cfml"
        },
        "3": {
          "name": "punctuation.definition.tag.end.cfml"
        }
      },
      "patterns": [
        {
          "name": "meta.tag.cfml",
          "begin": "(?i)(<)(cfquery)(?=\\s|>)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.cfml"
            },
            "2": {
              "name": "entity.name.tag.cfml"
            }
          },
          "end": "(?=>)",
          "patterns": [
            {
              "include": "#tag-generic-attribute"
            }
          ]
        },
        {
          "begin": ">",
          "beginCaptures": {
            "0": {
              "name": "meta.tag.cfml punctuation.definition.tag.end.cfml"
            }
          },
          "contentName": "meta.scope.cfquery.cfml source.sql",
          "end": "(?i)(?=</cfquery>)",
          "patterns": [
            {
              "include": "#hash-delimiters"
            },
            {
              "include": "#cfml-tags"
            },
            {
              "include": "#source-sql"
            }
          ]
        }
      ]
    },
    "hash-delimiters": {
      "patterns": [
        {
          "name": "constant.character.escape.hash.cfml",
          "match": "##"
        },
        {
          "begin": "#",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.template-expression.begin.cfml"
            }
          },
          "contentName": "meta.embedded.line.cfml source.cfml.script",
          "end": "#",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.template-expression.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script"
            }
          ]
        }
      ]
    },
    "source-cfml-script-square-brackets": {
      "patterns": [
        {
          "name": "meta.brackets.cfml",
          "begin": "(?<=[$\\w\\)\\]])\\s*(\\[)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.brackets.begin.cfml"
            }
          },
          "end": "\\]",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.brackets.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "punctuation.separator.slice.cfml",
              "match": ":"
            },
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        },
        {
          "name": "meta.array-literal.cfml",
          "begin": "\\[",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.brackets.begin.cfml"
            }
          },
          "end": "\\]",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.brackets.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "punctuation.separator.array-literal.cfml",
              "match": ","
            },
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        }
      ]
    },
    "source-cfml-script-main": {
      "patterns": [
        {
          "include": "#source-cfml-script-keywords-top-level"
        },
        {
          "include": "#source-cfml-script-component"
        },
        {
          "include": "#source-cfml-script-statements"
        }
      ]
    },
    "source-cfml-script-tag-string-quoted-double": {
      "name": "string.quoted.double.cfml",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.cfml"
        }
      },
      "end": "\"(?!\")",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.cfml"
        }
      },
      "patterns": [
        {
          "name": "constant.character.escape.quote.cfml",
          "match": "\"\""
        },
        {
          "include": "#source-cfml-script-hash-delimiters"
        }
      ]
    },
    "cfcomponent": {
      "begin": "(?i)(?=<cfcomponent)",
      "end": "(?i)(</)(cfcomponent)(>)",
      "endCaptures": {
        "0": {
          "name": "meta.tag.cfml meta.class.cfml"
        },
        "1": {
          "name": "punctuation.definition.tag.begin.cfml"
        },
        "2": {
          "name": "entity.name.tag.cfml storage.type.class.cfml"
        },
        "3": {
          "name": "punctuation.definition.tag.end.cfml"
        }
      },
      "patterns": [
        {
          "name": "meta.tag.cfml meta.class.cfml",
          "begin": "(?i)(<)(cfcomponent)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.cfml"
            },
            "2": {
              "name": "entity.name.tag.cfml storage.type.class.cfml"
            }
          },
          "end": "(?=>)",
          "patterns": [
            {
              "include": "#source-cfml-extends"
            },
            {
              "include": "#tag-generic-attribute"
            }
          ]
        },
        {
          "begin": ">",
          "beginCaptures": {
            "0": {
              "name": "meta.tag.cfml meta.class.cfml punctuation.definition.tag.end.cfml"
            }
          },
          "contentName": "meta.class.body.tag.cfml",
          "end": "(?i)(?=</cfcomponent>)",
          "patterns": [
            {
              "include": "#cfml-tags"
            }
          ]
        }
      ]
    },
    "source-cfml-script-function-call-params": {
      "name": "meta.function-call.cfml meta.function-call.parameters.cfml",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.arguments.begin.cfml"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.arguments.end.cfml"
        }
      },
      "patterns": [
        {
          "name": "punctuation.separator.function-call.cfml",
          "match": ","
        },
        {
          "begin": "\\b([_$a-zA-Z][$\\w]*)\\s*(=)(?!=)",
          "beginCaptures": {
            "1": {
              "name": "entity.other.parameter-name.cfml"
            },
            "2": {
              "name": "keyword.operator.assignment.cfml"
            }
          },
          "end": "(?=[,\\)])",
          "patterns": [
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        },
        {
          "include": "#source-cfml-script-expressions"
        }
      ]
    },
    "source-cfml-script-string": {
      "patterns": [
        {
          "include": "#source-cfml-script-string-quoted-single"
        },
        {
          "include": "#source-cfml-script-string-quoted-double"
        }
      ]
    },
    "source-cfml-script-comments": {
      "patterns": [
        {
          "name": "comment.block.documentation.cfml",
          "begin": "(/\\*\\*)\\s*$",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.cfml"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.cfml"
            }
          },
          "patterns": [
            {
              "begin": "^\\s*\\*?\\s*((@)\\S*)\\b",
              "beginCaptures": {
                "1": {
                  "name": "keyword.other.documentation.cfml"
                },
                "2": {
                  "name": "punctuation.definition.keyword.cfml"
                }
              },
              "end": "(\\n|(?=\\*/))"
            },
            {
              "begin": "^\\s*(\\*(?!/))?\\s*(?=\\w)",
              "end": "(\\n|(?=\\*/))"
            }
          ]
        },
        {
          "name": "comment.block.cfml",
          "begin": "/\\*",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.cfml"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.cfml"
            }
          }
        },
        {
          "name": "comment.line.double-slash.cfml",
          "begin": "//",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.cfml"
            }
          },
          "end": "\\n"
        },
        {
          "include": "#source-cfml-tag-comments"
        }
      ]
    },
    "source-cfml-script-function-declaration-parameters": {
      "patterns": [
        {
          "name": "meta.function.declaration.cfml meta.function.parameters.cfml",
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.parameters.begin.cfml"
            }
          },
          "end": "(?=\\))",
          "patterns": [
            {
              "include": "#source-cfml-script-function-parameter"
            }
          ]
        },
        {
          "name": "meta.function.declaration.cfml",
          "begin": "\\)",
          "beginCaptures": {
            "0": {
              "name": "meta.function.parameters.cfml punctuation.definition.parameters.end.cfml"
            }
          },
          "end": "(?=(\\{|;|=>))",
          "patterns": [
            {
              "include": "#source-cfml-script-tag-generic-attribute"
            }
          ]
        }
      ]
    },
    "source-cfml-script-anonymous-function": {
      "patterns": [
        {
          "begin": "(?=(\\s*\\bfunction\\b|\\s*\\([^\\(]*?\\)\\s*=>\\s*\\{))",
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "meta.function.body.cfml",
              "begin": "\\{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.block.begin.cfml"
                }
              },
              "end": "(?=\\})",
              "patterns": [
                {
                  "include": "#source-cfml-script-statements"
                }
              ]
            },
            {
              "match": "\\b(function)\\b\\s*",
              "captures": {
                "0": {
                  "name": "meta.function.anonymous.cfml meta.function.declaration.cfml"
                },
                "1": {
                  "name": "storage.type.function.cfml"
                }
              }
            },
            {
              "match": "\\s*(=>)\\s*",
              "captures": {
                "0": {
                  "name": "meta.function.anonymous.cfml meta.function.declaration.cfml"
                },
                "1": {
                  "name": "storage.type.function.arrow.cfml"
                }
              }
            },
            {
              "name": "meta.function.anonymous.cfml meta.function.declaration.cfml entity.name.function.cfml",
              "match": "[_$a-zA-Z][$\\w]*"
            },
            {
              "name": "meta.function.anonymous.cfml meta.function.declaration.cfml meta.function.parameters.cfml",
              "begin": "\\(",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.parameters.begin.cfml"
                }
              },
              "end": "(?=\\))",
              "patterns": [
                {
                  "include": "#source-cfml-script-function-parameter"
                }
              ]
            },
            {
              "name": "meta.function.anonymous.cfml meta.function.declaration.cfml",
              "begin": "\\)",
              "beginCaptures": {
                "0": {
                  "name": "meta.function.parameters.cfml punctuation.definition.parameters.end.cfml"
                }
              },
              "end": "(?=(\\{|=>))",
              "patterns": [
                {
                  "include": "#source-cfml-script-tag-generic-attribute"
                }
              ]
            }
          ]
        },
        {
          "begin": "(?=\\s*\\([^\\(]*?\\)\\s*=>)",
          "end": "(?=[);}\\],\\n])",
          "patterns": [
            {
              "begin": "\\s*(=>)\\s*",
              "beginCaptures": {
                "0": {
                  "name": "meta.function.anonymous.cfml meta.function.declaration.cfml"
                },
                "1": {
                  "name": "storage.type.function.arrow.cfml"
                }
              },
              "contentName": "meta.function.body.cfml",
              "end": "(?=[);}\\],\\n])",
              "patterns": [
                {
                  "include": "#source-cfml-script-expressions"
                }
              ]
            },
            {
              "name": "meta.function.anonymous.cfml meta.function.declaration.cfml meta.function.parameters.cfml",
              "begin": "(?=\\(|[_$a-zA-Z])",
              "end": "(?=(=>))",
              "patterns": [
                {
                  "include": "#source-cfml-script-arrow-function-declaration-parameters"
                },
                {
                  "include": "#source-cfml-script-arrow-function-declaration-single-unparenthesized-parameter"
                }
              ]
            }
          ]
        },
        {
          "begin": "(?=\\s*\\([^\\(]*?\\)\\s*=>)|(?=[_$a-zA-Z][$\\w]*\\s*=>)",
          "end": "(?=[);}\\],\\n])",
          "patterns": [
            {
              "begin": "\\s*(=>)\\s*",
              "beginCaptures": {
                "0": {
                  "name": "meta.function.anonymous.cfml meta.function.declaration.cfml"
                },
                "1": {
                  "name": "storage.type.function.arrow.cfml"
                }
              },
              "contentName": "meta.function.body.cfml",
              "end": "(?=[);}\\],\\n])",
              "patterns": [
                {
                  "include": "#source-cfml-script-expressions"
                }
              ]
            },
            {
              "name": "meta.function.anonymous.cfml meta.function.declaration.cfml meta.function.parameters.cfml",
              "begin": "(?=\\()",
              "end": "(?=(=>))",
              "patterns": [
                {
                  "include": "#source-cfml-script-arrow-function-declaration-parameters"
                }
              ]
            },
            {
              "name": "meta.function.anonymous.cfml meta.function.declaration.cfml meta.function.parameters.cfml",
              "begin": "(?=[_$a-zA-Z])",
              "end": "(?=(=>))",
              "patterns": [
                {
                  "include": "#source-cfml-script-arrow-function-declaration-single-unparenthesized-parameter"
                }
              ]
            }
          ]
        }
      ]
    },
    "source-cfml-script-struct-literal": {
      "name": "meta.struct-literal.cfml",
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.block.begin.cfml"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.block.end.cfml"
        }
      },
      "patterns": [
        {
          "include": "#source-cfml-script-comments"
        },
        {
          "begin": "(?=(\\'[^']*\\'|\\\"[^\"]*\\\"|[_$a-zA-Z][$\\w]*)\\s*(:|=)\\s*(\\bfunction\\b|\\([^\\(]*?\\)\\s*=>\\s*\\{))",
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal-function-keys"
            },
            {
              "begin": "(?=\\s*\\bfunction\\b)",
              "end": "(?=\\})",
              "patterns": [
                {
                  "include": "#source-cfml-script-function-declaration"
                },
                {
                  "name": "meta.function.body.cfml",
                  "begin": "\\{",
                  "beginCaptures": {
                    "0": {
                      "name": "punctuation.definition.block.begin.cfml"
                    }
                  },
                  "end": "(?=\\})",
                  "patterns": [
                    {
                      "include": "#source-cfml-script-statements"
                    }
                  ]
                }
              ]
            },
            {
              "begin": "(?=\\s*\\([^\\(]*?\\)\\s*=>\\s*\\{)",
              "end": "(?=\\})",
              "patterns": [
                {
                  "include": "#source-cfml-script-arrow-function-declaration"
                },
                {
                  "name": "meta.function.body.cfml",
                  "begin": "\\{",
                  "beginCaptures": {
                    "0": {
                      "name": "punctuation.definition.block.begin.cfml"
                    }
                  },
                  "end": "(?=\\})",
                  "patterns": [
                    {
                      "include": "#source-cfml-script-statements"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "begin": "(?=(\\'[^']*\\'|\\\"[^\"]*\\\"|[_$a-zA-Z][$\\w]*)\\s*(:|=)\\s*\\([^\\(]*?\\)\\s*=>)",
          "end": "(?=[);}\\],\\n])",
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal-function-keys"
            },
            {
              "include": "#source-cfml-script-arrow-function-declaration"
            }
          ]
        },
        {
          "name": "meta.struct-literal.key.cfml",
          "begin": "(?=\"|')",
          "patterns": [
            {
              "include": "#source-cfml-script-string"
            }
          ],
          "end": "(?<=\"|')"
        },
        {
          "name": "meta.struct-literal.key.cfml",
          "match": "[_$a-zA-Z][$\\w]*"
        },
        {
          "begin": "(:|=)\\s*",
          "beginCaptures": {
            "1": {
              "name": "punctuation.separator.key-value.cfml"
            }
          },
          "end": "(,)|(?=\\})",
          "endCaptures": {
            "1": {
              "name": "punctuation.separator.struct-literal.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-expressions"
            }
          ]
        },
        {
          "name": "punctuation.separator.struct-literal.cfml",
          "match": ","
        }
      ]
    },
    "text-html-cfml-tag-id-attribute": {
      "name": "meta.attribute-with-value.id.html",
      "begin": "(?i)\\b(id)\\s*(=)",
      "beginCaptures": {
        "1": {
          "name": "entity.other.attribute-name.id.html"
        },
        "2": {
          "name": "punctuation.separator.key-value.html"
        }
      },
      "end": "(?!\\G)(?<='|\"|[^\\s<>/])",
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "name": "string.quoted.double.html",
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.html"
            }
          },
          "contentName": "meta.toc-list.id.html",
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.html"
            }
          },
          "patterns": [
            {
              "include": "#cfml-tags"
            },
            {
              "include": "#text-html-cfml-character-reference"
            }
          ]
        },
        {
          "name": "string.quoted.single.html",
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.html"
            }
          },
          "contentName": "meta.toc-list.id.html",
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.html"
            }
          },
          "patterns": [
            {
              "include": "#cfml-tags"
            },
            {
              "include": "#text-html-cfml-character-reference"
            }
          ]
        }
      ]
    },
    "text-html-cfml-tag-style-attribute": {
      "name": "meta.attribute-with-value.style.html",
      "begin": "(?i)\\b(style)\\s*(=)",
      "beginCaptures": {
        "1": {
          "name": "entity.other.attribute-name.style.html"
        },
        "2": {
          "name": "punctuation.separator.key-value.html"
        }
      },
      "end": "(?!\\G)|(?=\\s|/?>)",
      "patterns": [
        {
          "name": "string.quoted.double.html",
          "match": "(\")([^\"]*)(\")",
          "captures": {
            "1": {
              "name": "punctuation.definition.string.begin.html"
            },
            "2": {
              "name": "source.css.style.html",
              "patterns": [
                {
                  "name": "meta.property-list.css",
                  "match": ".+",
                  "captures": {
                    "0": {
                      "patterns": [
                        {
                          "include": "#cfml-tags"
                        },
                        {
                          "include": "#text-html-cfml-character-reference"
                        },
                        {
                          "include": "#source-css-rule-list-innards"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "3": {
              "name": "punctuation.definition.string.end.html"
            }
          }
        },
        {
          "name": "string.quoted.single.html",
          "match": "(')([^']*)(')",
          "captures": {
            "1": {
              "name": "punctuation.definition.string.begin.html"
            },
            "2": {
              "name": "source.css.style.html",
              "patterns": [
                {
                  "name": "meta.property-list.css",
                  "match": ".+",
                  "captures": {
                    "0": {
                      "patterns": [
                        {
                          "include": "#cfml-tags"
                        },
                        {
                          "include": "#text-html-cfml-character-reference"
                        },
                        {
                          "include": "#source-css-rule-list-innards"
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "3": {
              "name": "punctuation.definition.string.end.html"
            }
          }
        },
        {
          "name": "string.unquoted.html",
          "match": "([^\\s&>\"'<=`]|&(?=>))+",
          "captures": {
            "0": {
              "name": "source.css.style.html",
              "patterns": [
                {
                  "match": ".+",
                  "name": "meta.property-list.css",
                  "captures": {
                    "0": {
                      "patterns": [
                        {
                          "include": "#cfml-tags"
                        },
                        {
                          "include": "#source-css-rule-list-innards"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "source-cfml-script-named-function": {
      "patterns": [
        {
          "begin": "(?x)\n(?:\n  (?:\n    (?i:\\b(private|package|public|remote|static|final|abstract|default)\\s+)?\n    (?i:\\b(private|package|public|remote|static|final|abstract|default)\\s+)?\n    ((?i:\\b\n      (any|array|binary|boolean|component|date|function|guid|numeric|query|string|struct|uuid|variablename|void|xml)\\s+\n      |\n      ([A-Za-z0-9_.$]+)\\s+\n      |\n      ([A-Za-z0-9_.$]+)(?:(\\[)(\\]))?\\s+\n    ))?\n  )\n)\n(?i:(function))\n\\s+\n(?:\n  (init)\n  |\n  ([_$a-zA-Z][$\\w]*)\n)\\b",
          "beginCaptures": {
            "0": {
              "name": "meta.function.declaration.cfml"
            },
            "1": {
              "name": "storage.modifier.cfml"
            },
            "2": {
              "name": "storage.modifier.cfml"
            },
            "3": {
              "name": "meta.function.return-type.cfml"
            },
            "4": {
              "name": "support.type.primitive.cfml"
            },
            "5": {
              "name": "entity.name.type.object.cfml"
            },
            "6": {
              "name": "entity.name.type.object.array.cfml"
            },
            "7": {
              "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.begin.cfml"
            },
            "8": {
              "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.end.cfml"
            },
            "9": {
              "name": "storage.type.function.cfml"
            },
            "10": {
              "name": "entity.name.function.constructor.cfml"
            },
            "11": {
              "name": "entity.name.function.cfml"
            }
          },
          "end": "\\}|(?=;)",
          "endCaptures": {
            "0": {
              "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-function-declaration-parameters"
            },
            {
              "name": "meta.function.body.cfml",
              "begin": "\\{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.block.begin.cfml"
                }
              },
              "end": "(?=\\})",
              "patterns": [
                {
                  "include": "#source-cfml-script-statements"
                }
              ]
            }
          ]
        },
        {
          "begin": "(?=(([_$a-zA-Z][$\\w]*)\\s*(\\.)\\s*)+([_$a-zA-Z][$\\w]*)\\s*(=)\\s*(\\s*\\bfunction\\b|\\s*\\([^\\(]*?\\)\\s*=>\\s*\\{))",
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "meta.function.body.cfml",
              "begin": "\\{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.block.begin.cfml"
                }
              },
              "end": "(?=\\})",
              "patterns": [
                {
                  "include": "#source-cfml-script-statements"
                }
              ]
            },
            {
              "include": "#source-cfml-script-arrow-function-declaration"
            },
            {
              "include": "#source-cfml-script-function-declaration"
            },
            {
              "name": "meta.function.declaration.cfml",
              "begin": "(?=[_$a-zA-Z][$\\w]*\\s*\\.)",
              "end": "\\?\\.|\\.",
              "endCaptures": {
                "0": {
                  "name": "punctuation.accessor.cfml"
                }
              },
              "patterns": [
                {
                  "include": "#source-cfml-script-cfml-scopes"
                },
                {
                  "name": "support.class.cfml",
                  "match": "[_$a-zA-Z][$\\w]*"
                }
              ]
            },
            {
              "name": "meta.function.declaration.cfml",
              "begin": "(?=[_$a-zA-Z][$\\w]*\\s*(=)\\s*)",
              "end": "\\s*(=)\\s*",
              "endCaptures": {
                "1": {
                  "name": "keyword.operator.assignment.cfml"
                }
              },
              "patterns": [
                {
                  "name": "meta.property.cfml entity.name.function.cfml",
                  "match": "[_$a-zA-Z][$\\w]*"
                }
              ]
            }
          ]
        },
        {
          "begin": "(?=(([_$a-zA-Z][$\\w]*)\\s*(\\.)\\s*)+([_$a-zA-Z][$\\w]*)\\s*(=)\\s*\\([^\\(]*?\\)\\s*=>)",
          "end": "(?=[);}\\],\\n])",
          "patterns": [
            {
              "include": "#source-cfml-script-arrow-function-declaration"
            },
            {
              "name": "meta.function.declaration.cfml",
              "begin": "(?=[_$a-zA-Z][$\\w]*\\s*\\.)",
              "end": "\\?\\.|\\.",
              "endCaptures": {
                "0": {
                  "name": "punctuation.accessor.cfml"
                }
              },
              "patterns": [
                {
                  "include": "#source-cfml-script-cfml-scopes"
                },
                {
                  "name": "support.class.cfml",
                  "match": "[_$a-zA-Z][$\\w]*"
                }
              ]
            },
            {
              "name": "meta.function.declaration.cfml",
              "begin": "(?=[_$a-zA-Z][$\\w]*\\s*(=)\\s*)",
              "end": "\\s*(=)\\s*",
              "endCaptures": {
                "1": {
                  "name": "keyword.operator.assignment.cfml"
                }
              },
              "patterns": [
                {
                  "name": "meta.property.cfml entity.name.function.cfml",
                  "match": "[_$a-zA-Z][$\\w]*"
                }
              ]
            }
          ]
        },
        {
          "begin": "(?=([_$a-zA-Z][$\\w]*)\\s*(=)\\s*(((\\s*\\bfunction\\b|\\s*\\([^\\(]*?\\)\\s*=>\\s*\\{))|([_$a-zA-Z][$\\w]*\\s*=>\\s*\\{)))",
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "meta.function.body.cfml",
              "begin": "\\{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.block.begin.cfml"
                }
              },
              "end": "(?=\\})",
              "patterns": [
                {
                  "include": "#source-cfml-script-statements"
                }
              ]
            },
            {
              "include": "#source-cfml-script-arrow-function-declaration"
            },
            {
              "include": "#source-cfml-script-function-declaration"
            },
            {
              "name": "meta.function.declaration.cfml",
              "begin": "(?=[_$a-zA-Z][$\\w]*\\s*(=)\\s*)",
              "end": "\\s*(=)\\s*",
              "endCaptures": {
                "1": {
                  "name": "keyword.operator.assignment.cfml"
                }
              },
              "patterns": [
                {
                  "name": "variable.other.constant.cfml entity.name.function.cfml",
                  "match": "[A-Z][_$\\dA-Z]*"
                },
                {
                  "name": "variable.other.readwrite.cfml entity.name.function.cfml",
                  "match": "[_$a-zA-Z][$\\w]*"
                }
              ]
            }
          ]
        },
        {
          "begin": "(?=([_$a-zA-Z][$\\w]*)\\s*(=)\\s*(([_$a-zA-Z][$\\w]*)|(\\([^\\(]*?\\)))\\s*=>)",
          "end": "(?=[);}\\],\\n])",
          "patterns": [
            {
              "include": "#source-cfml-script-arrow-function-declaration"
            },
            {
              "name": "meta.function.declaration.cfml",
              "begin": "(?=[_$a-zA-Z][$\\w]*\\s*(=)\\s*)",
              "end": "\\s*(=)\\s*",
              "endCaptures": {
                "1": {
                  "name": "keyword.operator.assignment.cfml"
                }
              },
              "patterns": [
                {
                  "name": "variable.other.constant.cfml entity.name.function.cfml",
                  "match": "[A-Z][_$\\dA-Z]*"
                },
                {
                  "name": "variable.other.readwrite.cfml entity.name.function.cfml",
                  "match": "[_$a-zA-Z][$\\w]*"
                }
              ]
            }
          ]
        },
        {
          "begin": "(?=\\s*\\bfunction\\b\\s+[_$a-zA-Z][$\\w]*)",
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "name": "meta.function.body.cfml",
              "begin": "\\{",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.block.begin.cfml"
                }
              },
              "end": "(?=\\})",
              "patterns": [
                {
                  "include": "#source-cfml-script-statements"
                }
              ]
            },
            {
              "include": "#source-cfml-script-function-declaration"
            }
          ]
        }
      ]
    },
    "text-html-cfml-tag-stuff": {
      "patterns": [
        {
          "include": "#cfml-tags"
        },
        {
          "include": "#text-html-cfml-tag-id-attribute"
        },
        {
          "include": "#text-html-cfml-tag-style-attribute"
        },
        {
          "include": "#text-html-cfml-tag-generic-attribute"
        },
        {
          "include": "#text-html-cfml-string-double-quoted"
        },
        {
          "include": "#text-html-cfml-string-single-quoted"
        },
        {
          "include": "#text-html-cfml-unquoted-attribute"
        }
      ]
    },
    "source-cfml-script-function-declaration": {
      "begin": "(?=\\s*\\bfunction\\b)",
      "end": "(?=\\{)",
      "patterns": [
        {
          "match": "\\b(function)\\b\\s*",
          "captures": {
            "0": {
              "name": "meta.function.declaration.cfml"
            },
            "1": {
              "name": "storage.type.function.cfml"
            }
          }
        },
        {
          "name": "meta.function.declaration.cfml entity.name.function.cfml",
          "match": "[_$a-zA-Z][$\\w]*"
        },
        {
          "include": "#source-cfml-script-function-declaration-parameters"
        }
      ]
    },
    "source-cfml-script-component-attributes": {
      "patterns": [
        {
          "include": "#source-cfml-extends"
        },
        {
          "include": "#source-cfml-script-tag-generic-attribute"
        }
      ]
    },
    "source-cfml-script-string-quoted-double": {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "string.quoted.double.cfml punctuation.definition.string.begin.cfml"
        }
      },
      "end": "(\")(?!\")",
      "endCaptures": {
        "1": {
          "name": "string.quoted.double.cfml punctuation.definition.string.end.cfml"
        }
      },
      "patterns": [
        {
          "name": "string.quoted.double.cfml constant.character.escape.quote.cfml",
          "match": "\"\""
        },
        {
          "name": "meta.string.quoted.double.cfml meta.embedded.block.sql source.sql",
          "begin": "(?=\\s*(?:USE|SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|REPLACE|ALTER|WITH|DECLARE|FROM|WHERE|AND|OR|NOT|EXISTS|ORDER\\s+BY|GROUP\\s+BY|HAVING|(INNER|CROSS)\\s+JOIN|(LEFT|RIGHT|FULL)(\\s+OUTER)?\\s+JOIN|UNION|INTERSECT|EXCEPT|MINUS|LIMIT|TRUNCATE\\s+TABLE|BULK\\s+INSERT)\\b)",
          "end": "(?=\"[^\"])",
          "patterns": [
            {
              "name": "constant.character.escape.quote.cfml",
              "match": "\"\""
            },
            {
              "include": "#source-cfml-sql-string-double-quoted"
            }
          ]
        },
        {
          "name": "string.quoted.double.cfml",
          "begin": "(?=\\S)",
          "end": "(?=\"[^\"])",
          "patterns": [
            {
              "name": "constant.character.escape.quote.cfml",
              "match": "\"\""
            },
            {
              "include": "#source-cfml-script-hash-delimiters"
            }
          ]
        },
        {
          "name": "string.quoted.double.cfml",
          "match": "[\\s\\n]"
        }
      ]
    },
    "source-cfml-script-statements": {
      "patterns": [
        {
          "include": "#source-cfml-script-conditional"
        },
        {
          "include": "#source-cfml-script-static"
        },
        {
          "name": "meta.block.cfml",
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.block.begin.cfml"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.block.end.cfml"
            }
          },
          "patterns": [
            {
              "include": "#source-cfml-script-statements"
            }
          ]
        },
        {
          "include": "#source-cfml-script-tag-in-script"
        },
        {
          "include": "#source-cfml-script-tag-in-script-cf"
        },
        {
          "include": "#source-cfml-script-expressions"
        }
      ]
    },
    "cfargument": {
      "patterns": [
        {
          "name": "meta.tag.cfml meta.tag.argument.cfml",
          "begin": "(?i)(<)(cfargument)\\b",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.tag.begin.cfml"
            },
            "2": {
              "name": "entity.name.tag.cfml"
            }
          },
          "end": "(/?>)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag.end.cfml"
            }
          },
          "patterns": [
            {
              "match": "(?i)\\b(name)\\s*(=)\\s*((\")([_$a-zA-Z][$\\w]*)(\"))",
              "captures": {
                "1": {
                  "name": "entity.other.attribute-name.cfml"
                },
                "2": {
                  "name": "punctuation.separator.key-value.cfml"
                },
                "3": {
                  "name": "string.quoted.double.cfml"
                },
                "4": {
                  "name": "punctuation.definition.string.begin.cfml"
                },
                "5": {
                  "name": "variable.parameter.function.cfml"
                },
                "6": {
                  "name": "punctuation.definition.string.end.cfml"
                }
              }
            },
            {
              "match": "(?x)(?i)\n  \\b(type)\\s*(=)\\s*((\")(\n  (any|array|binary|boolean|component|date|function|guid|numeric|query|string|struct|uuid|variablename|xml) # primitive\n  |\n  ([_$a-zA-Z][$\\w.]*) #component/object (may need additional tokens)\n)(?:(\\[)(\\]))?(\"))",
              "captures": {
                "1": {
                  "name": "entity.other.attribute-name.cfml"
                },
                "2": {
                  "name": "punctuation.separator.key-value.cfml"
                },
                "3": {
                  "name": "string.quoted.double.cfml"
                },
                "4": {
                  "name": "punctuation.definition.string.begin.cfml"
                },
                "5": {
                  "name": "storage.type.cfml"
                },
                "6": {
                  "name": "support.type.primitive.cfml"
                },
                "7": {
                  "name": "entity.name.type.object.cfml"
                },
                "8": {
                  "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.begin.cfml"
                },
                "9": {
                  "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.end.cfml"
                },
                "10": {
                  "name": "punctuation.definition.string.end.cfml"
                }
              }
            },
            {
              "include": "#tag-generic-attribute"
            }
          ]
        }
      ]
    },
    "source-cfml-script-keywords": {
      "patterns": [
        {
          "name": "keyword.control.throw.cfml",
          "match": "(?i)\\b(throw|rethrow)\\b(?!\\()"
        },
        {
          "name": "keyword.control.loop.cfml",
          "match": "(?i)(?<!\\.)\\b(break|continue)\\b"
        },
        {
          "name": "keyword.control.flow.cfml",
          "match": "(?i)(?<!\\.)\\b(abort)\\b"
        },
        {
          "begin": "(?i)(?<!\\.)\\b(return)\\b",
          "beginCaptures": {
            "0": {
              "name": "keyword.control.flow.cfml"
            }
          },
          "end": "(?<=\\})|(?=[^\\s\\{])",
          "patterns": [
            {
              "include": "#source-cfml-script-struct-literal"
            }
          ]
        },
        {
          "name": "storage.modifier.cfml",
          "match": "(?i)\\bfinal\\b"
        },
        {
          "name": "storage.type.cfml",
          "match": "(?i)\\bvar\\b"
        }
      ]
    }
  }
}